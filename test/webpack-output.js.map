{"version":3,"sources":["webpack://PuzzleScript/webpack/universalModuleDefinition","webpack://PuzzleScript/webpack/bootstrap","webpack://PuzzleScript/./src/models/BaseForLines.ts","webpack://PuzzleScript/./src/util.ts","webpack://PuzzleScript/./src/index.ts","webpack://PuzzleScript/./node_modules/process/browser.js","webpack://PuzzleScript/./node_modules/bitset/bitset.js","webpack://PuzzleScript/./src/models/colors.ts","webpack://PuzzleScript/./src/parser/parser.ts","webpack://PuzzleScript/./src/models/command.ts","webpack://PuzzleScript/./src/spriteBitSet.ts","webpack://PuzzleScript/./src/models/game.ts","webpack://PuzzleScript/./src/models/tile.ts","webpack://PuzzleScript/./src/models/collisionLayer.ts","webpack://PuzzleScript/./src/ui/base.ts","webpack://PuzzleScript/./src/index-browser.ts","webpack://PuzzleScript/./node_modules/keymaster/keymaster.js","webpack://PuzzleScript/./src/engine.ts","webpack://PuzzleScript/./node_modules/eventemitter2/lib/eventemitter2.js","webpack://PuzzleScript/./src/letters.ts","webpack://PuzzleScript/./node_modules/nearley/lib/nearley.js","webpack://PuzzleScript/./src/colors.ts","webpack://PuzzleScript/./src/models/level.ts","webpack://PuzzleScript/./src/models/metadata.ts","webpack://PuzzleScript/./src/models/sound.ts","webpack://PuzzleScript/./src/models/winCondition.ts","webpack://PuzzleScript/./src/parser/astRule.ts","webpack://PuzzleScript/./src/models/rule.ts","webpack://PuzzleScript/./src/lruCache.ts","webpack://PuzzleScript/./node_modules/quick-lru/index.js","webpack://PuzzleScript/./src/parser/grammar.ts","webpack://PuzzleScript/./src/sounds.ts","webpack://PuzzleScript/./lib/sound/sfxr-browser.js","webpack://PuzzleScript/./src/sound/rng.ts","webpack://PuzzleScript/./src/sound/riffwave.ts","webpack://PuzzleScript/./src/ui/table.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getLineAndColumn","str","offset","lineNum","colNum","currOffset","lineStartOffset","nextLine","prevLine","prevLineStartOffset","charAt","lineEndOffset","indexOf","length","nextLineEndOffset","slice","replace","line","BaseForLines","[object Object]","source","Error","this","__source","code","sourceOffset","split","start","col","end","RULE_DIRECTION","_flatten","arrays","concat","apply","_debounce","callback","timeout","clearTimeout","setTimeout","opposite","dir","UP","DOWN","LEFT","RIGHT","setEquals","set1","set2","size","elem","has","setAddAll","setA","iterable","newSet","Set","add","setIntersection","setB","intersection","setDifference","difference","delete","seed","randomValuesForTesting","resetRandomSeed","nextRandom","maxNonInclusive","ret","x","Math","sin","round","floor","setRandomValuesForTesting","values","clearRandomValuesForTesting","getRandomSeed","DEBUG_FLAG","engine_1","Cell","GameEngine","game_1","GameData","parser_1","Parser","default","sounds_1","closeSounds","playSound","base_1","BaseUI","util_1","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","e","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","push","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","__WEBPACK_AMD_DEFINE_RESULT__","WORD_LENGTH","WORD_LOG","popCount","v","divide","arr","B","parse","P","val","BitSet","base","substr","a","b","num","parseInt","isNaN","SyntaxError","data","ndx","Infinity","scale","Uint8Array","j","k","param","dst","_","set","undefined","not","and","T","pl","p_","tl","min","or","minLength","xor","t_","andNot","flip","from","to","clear","im","setRange","clone","toArray","unshift","toString","log","cur","tmp","repeat","every","join","isEmpty","cardinality","msb","ntz","lsb","bit","equals","ceil","random","BaseForLines_1","RGB","g","HexColor","hex","super","result","exec","hexToRgb","TransparentColor","nearley","colors_1","collisionLayer_1","colors_2","command_1","level_1","metadata_1","sound_1","tile_1","winCondition_1","astRule_1","compiledGrammar","removeNulls","ary","item","ValidationMessage","level","message","ValidationLevel","AstBuilder","tileCache","Map","soundCache","validationMessages","toSource","type","metadata","GameMetadata","forEach","pair","buildColor","colorPalette","v2","Dimension","width","height","_setValue","sprites","map","buildSprite","legendItems","buildLegendItem","sounds","buildSound","collisionLayers","buildCollisionLayer","rules","buildRuleCollection","winConditions","buildWinConditon","levels","buildLevel","gameData","getValidationMessages","node","pixels","GameSpritePixels","mapChar","colors","GameSpriteSingleColor","cacheAdd","currentColorPalette","toUpperCase","lookupColorPalette","addValidationMessage","WARNING","GameLegendTileSimple","cacheGet","GameLegendTileAnd","GameLegendTileOr","CollisionLayer","tiles","msg","GameSound","soundCode","soundCacheAdd","sfx","GameSoundSimpleEnum","when","GameSoundMoveSimple","sprite","GameSoundMoveDirection","spriteDirection","GameSoundNormal","spriteEvent","ASTRuleLoop","debugFlag","isRandom","modifiers","AST_RULE_MODIFIER","RANDOM","ASTRuleGroup","node2","commands","ASTRule","conditions","buildBracket","actions","buildCommand","ASTRuleBracket","neighbors","buildNeighbor","ASTRuleBracketEllipsis","beforeNeighbors","afterNeighbors","ASTRuleBracketNeighbor","tilesWithModifier","buildTileWithModifier","cacheHas","tile","ASTTileWithModifier","modifier","ERROR","MessageCommand","soundCacheHas","SoundCommand","soundCacheGet","CancelCommand","AgainCommand","WinCommand","RestartCommand","CheckpointCommand","WinConditionOn","qualifier","onSprite","WinConditionSimple","MessageLevel","LevelMap","rowData","row","cell","toKey","toLowerCase","grammar","Grammar","fromCompiled","parser","feed","finish","results","parseToAST","builder","build","COMMAND_TYPE","AbstractCommand","MESSAGE","sound","SFX","CANCEL","CHECKPOINT","RESTART","WIN","AGAIN","BitSet2","CustomBitSet","items","bitSet","addAll","_indexOf","other","index","SpriteBitSet","allSpritesBitSetIndex","getSprites","getName","bitSets","objects","letters_1","legends","spriteIndexCounter","ruleCache","bracketCache","neighborCache","rule","simplify","firstSpriteWithPixels","filter","hasPixels","firstSpritePixels","getPixels","cacheSpriteSize","spriteHeight","spriteWidth","letterSprites","getLetterSprites","letterSprite","letterCollisionLayer","find","cachedBackgroundSprite","background","_getSpriteByName","legendBackground","spriteNameOrLevelChar","toLocaleLowerCase","isOr","player","clearCaches","char","GameSprite","optionalLegendChar","_optionalLegendChar","trickleCells","trickleTiles","trickleTilesWithModifier","collisionLayer","hasCollisionLayer","bitSetIndex","collisionLayerIndex","getSpritesAsSet","wantsToMove","addCells","removeCells","updateCells","cells","isNo","hasNegationTileWithModifier","color","rows","isInvalid","colorLen","rowLen","pixel","GameLegendTile","_getDescendantTiles","spritesCache","sort","getCollisionLayer","id","reverse","firstCollisionLayer","matches","getCellsThatMatch","subscribeToCellChangesTile","matchesCell","collisionIdCounter","setCollisionLayer","subTile","setCollisionLayerAndIndex","__1","index_1","CellColorCache","cache","spritesToDrawSet","backgroundColor","spritesToDraw","s1","s2","spritePixels","y","objectToDraw","spriteIndex","isTransparent","collapseSpritesToPixels","cellColorCache","renderedPixels","windowOffsetColStart","windowOffsetRowStart","isDumpingScreen","PIXEL_HEIGHT","PIXEL_WIDTH","SPRITE_HEIGHT","SPRITE_WIDTH","hasVisualUi","engine","getGameData","clearScreen","windowOffsetWidth","windowOffsetHeight","flickscreen","zoomscreen","getSpriteSize","setGameEngine","press","ACTION","pressUndo","renderScreen","pressRestart","levelNum","setLevel","getCurrentLevelCells","tick","drawCells","changedCells","createMessageSprites","setMessageLevel","drawCellsAfterRecentering","restoreFromMessageLevel","renderScreenDepth","getCurrentLevel","isMap","renderMessageScreen","getMessage","levelRows","renderLevelScreen","dontRestoreCursor","playerTile","getPlayer","playerCell","isOnScreen","cellPosToXY","recenterPlayerIfNeeded","messageStr","titleImage","emptyLineStr","xToContinueStr","splitMessage","screenWidth","regex","match","RegExp","wordwrap","count","lmargin","rowtext","endPos","createMessageTextScreen","cellsRow","getLetterSprite","colIndex","rowIndex","cellStartX","cellStartY","checkIfCellCanBeDrawnOnScreen","magicBackgroundSprite","getMagicBackgroundSprite","hasAgain","boundingBoxLeft","boundingBoxTop","boundingBoxWidth","boundingBoxHeight","windowLeft","windowTop","windowWidth","windowHeight","flickScreen","zoomScreen","columns","getMaxSize","terminalWidth","terminalHeight","didADirectionChange","newWindowLeft","max","newWindowTop","keymaster","_1","table_1","TableUI","TableEngine","table","tableUI","timer","currentLevel","setGame","startKeyboardListener","startTickHandler","cancelAnimationFrame","pressUp","pressDown","pressLeft","pressRight","pressAction","runLoop","__awaiter","isCurrentLevelAMessage","alert","getCurrentLevelMessage","didLevelChange","didWinGame","messageToShow","soundToPlay","requestAnimationFrame","global","_handlers","_mods","16","18","17","91","_scope","_MODIFIERS","⇧","shift","⌥","alt","option","⌃","ctrl","control","⌘","command","_MAP","backspace","tab","enter","return","esc","escape","space","left","up","right","down","del","home","pageup","pagedown",",",".","/","`","-","=",";","'","[","]","\\","charCodeAt","_downKeys","compareArray","a1","a2","modifierMap","updateModifierKey","event","assignKey","scope","method","keys","mods","getKeys","getMods","shortcut","getScope","mi","addEvent","addEventListener","attachEvent","document","handler","modifiersMatch","keyCode","preventDefault","returnValue","stopPropagation","cancelBubble","dispatch","splice","previousKey","setScope","deleteScope","handlers","tagName","target","srcElement","isPressed","getPressedKeyCodes","noConflict","unbind","multipleKeys","obj","eventemitter2_1","spriteBitSet_1","state","cacheCollisionLayers","spriteBitSet","cachedKeyValue","_setWantsToMove","STATIONARY","cellWantsToMove","cellSprite","getStateForCollisionLayer","didActuallyChangeDir","didActuallyChangeSprite","_setState","replaceSpriteInLevel","getSpriteByCollisionLayer","didActuallyChange","remove","updateCell","getCollisionLayers","direction","getRelativeNeighbor","getCollisionLayerWantsToMove","otherSprite","prevSprite","prevWantsToMove","removeSprite","hasSprite","addCell","_deleteWantsToMove","removeCell","getSpriteAndWantsToMoves","entries","newSprites","currentSprites","spritesToRemove","spritesToAdd","removeSprites","addSprites","newSprite","getLevel","replaceSprite","needsToUpdateCache","c1","c2","invalidateKey","getCellOrNull","addSprite","Level","rowCache","colCache","getCells","oldSprite","spritesPresent","anySpritesPresent","computeRowCache","containsAll","containsAny","computeColCache","cols","getCell","union","LevelEngine","EventEmitter2","hasAgainThatNeedsToRun","undoStack","levelData","levelSprites","getRows","backgroundSprite","_setLevel","takeSnapshot","createSnapshot","tempOldLevel","LOG_LEVEL","console","error","tickNormal","hasWinCommand","hasRestart","getType","getSound","isWinning","pendingPlayerWantsToMove","snapshot","applySnapshot","pop","spriteCells","setCells","batchCells","spriteSetToKey","spriteName","allCells","addCellsToEmptyRules","batch","cellStart","cellEnd","cellTotal","_tickUpdateCells","isLate","changedMutations","evaluatedRules","cellMutations","evaluate","mutation","hasCell","getCommand","movedCells","somethingChanged","clearWantsToMove","neighbor","getNeighbor","hasCollisionWithSprite","changedCellMutations","initialSnapshot","getSpritesThatMatch","updateSprite","changedCellMutations2","tickUpdateCells","tickMoveSprites","changedCellsLate","evaluatedRulesLate","commandsLate","tickUpdateCellsLate","allCommands","doSnapshotsDiffer","conditionsSatisfied","winCondition","isSatisfied","toSnapshot","snpashot","snapshotRow","fromSnapshot","snapshot1","snapshot2","sprites1","sprites2","isFirstTick","currentLevelNum","messageShownAndWaitingForActionPress","levelEngine","eventName","getCurrentLevelNum","didWinGameInMessage","wasAgainTick","runRulesOnLevelStart","realtimeInterval","json","rowSave","cellSave","spritesToHave","isArray","defaultMaxListeners","init","_events","_conf","configure","conf","delimiter","_maxListeners","maxListeners","wildcard","newListener","_newListener","_removeListener","verboseMemoryLeak","listenerTree","logPossibleMemoryLeak","errorMsg","emitWarning","emitter","trace","EventEmitter","searchListenerTree","tree","leaf","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","**","setMaxListeners","fn","_once","prepend","_many","many","ttl","prependMany","self","listener","_origin","_on","al","_all","emitAsync","Promise","resolve","promises","reject","all","onAny","_onAny","prependAny","warned","leafs","iLeaf","position","recursivelyGarbageCollect","Function","offAny","fns","eventNames","listenerCount","listenersAny","letters","toSprite","makeLetter","Rule","symbols","postprocess","highestId","State","dot","reference","wantedBy","isComplete","Column","states","wants","scannable","completed","byName","StreamLexer","reset","options","keepHistory","lexer","lexerState","column","predict","current","withCursorAt","stringifySymbolSequence","literal","JSON","stringify","symbolSequence","nextState","child","children","fail","nextColumn","w","complete","exp","nulls","copy","Lexer","ParserStart","ParserRules","buffer","lastLineBreak","next","ch","save","formatError","token","nextLineBreak","substring","chunk","text","constructor","expect","test","isToken","err","restore","rewind","considerations","ALIASES","COLOR_PALETTES","black","white","grey","darkgrey","lightgrey","gray","darkgray","lightgray","red","darkred","lightred","brown","darkbrown","lightbrown","orange","yellow","green","darkgreen","lightgreen","blue","lightblue","darkblue","purple","pink","alias","colorName","aliasStr","Number","firstRowLength","noAction","noUndo","noRepeatAction","throttleMovement","noRestart","requirePlayerMovement","verboseLogging","author","homepage","youtube","textColor","keyRepeatInterval","againInterval","GameSoundSfx","sfxName","simpleEventName","conditionEnum","directionEnum","WIN_QUALIFIER","qualifierEnum","_isSatisfied","tileCells","cellsThatMatchTile","NO","ANY","SOME","onTile","onTileCells","ALL","rule_1","RULE_DIRECTION_LIST","RULE_DIRECTION_SET","cacheSetAndGet","brackets","actionBrackets","simpleRules","convertToMultiple","toSimple","canCollapseBecauseBracketsMatch","subscribeToCellChanges","SimpleRuleGroup","directions","getDirectionModifiers","conditionBrackets","SimpleRule","isRigid","rulesToConvert","convertedRules","expandedDirection","expandModifiers","didExpandRulesToConvert","HORIZONTAL","VERTICAL","MOVING","didExpand","nameToExpand","variations","hasModifier","variation","perpendiculars","parallels","orthoParallels","ORTHOGONAL","PERPENDICULAR","PARALLEL","newName","bracket","directionModifier","LATE","RIGID","_getAllNeighbors","hack","firstCellsInEachDirection","SIMPLE_DIRECTION_DIRECTIONS","SimpleBracket","beforeEllipsisNeighbors","afterEllipsisNeighbors","beforeEllipsis","afterEllipsis","SimpleEllipsisBracket","tilesMap","simpleTilesWithModifier","SimpleNeighbor","M_NO","relativeDirectionToAbsolute","RANDOMDIR","SimpleTileWithModifier","ASTRuleBracketNeighborHack","fields","AbstractRuleish","SimpleRuleLoop","currentDirection","relativeModifier","currentDir","lruCache_1","MAX_ITERATIONS_IN_LOOP","LRU_CACHE_SIZE","BracketPair","condition","action","ExtraPair","extra","CellMutation","CommandMutation","hasMatches","onlyEvaluateFirstMatch","Date","now","allMutations","iteration","evaluatableRules","evaluatedSomething","__getSourceLineAndColumn","hasRigid","evaluationDirection","_isLate","isSubscribedToCellChanges","prepareAction","dependsOnDirection","subscribeToNeighborChanges","allBracketsToProcess","bracketMatches","getMatches","cellPermutations","tuples","newtuples","valtoappend","tuple","newtuple","buildPermutations","permutation","didAllBracketsStillMatch","magicOrTiles","doesStillMatch","populateMagicOrTiles","isNegated","_isNegated","_isRandom","_direction","_tile","_debugFlag","ignoreDebugFlag","shouldAdd","matchesFirstCell","hasTile","getWantsToMove","matchesCellWantsToMove","ISimpleBracket","allNeighbors","firstCells","actionBracket","MatchedCellsForRule","cellsAndNeighbors","matchesCellSimple","mutations","ellipsisBracketListeners","spritesPresentInRowOrColumn","anySprites","anySpritesPresentInRowOrColumn","shouldUseOnDemandMethod","subscribeToTileChanges","actionBracketSimple","actionDebugFlag","_tilesWithModifier","_addFirstCell","firstCell","ellipsisBracket","addFirstCell","matchesDownstream","getUpstream","_removeFirstCell","firstCellUp","matchesUpstream","firstCellMatched","getFirstCellToRemove","PUZZLESCRIPT_METHOD","addToCellMatches","rowCount","colCount","colContainsSprites","addIfCellMatches","rowContainsSprites","getMatchesByLooping","getMatchesByTrickling","VERIFY_MATCHES","loopingMatches","removeFirstCell","matched","curCell","cellMatches","didAllNeighborsMatch","BEFORE_OR_AFTER","MultiMap","asRemoved","getA","beforeEllipsisBracket","afterEllipsisBracket","linkages","addEllipsisBracket","BEFORE","AFTER","checkInvariants","deleteAllA","beforeCellsRemoved","deleteAllB","beforeMatches","afterMatches","beforeMatchesByIndex","beforeMatch","lastCell","afterMatch","getB","beforeRowIndex","beforeColIndex","sizeA","ReplaceTile","actionTileWithModifier","mightNotFindConditionButThatIsOk","conditionSpritesToRemove","newDirection","orTilesRemoved","spritesToChoose","added","actuallyDidChange","cellSprites","conditionSpriteToRemove","removed","ReplaceDirection","setWantsToMoveCollisionLayer","staticCache","spritesMissing","spriteMovementsPresent","orTileMovementsPresent","lruCache","cacheYesBitSets","cacheNoBitSets","cacheDirections","cacheMultiCollisionLayerTiles","allTiles","noTiles","yesTiles","hasSingleCollisionLayer","yesBitSet","getBitSetIndexOf","prevDir","noBitSet","actionNeighbor","pairsByCollisionLayer","orTiles","unmatchedOrTiles","orTile","conditionT","t2","conditionVersion","replaceTiles","replaceDirections","didChangeSprites","didChangeDirection","replaceTile","replaceDirection","matchesTiles","indexes","tileWithModifier","doesMatch","containsNone","foundSprite","didMatch","QuickLru","maxSize","lru","valueFn","opts","assign","TypeError","oldCache","_size","_set","el","iterator","oldCacheSize","debugBlackList","debugWhiteList","toDebug","nuller","concatChars","extractFirst","subArray","extractSecond","nonemptyListOf","first","rest","upperId","TILE_MODIFIERS","_0","_2","_3","_5","_6","_7","_8","levelsAsSingleArray","currentMapLevel","levelRowItem","chars","vals","mapCharOpt","r1","r2","r3","r4","_4","eventEnum","spriteNames","againHack","firstRule","otherRules","extractThird","trim","startsWith","sfxr_1","RNG","MakeRiff","AUDIO_CONTEXT","SOUND_VOL","SAMPLE_RATE","BIT_DEPTH","SQUARE","SHAPES","checkAudioContextExists","AudioContext","webkitAudioContext","ex","rng","Params","wave_type","p_env_attack","p_env_sustain","p_env_punch","p_env_decay","p_base_freq","p_freq_limit","p_freq_ramp","p_freq_dramp","p_vib_strength","p_vib_speed","p_arp_mod","p_arp_speed","p_duty","p_duty_ramp","p_repeat_speed","p_pha_offset","p_pha_ramp","p_lpf_freq","p_lpf_ramp","p_lpf_resonance","p_hpf_freq","p_hpf_ramp","sound_vol","sample_rate","bit_depth","seeded","frnd","range","uniform","rnd","pickupCoin","den","laserShoot","explosion","birdSound","pow","pushSound","powerUp","hitHurt","jump","blipSelect","generators","SoundEffect","_buffer","createBuffer","generateFromSeed","soundGenerator","getBuffer","getChannelData","play","createBufferSource","filter1","createBiquadFilter","filter2","filter3","connect","frequency","destination","currentTime","noteOn","MIN_SAMPLE_RATE","_sample_rate","_audioElement","wav","Audio","src","dataURI","cloneNode","generate","ps","rep_time","fperiod","period","fmaxperiod","fslide","fdslide","square_duty","square_slide","arp_mod","arp_limit","fltp","fltdp","fltw","fltw_d","fltdmp","fltphp","flthp","flthp_d","vib_phase","vib_speed","vib_amp","env_vol","env_stage","env_time","env_length","env_total_length","phase","fphase","fdphase","iphase","abs","ipp","phaser_buffer","noise_buffer","rep_limit","gain","sample_sum","num_summed","summands","buffer_i","buffer_length","rfperiod","sample","si","sub_sample","fp","PI","Exception","pp","sfxCache","cachedSeeds","CACHE_MAX","params","toRemove","cacheSeed","RC4","mix","input","output","bytes","getBytes","_swap","_normal","_state","nextByte","BYTES","sqrt","cos","mean","L","FastBase64Chars","FastBase64EncLookup","FastBase64_Encode","n1","n2","n3","u32ToArray","u16ToArray","FastBase64_Init","sampleRate","bitsPerSample","header","audioFormat","blockAlign","byteRate","chunkId","chunkSize","format","numChannels","subChunk1Id","subChunk1Size","subChunk2Id","subChunk2Size","dat","tableCells","classList","markAcceptingInput","levelCells","currentY","tr","createElement","tableRow","currentX","td","tableCellPixels","setAttribute","cellLabel","appendChild","spriteRow","pixelRow","spritePixel","label","fgHex","bgHex","pixelY","pixelX","style","innerHTML","onScreenPixel","_drawCell","flag","spritesForDebugging","isBackground","textContent","getPixelsForCell","spriteRowIndex","spriteColor","spriteColIndex","toRgb","toHex","setPixel"],"mappings":"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AG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,OACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,KAEjBA,EAAW,MACN,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAAG,EAAG,IACZ,EAAG,EAAG,EAA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","file":"webpack-output.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PuzzleScript\"] = factory();\n\telse\n\t\troot[\"PuzzleScript\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","import { Optional } from '../util'\n\nexport interface IGameCode {\n    code: string\n    sourceOffset: number\n}\n\nexport interface IGameCodeWithSource {\n    sourceString: string\n}\n// Return an object with the line and column information for the given\n// offset in `str`.\n// From https://github.com/harc/ohm/blob/b88336faf69e7bd89e309931b60445c3dfd495ab/src/util.js#L56\nexport function getLineAndColumn(str: string, offset: number) {\n    let lineNum = 1\n    let colNum = 1\n\n    let currOffset = 0\n    let lineStartOffset = 0\n\n    let nextLine = null\n    let prevLine = null\n    let prevLineStartOffset = -1\n\n    while (currOffset < offset) {\n        const c = str.charAt(currOffset++)\n        if (c === '\\n') {\n            lineNum++\n            colNum = 1\n            prevLineStartOffset = lineStartOffset\n            lineStartOffset = currOffset\n        } else if (c !== '\\r') {\n            colNum++\n        }\n    }\n    // Find the end of the target line.\n    let lineEndOffset = str.indexOf('\\n', lineStartOffset)\n    if (lineEndOffset === -1) {\n        lineEndOffset = str.length\n    } else {\n        // Get the next line.\n        const nextLineEndOffset = str.indexOf('\\n', lineEndOffset + 1)\n        nextLine = nextLineEndOffset === -1 ? str.slice(lineEndOffset)\n            : str.slice(lineEndOffset, nextLineEndOffset)\n        // Strip leading and trailing EOL char(s).\n        nextLine = nextLine.replace(/^\\r?\\n/, '').replace(/\\r$/, '')\n    }\n\n    // Get the previous line.\n    if (prevLineStartOffset >= 0) {\n        prevLine = str.slice(prevLineStartOffset, lineStartOffset)\n            .replace(/\\r?\\n$/, '')  // Strip trailing EOL char(s).\n    }\n\n    // Get the target line, stripping a trailing carriage return if necessary.\n    const line = str.slice(lineStartOffset, lineEndOffset).replace(/\\r$/, '')\n\n    return {\n        lineNum,\n        colNum,\n        line,\n        prevLine,\n        nextLine\n    }\n}\n\nexport class BaseForLines {\n    public readonly __source: IGameCode // tslint:disable-line:variable-name\n    public __coverageCount: Optional<number> // tslint:disable-line:variable-name\n    constructor(source: IGameCode) {\n        if (!source) {\n            throw new Error(`BUG: failed to provide the source when constructing this object`)\n        }\n        this.__source = source\n        // This is only used for code coverage\n        if (process.env.NODE_ENV === 'development') {\n            this.__coverageCount = 0\n        }\n    }\n    public __getSourceLineAndColumn() {\n        const s = this.__source\n        return getLineAndColumn(s.code, s.sourceOffset)\n    }\n    public toString() {\n        const s = this.__source\n        const { lineNum } = getLineAndColumn(s.code, s.sourceOffset)\n        return s.code.split('\\n')[lineNum - 1]\n    }\n    public toSourceString() {\n        const s = this.__source\n        const { lineNum } = getLineAndColumn(s.code, s.sourceOffset)\n        return s.code.split('\\n')[lineNum - 1]\n    }\n    // This is mostly used for creating code coverage for the games. So we know which Rules (or objects) are not being matched\n    public __getLineAndColumnRange() {\n        const s = this.__source\n        const { lineNum, colNum } = getLineAndColumn(s.code, s.sourceOffset)\n        return {\n            start: { line: lineNum, col: colNum },\n            end: { line: lineNum, col: colNum + 1 }\n        }\n    }\n    public __incrementCoverage() {\n        if (process.env.NODE_ENV === 'development') {\n            if (!this.__coverageCount) {\n                this.__coverageCount = 0\n            }\n            this.__coverageCount++\n        }\n    }\n}\n","export type Optional<T> = T | null | undefined\n\nexport enum RULE_DIRECTION {\n    UP = 'UP',\n    DOWN = 'DOWN',\n    LEFT = 'LEFT',\n    RIGHT = 'RIGHT',\n    ACTION = 'ACTION',\n    STATIONARY = 'STATIONARY',\n    RANDOMDIR = 'RANDOMDIR'\n}\n\n// From https://stackoverflow.com/questions/10865025/merge-flatten-an-array-of-arrays-in-javascript/39000004#39000004\nexport function _flatten<T>(arrays: T[][]) {\n    return [].concat.apply([], arrays) as T[]\n}\n\n// export function _zip<T1, T2>(array1: T1[], array2: T2[]) {\n//     if (array1.length < array2.length) {\n//         throw new Error(`BUG: Zip array length mismatch ${array1.length} != ${array2.length}`)\n//     }\n//     return array1.map((v1, index) => {\n//         return [v1, array2[index]]\n//     })\n// }\n\n// export function _extend(dest: any, ...rest: any[]) {\n//     for (const obj of rest) {\n//         for (const key of Object.keys(obj)) {\n//             dest[key] = obj[key]\n//         }\n//     }\n//     return dest\n// }\n\nexport function _debounce(callback: () => any) {\n    let timeout: any// NodeJS.Timer\n    return () => {\n        if (timeout) {\n            clearTimeout(timeout)\n        }\n        timeout = setTimeout(() => {\n            callback()\n        }, 10)\n    }\n}\n\nexport function opposite(dir: RULE_DIRECTION) {\n    switch (dir) {\n        case RULE_DIRECTION.UP:\n            return RULE_DIRECTION.DOWN\n        case RULE_DIRECTION.DOWN:\n            return RULE_DIRECTION.UP\n        case RULE_DIRECTION.LEFT:\n            return RULE_DIRECTION.RIGHT\n        case RULE_DIRECTION.RIGHT:\n            return RULE_DIRECTION.LEFT\n        default:\n            throw new Error(`BUG: Invalid direction: \"${dir}\"`)\n    }\n}\n\nexport function setEquals<T>(set1: Set<T>, set2: Set<T>) {\n    if (set1.size !== set2.size) return false\n    for (const elem of set2) {\n        if (!set1.has(elem)) return false\n    }\n    return true\n}\n\nexport function setAddAll<T>(setA: Set<T>, iterable: Iterable<T>) {\n    const newSet = new Set(setA)\n    for (const elem of iterable) {\n        newSet.add(elem)\n    }\n    return newSet\n}\n\nexport function setIntersection<T>(setA: Set<T>, setB: Iterable<T>) {\n    const intersection = new Set()\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            intersection.add(elem)\n        }\n    }\n    return intersection\n}\n\nexport function setDifference<T>(setA: Set<T>, setB: Iterable<T>) {\n    const difference = new Set(setA)\n    for (const elem of setB) {\n        difference.delete(elem)\n    }\n    return difference\n}\n\n// From https://stackoverflow.com/a/19303725\nlet seed = 1\nlet randomValuesForTesting: Optional<number[]> = null\nexport function nextRandom(maxNonInclusive: number) {\n    if (randomValuesForTesting) {\n        if (randomValuesForTesting.length <= seed - 1) {\n            throw new Error(`BUG: the list of random values for testing was too short.\n            See calls to setRandomValuesForTesting([...]).\n            The list was [${randomValuesForTesting}]. Index being requested is ${seed - 1}`)\n        }\n        const ret = randomValuesForTesting[seed - 1]\n        seed++\n        // console.log(`Sending \"random\" value of \"${ret}\"`);\n\n        return ret\n    }\n    const x = Math.sin(seed++) * 10000\n    return Math.round((x - Math.floor(x)) * (maxNonInclusive - 1))\n    // return Math.round(Math.random() * (maxNonInclusive - 1))\n}\nexport function resetRandomSeed() {\n    seed = 1\n}\nexport function setRandomValuesForTesting(values: number[]) {\n    randomValuesForTesting = values\n    resetRandomSeed()\n}\nexport function clearRandomValuesForTesting() {\n    randomValuesForTesting = null\n    resetRandomSeed()\n}\nexport function getRandomSeed() {\n    return seed\n}\n\n/**\n * A `DEBUGGER` flag in the game source that causes the evaluation to pause.\n * It works like the\n * [debugger](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger)\n * keyword in JavaScript.\n *\n * **Note:** the game needs to run in debug mode (`node --inspect-brk path/to/puzzlescript.js` or `npm run play-debug`)\n * for this flag to have any effect.\n *\n * This string can be added to:\n *\n * - A Rule. Example: `DEBUGGER [ > player | cat ] -> [ > player | > cat ]`\n * - A bracket when the condition is updated: `[ > player | cat ] DEBUGGER -> [ > player | > cat ]`\n * - A bracket when it is evaluated: `[ > player | cat ] -> [ > player | > cat ] DEBUGGER`\n * - A neighbor when the condition is updated: `[ > player DEBUGGER | cat ] -> [ > player | > cat ]`\n * - A neighbor when it is evaluated: `[ > player | cat ] -> [ > player | > cat DEBUGGER ]`\n * - A tile when the condition is updated: `[ > player | DEBUGGER cat ] -> [ > player | > cat ]`\n * - A tile when it is matched: `[ > player | cat ] -> [ > player | DEBUGGER > cat ]`\n */\nexport enum DEBUG_FLAG {\n    BREAKPOINT = 'DEBUGGER', // only when the rule matches elements\n    /**\n     * Pause when a Cell causes an entry to be removed from the set of matches for this rule/bracket/neighbor/tile\n     */\n    BREAKPOINT_REMOVE = 'DEBUGGER_REMOVE'\n}\n\nexport interface ICacheable {\n    toKey: () => string\n}\n","import { Cell, GameEngine, ILoadingCellsEvent } from './engine'\nimport { GameData } from './models/game'\nimport Parser from './parser/parser'\nimport { closeSounds, playSound } from './sounds'\nimport BaseUI from './ui/base'\nimport { Optional, RULE_DIRECTION } from './util'\n\n// Public API\nexport { Parser, GameEngine, Cell, ILoadingCellsEvent, GameData, Optional, RULE_DIRECTION, BaseUI, playSound, closeSounds }\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license BitSet.js v5.0.3 4/3/2018\n * http://www.xarg.org/2014/03/javascript-bit-array/\n *\n * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n(function(root) {\n\n  'use strict';\n\n  /**\n   * The number of bits of a word\n   * @const\n   * @type number\n   */\n  var WORD_LENGTH = 32;\n\n  /**\n   * The log base 2 of WORD_LENGTH\n   * @const\n   * @type number\n   */\n  var WORD_LOG = 5;\n\n  /**\n   * Calculates the number of set bits\n   *\n   * @param {number} v\n   * @returns {number}\n   */\n  function popCount(v) {\n\n    // Warren, H. (2009). Hacker`s Delight. New York, NY: Addison-Wesley\n\n    v -= ((v >>> 1) & 0x55555555);\n    v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n    return (((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24);\n  }\n\n  /**\n   * Divide a number in base two by B\n   *\n   * @param {Array} arr\n   * @param {number} B\n   * @returns {number}\n   */\n  function divide(arr, B) {\n\n    var r = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n      r *= 2;\n      var d = (arr[i] + r) / B | 0;\n      r = (arr[i] + r) % B;\n      arr[i] = d;\n    }\n    return r;\n  }\n\n  /**\n   * Parses the parameters and set variable P\n   *\n   * @param {Object} P\n   * @param {string|BitSet|Array|Uint8Array|number=} val\n   */\n  function parse(P, val) {\n\n    if (val == null) {\n      P['data'] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      P['_'] = 0;\n      return;\n    }\n\n    if (val instanceof BitSet) {\n      P['data'] = val['data'];\n      P['_'] = val['_'];\n      return;\n    }\n\n    switch (typeof val) {\n\n      case 'number':\n        P['data'] = [val | 0];\n        P['_'] = 0;\n        break;\n\n      case 'string':\n\n        var base = 2;\n        var len = WORD_LENGTH;\n\n        if (val.indexOf('0b') === 0) {\n          val = val.substr(2);\n        } else if (val.indexOf('0x') === 0) {\n          val = val.substr(2);\n          base = 16;\n          len = 8;\n        }\n\n        P['data'] = [];\n        P['_'] = 0;\n\n        var a = val.length - len;\n        var b = val.length;\n\n        do {\n\n          var num = parseInt(val.slice(a > 0 ? a : 0, b), base);\n\n          if (isNaN(num)) {\n            throw SyntaxError('Invalid param');\n          }\n\n          P['data'].push(num | 0);\n\n          if (a <= 0)\n            break;\n\n          a -= len;\n          b -= len;\n        } while (1);\n\n        break;\n\n      default:\n\n        P['data'] = [0];\n        var data = P['data'];\n\n        if (val instanceof Array) {\n\n          for (var i = val.length - 1; i >= 0; i--) {\n\n            var ndx = val[i];\n\n            if (ndx === Infinity) {\n              P['_'] = -1;\n            } else {\n              scale(P, ndx);\n              data[ndx >>> WORD_LOG] |= 1 << ndx;\n            }\n          }\n          break;\n        }\n\n        if (Uint8Array && val instanceof Uint8Array) {\n\n          var bits = 8;\n\n          scale(P, val.length * bits);\n\n          for (var i = 0; i < val.length; i++) {\n\n            var n = val[i];\n\n            for (var j = 0; j < bits; j++) {\n\n              var k = i * bits + j;\n\n              data[k >>> WORD_LOG] |= (n >> j & 1) << k;\n            }\n          }\n          break;\n        }\n        throw SyntaxError('Invalid param');\n    }\n  }\n\n  /**\n   * Module entry point\n   *\n   * @constructor\n   * @param {string|BitSet|number=} param\n   * @returns {BitSet}\n   */\n  function BitSet(param) {\n\n    if (!(this instanceof BitSet)) {\n      return new BitSet(param);\n    }\n    parse(this, param);\n    this['data'] = this['data'].slice();\n  }\n\n  function scale(dst, ndx) {\n\n    var l = ndx >>> WORD_LOG;\n    var d = dst['data'];\n    var v = dst['_'];\n\n    for (var i = d.length; l >= i; l--) {\n      d.push(v);\n    }\n  }\n\n  var P = {\n    'data': [], // Holds the actual bits in form of a 32bit integer array.\n    '_': 0 // Holds the MSB flag information to make indefinitely large bitsets inversion-proof\n  };\n\n  BitSet.prototype = {\n    'data': [],\n    '_': 0,\n    /**\n     * Set a single bit flag\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     *\n     * bs1.set(3, 1);\n     *\n     * @param {number} ndx The index of the bit to be set\n     * @param {number=} value Optional value that should be set on the index (0 or 1)\n     * @returns {BitSet} this\n     */\n    'set': function(ndx, value) {\n\n      ndx |= 0;\n\n      scale(this, ndx);\n\n      if (value === undefined || value) {\n        this['data'][ndx >>> WORD_LOG] |= (1 << ndx);\n      } else {\n        this['data'][ndx >>> WORD_LOG] &= ~(1 << ndx);\n      }\n      return this;\n    },\n    /**\n     * Get a single bit flag of a certain bit position\n     *\n     * Ex:\n     * bs1 = new BitSet();\n     * var isValid = bs1.get(12);\n     *\n     * @param {number} ndx the index to be fetched\n     * @returns {number|null} The binary flag\n     */\n    'get': function(ndx) {\n\n      ndx |= 0;\n\n      var d = this['data'];\n      var n = ndx >>> WORD_LOG;\n\n      if (n > d.length) {\n        return this['_'] & 1;\n      }\n      return (d[n] >>> ndx) & 1;\n    },\n    /**\n     * Creates the bitwise NOT of a set. The result is stored in-place.\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     *\n     * bs1.not();\n     *\n     * @returns {BitSet} this\n     */\n    'not': function() { // invert()\n\n      var t = this['clone']();\n      var d = t['data'];\n      for (var i = 0; i < d.length; i++) {\n        d[i] = ~d[i];\n      }\n\n      t['_'] = ~t['_'];\n\n      return t;\n    },\n    /**\n     * Creates the bitwise AND of two sets. The result is stored in-place.\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     * bs2 = new BitSet(10);\n     *\n     * bs1.and(bs2);\n     *\n     * @param {BitSet} value A bitset object\n     * @returns {BitSet} this\n     */\n    'and': function(value) {// intersection\n\n      parse(P, value);\n\n      var T = this['clone']();\n      var t = T['data'];\n      var p = P['data'];\n\n      var pl = p.length;\n      var p_ = P['_'];\n      var t_ = T['_'];\n\n      // If this is infinite, we need all bits from P\n      if (t_ !== 0) {\n        scale(T, pl * WORD_LENGTH - 1);\n      }\n\n      var tl = t.length;\n      var l = Math.min(pl, tl);\n      var i = 0;\n\n      for (; i < l; i++) {\n        t[i] &= p[i];\n      }\n\n      for (; i < tl; i++) {\n        t[i] &= p_;\n      }\n\n      T['_'] &= p_;\n\n      return T;\n    },\n    /**\n     * Creates the bitwise OR of two sets. The result is stored in-place.\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     * bs2 = new BitSet(10);\n     *\n     * bs1.or(bs2);\n     *\n     * @param {BitSet} val A bitset object\n     * @returns {BitSet} this\n     */\n    'or': function(val) { // union\n\n      parse(P, val);\n\n      var t = this['clone']();\n      var d = t['data'];\n      var p = P['data'];\n\n      var pl = p.length - 1;\n      var tl = d.length - 1;\n\n      var minLength = Math.min(tl, pl);\n\n      // Append backwards, extend array only once\n      for (var i = pl; i > minLength; i--) {\n        d[i] = p[i];\n      }\n\n      for (; i >= 0; i--) {\n        d[i] |= p[i];\n      }\n\n      t['_'] |= P['_'];\n\n      return t;\n    },\n    /**\n     * Creates the bitwise XOR of two sets. The result is stored in-place.\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     * bs2 = new BitSet(10);\n     *\n     * bs1.xor(bs2);\n     *\n     * @param {BitSet} val A bitset object\n     * @returns {BitSet} this\n     */\n    'xor': function(val) { // symmetric difference\n\n      parse(P, val);\n\n      var t = this['clone']();\n      var d = t['data'];\n      var p = P['data'];\n\n      var t_ = t['_'];\n      var p_ = P['_'];\n\n      var i = 0;\n\n      var tl = d.length - 1;\n      var pl = p.length - 1;\n\n      // Cut if tl > pl\n      for (i = tl; i > pl; i--) {\n        d[i] ^= p_;\n      }\n\n      // Cut if pl > tl\n      for (i = pl; i > tl; i--) {\n        d[i] = t_ ^ p[i];\n      }\n\n      // XOR the rest\n      for (; i >= 0; i--) {\n        d[i] ^= p[i];\n      }\n\n      // XOR infinity\n      t['_'] ^= p_;\n\n      return t;\n    },\n    /**\n     * Creates the bitwise AND NOT (not confuse with NAND!) of two sets. The result is stored in-place.\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     * bs2 = new BitSet(10);\n     *\n     * bs1.notAnd(bs2);\n     *\n     * @param {BitSet} val A bitset object\n     * @returns {BitSet} this\n     */\n    'andNot': function(val) { // difference\n\n      return this['and'](new BitSet(val)['flip']());\n    },\n    /**\n     * Flip/Invert a range of bits by setting\n     *\n     * Ex:\n     * bs1 = new BitSet();\n     * bs1.flip(); // Flip entire set\n     * bs1.flip(5); // Flip single bit\n     * bs1.flip(3,10); // Flip a bit range\n     *\n     * @param {number=} from The start index of the range to be flipped\n     * @param {number=} to The end index of the range to be flipped\n     * @returns {BitSet} this\n     */\n    'flip': function(from, to) {\n\n      if (from === undefined) {\n\n        var d = this['data'];\n        for (var i = 0; i < d.length; i++) {\n          d[i] = ~d[i];\n        }\n\n        this['_'] = ~this['_'];\n\n      } else if (to === undefined) {\n\n        scale(this, from);\n\n        this['data'][from >>> WORD_LOG] ^= (1 << from);\n\n      } else if (0 <= from && from <= to) {\n\n        scale(this, to);\n\n        for (var i = from; i <= to; i++) {\n          this['data'][i >>> WORD_LOG] ^= (1 << i);\n        }\n      }\n      return this;\n    },\n    /**\n     * Clear a range of bits by setting it to 0\n     *\n     * Ex:\n     * bs1 = new BitSet();\n     * bs1.clear(); // Clear entire set\n     * bs1.clear(5); // Clear single bit\n     * bs1.clar(3,10); // Clear a bit range\n     *\n     * @param {number=} from The start index of the range to be cleared\n     * @param {number=} to The end index of the range to be cleared\n     * @returns {BitSet} this\n     */\n    'clear': function(from, to) {\n\n      var data = this['data'];\n\n      if (from === undefined) {\n\n        for (var i = data.length - 1; i >= 0; i--) {\n          data[i] = 0;\n        }\n        this['_'] = 0;\n\n      } else if (to === undefined) {\n\n        from |= 0;\n\n        scale(this, from);\n\n        data[from >>> WORD_LOG] &= ~(1 << from);\n\n      } else if (from <= to) {\n\n        scale(this, to);\n\n        for (var i = from; i <= to; i++) {\n          data[i >>> WORD_LOG] &= ~(1 << i);\n        }\n      }\n      return this;\n    },\n    /**\n     * Gets an entire range as a new bitset object\n     *\n     * Ex:\n     * bs1 = new BitSet();\n     * bs1.slice(4, 8);\n     *\n     * @param {number=} from The start index of the range to be get\n     * @param {number=} to The end index of the range to be get\n     * @returns {BitSet|Object} A new smaller bitset object, containing the extracted range\n     */\n    'slice': function(from, to) {\n\n      if (from === undefined) {\n        return this['clone']();\n      } else if (to === undefined) {\n\n        to = this['data'].length * WORD_LENGTH;\n\n        var im = Object.create(BitSet.prototype);\n\n        im['_'] = this['_'];\n        im['data'] = [0];\n\n        for (var i = from; i <= to; i++) {\n          im['set'](i - from, this['get'](i));\n        }\n        return im;\n\n      } else if (from <= to && 0 <= from) {\n\n        var im = Object.create(BitSet.prototype);\n        im['data'] = [0];\n\n        for (var i = from; i <= to; i++) {\n          im['set'](i - from, this['get'](i));\n        }\n        return im;\n      }\n      return null;\n    },\n    /**\n     * Set a range of bits\n     *\n     * Ex:\n     * bs1 = new BitSet();\n     *\n     * bs1.setRange(10, 15, 1);\n     *\n     * @param {number} from The start index of the range to be set\n     * @param {number} to The end index of the range to be set\n     * @param {number} value Optional value that should be set on the index (0 or 1)\n     * @returns {BitSet} this\n     */\n    'setRange': function(from, to, value) {\n\n      for (var i = from; i <= to; i++) {\n        this['set'](i, value);\n      }\n      return this;\n    },\n    /**\n     * Clones the actual object\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     * bs2 = bs1.clone();\n     *\n     * @returns {BitSet|Object} A new BitSet object, containing a copy of the actual object\n     */\n    'clone': function() {\n\n      var im = Object.create(BitSet.prototype);\n      im['data'] = this['data'].slice();\n      im['_'] = this['_'];\n\n      return im;\n    },\n    /**\n     * Gets a list of set bits\n     *\n     * @returns {Array|number}\n     */\n    'toArray': Math['clz32'] ?\n            function() {\n\n              var ret = [];\n              var data = this['data'];\n\n              for (var i = data.length - 1; i >= 0; i--) {\n\n                var num = data[i];\n\n                while (num !== 0) {\n                  var t = 31 - Math['clz32'](num);\n                  num ^= 1 << t;\n                  ret.unshift((i * WORD_LENGTH) + t);\n                }\n              }\n\n              if (this['_'] !== 0)\n                ret.push(Infinity);\n\n              return ret;\n            } :\n            function() {\n\n              var ret = [];\n              var data = this['data'];\n\n              for (var i = 0; i < data.length; i++) {\n\n                var num = data[i];\n\n                while (num !== 0) {\n                  var t = num & -num;\n                  num ^= t;\n                  ret.push((i * WORD_LENGTH) + popCount(t - 1));\n                }\n              }\n\n              if (this['_'] !== 0)\n                ret.push(Infinity);\n\n              return ret;\n            },\n    /**\n     * Overrides the toString method to get a binary representation of the BitSet\n     *\n     * @param {number=} base\n     * @returns string A binary string\n     */\n    'toString': function(base) {\n\n      var data = this['data'];\n\n      if (!base)\n        base = 2;\n\n      // If base is power of two\n      if ((base & (base - 1)) === 0 && base < 36) {\n\n        var ret = '';\n        var len = 2 + Math.log(4294967295/*Math.pow(2, WORD_LENGTH)-1*/) / Math.log(base) | 0;\n\n        for (var i = data.length - 1; i >= 0; i--) {\n\n          var cur = data[i];\n\n          // Make the number unsigned\n          if (cur < 0)\n            cur += 4294967296 /*Math.pow(2, WORD_LENGTH)*/;\n\n          var tmp = cur.toString(base);\n\n          if (ret !== '') {\n            // Fill small positive numbers with leading zeros. The +1 for array creation is added outside already\n            ret += '0'.repeat(len - tmp.length - 1);\n          }\n          ret += tmp;\n        }\n\n        if (this['_'] === 0) {\n\n          ret = ret.replace(/^0+/, '');\n\n          if (ret === '')\n            ret = '0';\n          return ret;\n\n        } else {\n          // Pad the string with ones\n          ret = '1111' + ret;\n          return ret.replace(/^1+/, '...1111');\n        }\n\n      } else {\n\n        if ((2 > base || base > 36))\n          throw SyntaxError('Invalid base');\n\n        var ret = [];\n        var arr = [];\n\n        // Copy every single bit to a new array\n        for (var i = data.length; i--; ) {\n\n          for (var j = WORD_LENGTH; j--; ) {\n\n            arr.push(data[i] >>> j & 1);\n          }\n        }\n\n        do {\n          ret.unshift(divide(arr, base).toString(base));\n        } while (!arr.every(function(x) {\n          return x === 0;\n        }));\n\n        return ret.join('');\n      }\n    },\n    /**\n     * Check if the BitSet is empty, means all bits are unset\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     *\n     * bs1.isEmpty() ? 'yes' : 'no'\n     *\n     * @returns {boolean} Whether the bitset is empty\n     */\n    'isEmpty': function() {\n\n      if (this['_'] !== 0)\n        return false;\n\n      var d = this['data'];\n\n      for (var i = d.length - 1; i >= 0; i--) {\n        if (d[i] !== 0)\n          return false;\n      }\n      return true;\n    },\n    /**\n     * Calculates the number of bits set\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     *\n     * var num = bs1.cardinality();\n     *\n     * @returns {number} The number of bits set\n     */\n    'cardinality': function() {\n\n      if (this['_'] !== 0) {\n        return Infinity;\n      }\n\n      var s = 0;\n      var d = this['data'];\n      for (var i = 0; i < d.length; i++) {\n        var n = d[i];\n        if (n !== 0)\n          s += popCount(n);\n      }\n      return s;\n    },\n    /**\n     * Calculates the Most Significant Bit / log base two\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     *\n     * var logbase2 = bs1.msb();\n     *\n     * var truncatedTwo = Math.pow(2, logbase2); // May overflow!\n     *\n     * @returns {number} The index of the highest bit set\n     */\n    'msb': Math['clz32'] ?\n            function() {\n\n              if (this['_'] !== 0) {\n                return Infinity;\n              }\n\n              var data = this['data'];\n\n              for (var i = data.length; i-- > 0; ) {\n\n                var c = Math['clz32'](data[i]);\n\n                if (c !== WORD_LENGTH) {\n                  return (i * WORD_LENGTH) + WORD_LENGTH - 1 - c;\n                }\n              }\n              return Infinity;\n            } :\n            function() {\n\n              if (this['_'] !== 0) {\n                return Infinity;\n              }\n\n              var data = this['data'];\n\n              for (var i = data.length; i-- > 0; ) {\n\n                var v = data[i];\n                var c = 0;\n\n                if (v) {\n\n                  for (; (v >>>= 1) > 0; c++) {\n                  }\n                  return (i * WORD_LENGTH) + c;\n                }\n              }\n              return Infinity;\n            },\n    /**\n     * Calculates the number of trailing zeros\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     *\n     * var ntz = bs1.ntz();\n     *\n     * @returns {number} The index of the lowest bit set\n     */\n    'ntz': function() {\n\n      var data = this['data'];\n\n      for (var j = 0; j < data.length; j++) {\n        var v = data[j];\n\n        if (v !== 0) {\n\n          v = (v ^ (v - 1)) >>> 1; // Set v's trailing 0s to 1s and zero rest\n\n          return (j * WORD_LENGTH) + popCount(v);\n        }\n      }\n      return Infinity;\n    },\n    /**\n     * Calculates the Least Significant Bit\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     *\n     * var lsb = bs1.lsb();\n     *\n     * @returns {number} The index of the lowest bit set\n     */\n    'lsb': function() {\n\n      var data = this['data'];\n\n      for (var i = 0; i < data.length; i++) {\n\n        var v = data[i];\n        var c = 0;\n\n        if (v) {\n\n          var bit = (v & -v);\n\n          for (; (bit >>>= 1); c++) {\n\n          }\n          return WORD_LENGTH * i + c;\n        }\n      }\n      return this['_'] & 1;\n    },\n    /**\n     * Compares two BitSet objects\n     *\n     * Ex:\n     * bs1 = new BitSet(10);\n     * bs2 = new BitSet(10);\n     *\n     * bs1.equals(bs2) ? 'yes' : 'no'\n     *\n     * @param {BitSet} val A bitset object\n     * @returns {boolean} Whether the two BitSets are similar\n     */\n    'equals': function(val) {\n\n      parse(P, val);\n\n      var t = this['data'];\n      var p = P['data'];\n\n      var t_ = this['_'];\n      var p_ = P['_'];\n\n      var tl = t.length - 1;\n      var pl = p.length - 1;\n\n      if (p_ !== t_) {\n        return false;\n      }\n\n      var minLength = tl < pl ? tl : pl;\n      var i = 0;\n\n      for (; i <= minLength; i++) {\n        if (t[i] !== p[i])\n          return false;\n      }\n\n      for (i = tl; i > pl; i--) {\n        if (t[i] !== p_)\n          return false;\n      }\n\n      for (i = pl; i > tl; i--) {\n        if (p[i] !== t_)\n          return false;\n      }\n      return true;\n    }\n  };\n\n  BitSet['fromBinaryString'] = function(str) {\n\n    return new BitSet('0b' + str);\n  };\n\n  BitSet['fromHexString'] = function(str) {\n\n    return new BitSet('0x' + str);\n  };\n\n  BitSet['Random'] = function(n) {\n\n    if (n === undefined || n < 0) {\n      n = WORD_LENGTH;\n    }\n\n    var m = n % WORD_LENGTH;\n\n    // Create an array, large enough to hold the random bits\n    var t = [];\n    var len = Math.ceil(n / WORD_LENGTH);\n\n    // Create an bitset instance\n    var s = Object.create(BitSet.prototype);\n\n    // Fill the vector with random data, uniformally distributed\n    for (var i = 0; i < len; i++) {\n      t.push(Math.random() * 4294967296 | 0);\n    }\n\n    // Mask out unwanted bits\n    if (m > 0) {\n      t[len - 1] &= (1 << m) - 1;\n    }\n\n    s['data'] = t;\n    s['_'] = 0;\n    return s;\n  };\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return BitSet;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(exports, \"__esModule\", {'value': true});\n    BitSet['default'] = BitSet;\n    BitSet['BitSet'] = BitSet;\n    module['exports'] = BitSet;\n  } else {\n    root['BitSet'] = BitSet;\n  }\n\n})(this);\n","import { BaseForLines, IGameCode } from './BaseForLines'\nimport { IGameNode } from './game'\n\nclass RGB {\n    public readonly r: number\n    public readonly g: number\n    public readonly b: number\n\n    constructor(r: number, g: number, b: number) {\n        this.r = r\n        this.g = g\n        this.b = b\n    }\n}\n\nexport interface IColor extends IGameNode {\n    isTransparent: () => boolean\n    toRgb: () => RGB\n    toHex: () => string\n}\n\nexport class HexColor extends BaseForLines implements IColor {\n    private hex: string\n\n    constructor(source: IGameCode, hex: string) {\n        super(source)\n        this.hex = hex\n    }\n\n    public isTransparent() { return false }\n    public toRgb() {\n        return hexToRgb(this.hex)\n    }\n    public toHex() {\n        return this.hex\n    }\n}\n\nexport class TransparentColor extends BaseForLines implements IColor {\n    constructor(source: IGameCode) {\n        super(source)\n    }\n\n    public isTransparent() { return true }\n    public toRgb(): RGB {\n        throw new Error('BUG: Transparent colors do not have RGB data')\n    }\n    public toHex(): string {\n        throw new Error('BUG: Transparent colors do not have a hex color value')\n    }\n}\n\nfunction hexToRgb(hex: string) {\n    // https://stackoverflow.com/a/5624139\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n        return r + r + g + g + b + b\n    })\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    if (result) {\n        return new RGB(\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16)\n        )\n    } else {\n        throw new Error('BUG: hex color was invalid')\n    }\n}\n","import * as nearley from 'nearley'\nimport { lookupColorPalette } from '../colors'\nimport { Optional } from '../index-browser'\nimport { IGameCode } from '../models/BaseForLines'\nimport { CollisionLayer } from '../models/collisionLayer'\nimport { HexColor, TransparentColor } from '../models/colors'\nimport { AgainCommand, CancelCommand, CheckpointCommand, MessageCommand, RestartCommand, SoundCommand, WinCommand } from '../models/command'\nimport { GameData } from '../models/game'\nimport { LevelMap, MessageLevel } from '../models/level'\nimport { Dimension, GameMetadata } from '../models/metadata'\nimport { GameSound, GameSoundMoveDirection, GameSoundMoveSimple, GameSoundNormal, GameSoundSimpleEnum } from '../models/sound'\nimport { GameLegendTileAnd, GameLegendTileOr, GameLegendTileSimple, GameSprite, GameSpritePixels, GameSpriteSingleColor, IGameTile } from '../models/tile'\nimport { WinConditionOn, WinConditionSimple } from '../models/winCondition'\nimport { AbstractRuleish, AST_RULE_MODIFIER, ASTRule, ASTRuleBracket, ASTRuleBracketEllipsis, ASTRuleBracketNeighbor, ASTRuleGroup, ASTRuleLoop, ASTTileWithModifier } from './astRule'\nimport * as ast from './astTypes'\nimport * as compiledGrammar from './grammar'\n\nfunction removeNulls<T>(ary: Array<T | null>) {\n    // return ary.filter(a => !!a)\n\n    // TypeScript-friendly version\n    const ret = []\n    for (const item of ary) {\n        if (item) {\n            ret.push(item)\n        }\n    }\n    return ret\n}\n\nexport class ValidationMessage {\n    public readonly source: IGameCode\n    public readonly level: ValidationLevel\n    public readonly message: string\n    constructor(source: IGameCode, level: ValidationLevel, message: string) {\n        this.source = source\n        this.level = level\n        this.message = message\n    }\n\n    public toKey() {\n        return `[${this.source.toString()}] [${this.level}] [${this.message}]`\n    }\n}\n\nexport type AddValidationFunc = (message: ValidationMessage) => void\n\nexport enum ValidationLevel {\n    ERROR,\n    WARNING,\n    INFO\n}\n\nclass AstBuilder {\n    private validationMessages: Map<string, ValidationMessage>\n    private readonly code: string\n    private readonly tileCache: Map<string, IGameTile>\n    private readonly soundCache: Map<string, GameSound>\n    constructor(code: string) {\n        this.code = code\n        this.tileCache = new Map()\n        this.soundCache = new Map()\n        this.validationMessages = new Map()\n    }\n    public build(root: ast.IASTGame<string>) {\n        this.validationMessages.clear() // clear because we are parsing\n        const source = this.toSource({ type: 'GAME', sourceOffset: 0 })\n\n        const metadata = new GameMetadata()\n        root.metadata.forEach((pair) => {\n            let value\n            if (typeof pair.value === 'object' && pair.value.type) {\n                switch (pair.value.type) {\n                    case 'COLOR_HEX3':\n                    case 'COLOR_HEX6':\n                    case 'COLOR_NAME':\n                        {\n                            const v = pair.value\n                            value = this.buildColor(v as ast.ColorName, metadata.colorPalette)\n                        }\n                        break\n                    case 'WIDTH_AND_HEIGHT':\n                        {\n                            const v = pair.value\n                            const v2 = v\n                            value = new Dimension(v2.width, v2.height)\n                        }\n                        break\n                    default:\n                        throw new Error(`BUG: Invalid type at this point in time: ${pair.value}`)\n                }\n            } else {\n                value = pair.value\n            }\n            metadata._setValue(pair.type, value)\n        })\n\n        const sprites = root.sprites.map((n) => this.buildSprite(n, metadata.colorPalette))\n        // Load the legend items up (used in Rules and Levels later on)\n        const legendItems = root.legendItems.map((n) => this.buildLegendItem(n))\n        const sounds = root.sounds.map((n) => this.buildSound(n))\n\n        const collisionLayers = root.collisionLayers.map((n) => this.buildCollisionLayer(n))\n        const rules = root.rules.map((n) => this.buildRuleCollection(n))\n        const winConditions = root.winConditions.map((n) => this.buildWinConditon(n))\n        const levels = root.levels.map((n) => this.buildLevel(n))\n        const gameData = new GameData(source, root.title, metadata, sprites, legendItems, sounds, collisionLayers, rules, winConditions, levels)\n        const validationMessages = this.getValidationMessages()\n        return { gameData, validationMessages }\n    }\n\n    public buildSprite(node: ast.AbstractSprite, colorPalette: Optional<string>) {\n        let ret: GameSprite\n        if (node.pixels) {\n            ret = new GameSpritePixels(this.toSource(node), node.name, node.mapChar, node.colors.map((n) => this.buildColor(n, colorPalette)), node.pixels)\n        } else {\n            ret = new GameSpriteSingleColor(this.toSource(node), node.name, node.mapChar, node.colors.map((n) => this.buildColor(n, colorPalette)))\n        }\n        this.cacheAdd(node.name, ret)\n        if (node.mapChar) {\n            this.cacheAdd(node.mapChar, ret)\n        }\n        return ret\n    }\n\n    public buildColor(node: ast.IColor, colorPalette: Optional<string>) {\n        const source = this.toSource(node)\n        const currentColorPalette = colorPalette || 'arnecolors'\n        switch (node.type) {\n            case 'COLOR_HEX6':\n            case 'COLOR_HEX3':\n                return new HexColor(source, node.value)\n            case 'COLOR_NAME':\n                if (node.value.toUpperCase() === 'TRANSPARENT') {\n                    return new TransparentColor(source)\n                } else {\n                    // Look up the color\n                    const hex = lookupColorPalette(currentColorPalette, node.value)\n                    if (hex) {\n                        return new HexColor(source, hex)\n                    } else {\n                        this.addValidationMessage(source, ValidationLevel.WARNING, `ERROR: Invalid color name ${node.value}`)\n                        return new TransparentColor(source)\n                    }\n                }\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    public buildLegendItem(node: ast.AbstractLegendItem<string>) {\n        const source = this.toSource(node)\n        switch (node.type) {\n            case 'LEGEND_ITEM_SIMPLE':\n                if (!node.value) { throw new Error(`BUG!!!!!!`) }\n                {\n                    const ret = new GameLegendTileSimple(source, node.name, this.cacheGet(node.value) as GameSprite)\n                    this.cacheAdd(node.name, ret)\n                    return ret\n                }\n            case 'LEGEND_ITEM_AND':\n                if (!node.values) { throw new Error(`BUG!!!!!!`) }\n                {\n                    const ret = new GameLegendTileAnd(source, node.name, node.values.map((n) => this.cacheGet(n)))\n                    this.cacheAdd(node.name, ret)\n                    return ret\n                }\n            case 'LEGEND_ITEM_OR':\n                if (!node.values) { throw new Error(`BUG!!!!!!`) }\n                {\n                    const ret = new GameLegendTileOr(source, node.name, node.values.map((n) => this.cacheGet(n)))\n                    this.cacheAdd(node.name, ret)\n                    return ret\n                }\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    public buildCollisionLayer(node: ast.CollisionLayer<string>) {\n        const source = this.toSource(node)\n        const addValidation = (msg: ValidationMessage) => {\n            this.addValidationMessage(msg.source, msg.level, msg.message)\n        }\n        return new CollisionLayer(source, node.tiles.map((n) => this.cacheGet(n)), addValidation)\n    }\n\n    public buildSound(node: ast.AbstractSound<string>) {\n        const source = this.toSource(node)\n\n        switch (node.type) {\n            case 'SOUND_SFX':\n                {\n                    const n = node as ast.SoundSfx<string>\n                    const ret = new GameSound(source, node.soundCode)\n                    this.soundCacheAdd(n.sfx, ret)\n                    return ret\n                }\n            case 'SOUND_WHEN':\n                {\n                    const n = node as ast.SoundWhen<string>\n                    return new GameSoundSimpleEnum(source, n.when, node.soundCode)\n                }\n            case 'SOUND_SPRITE_MOVE':\n                {\n                    const n = node as ast.SoundSpriteMove<string>\n                    return new GameSoundMoveSimple(source, this.cacheGet(n.sprite), node.soundCode)\n                }\n            case 'SOUND_SPRITE_DIRECTION':\n                {\n                    const n = node as ast.SoundSpriteMoveDirection<string>\n                    return new GameSoundMoveDirection(source, this.cacheGet(n.sprite), n.spriteDirection, node.soundCode)\n                }\n            case 'SOUND_SPRITE_EVENT':\n                {\n                    const n = node as ast.SoundSpriteEvent<string>\n                    return new GameSoundNormal(source, this.cacheGet(n.sprite), n.spriteEvent, node.soundCode)\n                }\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    public buildRuleCollection(node: ast.AbstractRule<string>): AbstractRuleish {\n        const source = this.toSource(node)\n        switch (node.type) {\n            case 'RULE_LOOP':\n                if (!node.rules) { throw new Error(`BUG!!!!!!`) }\n                return new ASTRuleLoop(source, node.rules.map((n) => this.buildRuleCollection(n)), node.debugFlag)\n            case 'RULE_GROUP':\n                if (!node.rules) { throw new Error(`BUG!!!!!!`) }\n                // Extra checks to make TypeScript happy\n                if (node.rules[0]) {\n                    const firstRule = node.rules[0] as ast.Rule<string>\n                    const isRandom = firstRule.modifiers.indexOf(AST_RULE_MODIFIER.RANDOM) >= 0\n                    return new ASTRuleGroup(source, isRandom, node.rules.map((n) => this.buildRuleCollection(n)), node.debugFlag)\n                }\n                throw new Error(`BUG!!!!!!`)\n            case 'RULE':\n                const node2 = node as ast.Rule<string>\n                const commands = [...node2.commands]\n                // TODO: Maybe do this step in the parser. No need for message to be a separate field\n                if (node2.message) {\n                    commands.push(node2.message)\n                }\n\n                return new ASTRule(source, node2.modifiers,\n                    node2.conditions.map((n) => this.buildBracket(n)),\n                    node2.actions.map((n) => this.buildBracket(n)),\n                    removeNulls(commands.map((n) => this.buildCommand(n))), node.debugFlag)\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    public buildBracket(node: ast.AbstractBracket<string>) {\n        const source = this.toSource(node)\n        switch (node.type) {\n            case 'BRACKET':\n                {\n                    const node2 = node as ast.SimpleBracket<string>\n                    return new ASTRuleBracket(source, node2.neighbors.map((n) => this.buildNeighbor(n)), null, node.debugFlag)\n                }\n            case 'ELLIPSIS_BRACKET':\n                {\n                    const node2 = node as ast.EllipsisBracket<string>\n                    return new ASTRuleBracketEllipsis(source, node2.beforeNeighbors.map((n) => this.buildNeighbor(n)), node2.afterNeighbors.map((n) => this.buildNeighbor(n)), node.debugFlag)\n                }\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    public buildNeighbor(node: ast.Neighbor<string>) {\n        const source = this.toSource(node)\n        return new ASTRuleBracketNeighbor(source, removeNulls(node.tilesWithModifier.map((n) => this.buildTileWithModifier(n))), node.debugFlag)\n    }\n\n    public buildTileWithModifier(node: ast.TileWithModifier<string>) {\n        const source = this.toSource(node)\n        if (!this.cacheHas(node.tile)) {\n            this.addValidationMessage(source, ValidationLevel.ERROR, `Could not find tile named ${node.tile}`)\n            return null\n        }\n        return new ASTTileWithModifier(source, node.modifier, this.cacheGet(node.tile), node.debugFlag)\n    }\n\n    public buildCommand(node: ast.AbstractCommand) {\n        const source = this.toSource(node)\n        switch (node.type) {\n            case 'COMMAND_MESSAGE':\n                {\n                    const n = node as ast.MessageCommand\n                    return new MessageCommand(source, n.message)\n                }\n            case 'COMMAND_SFX':\n                {\n                    const n = node as ast.SFXCommand\n                    if (!this.soundCacheHas(n.sfx)) {\n                        this.addValidationMessage(source, ValidationLevel.ERROR, `Could not find sound named ${n.sfx}`)\n                        return null\n                    }\n                    return new SoundCommand(source, this.soundCacheGet(n.sfx))\n                }\n            case 'COMMAND_CANCEL':\n                return new CancelCommand(source)\n            case 'COMMAND_AGAIN':\n                return new AgainCommand(source)\n            case 'COMMAND_WIN':\n                return new WinCommand(source)\n            case 'COMMAND_RESTART':\n                return new RestartCommand(source)\n            case 'COMMAND_CHECKPOINT':\n                return new CheckpointCommand(source)\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    public buildWinConditon(node: ast.AbstractWinCondition<string>) {\n        const source = this.toSource(node)\n        switch (node.type) {\n            case 'WINCONDITION_ON':\n                {\n                    const n = node as ast.WinConditionOn<string>\n                    return new WinConditionOn(source, n.qualifier, this.cacheGet(n.sprite), this.cacheGet(n.onSprite))\n                }\n            case 'WINCONDITION_SIMPLE':\n                {\n                    const n = node as ast.WinConditionSimple<string>\n                    return new WinConditionSimple(source, n.qualifier, this.cacheGet(n.sprite))\n                }\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    public buildLevel(node: ast.AbstractLevel<string>) {\n        const source = this.toSource(node)\n        switch (node.type) {\n            case 'LEVEL_MESSAGE':\n                {\n                    const n = node as ast.LevelMessage<string>\n                    return new MessageLevel(source, n.message)\n                }\n            case 'LEVEL_MAP':\n                {\n                    const n = node as ast.LevelMap<string>\n                    return new LevelMap(source, n.rowData.map((row) => row.map((cell) => this.cacheGet(cell))))\n                }\n            default:\n                throw new Error(`Unsupported type ${node.type}`)\n        }\n    }\n\n    private toSource(node: ast.IASTNode) {\n        return {\n            code: this.code,\n            sourceOffset: node.sourceOffset\n        }\n    }\n\n    private addValidationMessage(source: IGameCode, level: ValidationLevel, message: string) {\n        const msg = new ValidationMessage(source, level, message)\n        if (!this.validationMessages.has(msg.toKey())) {\n            this.validationMessages.set(msg.toKey(), msg)\n        }\n    }\n\n    private getValidationMessages() {\n        return [...this.validationMessages.values()]\n    }\n\n    private cacheAdd(name: string, value: IGameTile) {\n        if (this.tileCache.has(name.toLowerCase())) {\n            throw new Error(`BUG??? duplicate definition of ${name}`)\n        }\n        this.tileCache.set(name.toLowerCase(), value)\n    }\n\n    private cacheGet(name: string) {\n        const value = this.tileCache.get(name.toLowerCase())\n        if (value) {\n            return value\n        } else {\n            throw new Error(`BUG: Could not find tile named ${name}`)\n        }\n    }\n\n    private cacheHas(name: string) {\n        return this.tileCache.has(name.toLowerCase())\n    }\n\n    private soundCacheAdd(name: string, value: GameSound) {\n        if (this.soundCache.has(name.toLowerCase())) {\n            throw new Error(`BUG??? duplicate definition of ${name}`)\n        }\n        this.soundCache.set(name.toLowerCase(), value)\n    }\n\n    private soundCacheGet(name: string) {\n        const value = this.soundCache.get(name.toLowerCase())\n        if (value) {\n            return value\n        } else {\n            throw new Error(`BUG: Could not find sound named ${name}`)\n        }\n    }\n\n    private soundCacheHas(name: string) {\n        return this.soundCache.has(name.toLowerCase())\n    }\n}\n\nclass Parser {\n    private grammar: nearley.Grammar\n    constructor() {\n        this.grammar = nearley.Grammar.fromCompiled(compiledGrammar)\n    }\n    public parseToAST(code: string) {\n        const parser = new nearley.Parser(this.grammar)\n        parser.feed(code)\n        parser.feed('\\n')\n        parser.finish()\n        const results = parser.results as Array<ast.IASTGame<string>>\n        if (results.length === 1) {\n            return results[0]\n        } else if (results.length === 0) {\n            throw new Error(`ERROR: Could not parse`)\n        } else {\n            throw new Error(`AMBIGUOUS: has ${results.length} results`)\n        }\n\n    }\n    public parse(code: string) {\n        const node = this.parseToAST(code)\n\n        const builder = new AstBuilder(code)\n        const { gameData, validationMessages } = builder.build(node)\n\n        return { data: gameData, validationMessages }\n    }\n}\n\nexport default new Parser()\n","import { Optional } from '../util'\nimport { BaseForLines, IGameCode } from './BaseForLines'\nimport { GameSound } from './sound'\n\nexport enum COMMAND_TYPE {\n    SFX = 'SFX',\n    CANCEL = 'CANCEL',\n    CHECKPOINT = 'CHECKPOINT',\n    RESTART = 'RESTART',\n    MESSAGE = 'MESSAGE',\n    WIN = 'WIN',\n    AGAIN = 'AGAIN' // This acts more as a RULE_MODIFIER but is included here for parsing and then is moved into the modifier section\n}\n\nexport abstract class AbstractCommand extends BaseForLines {\n    public abstract getType(): COMMAND_TYPE\n    public getSound(): GameSound {\n        throw new Error(`BUG: Check getType() first`)\n    }\n    public getMessage(): string {\n        throw new Error(`BUG: Check getType() first`)\n    }\n    public abstract toKey(): string\n}\n\nexport class MessageCommand extends AbstractCommand {\n    private readonly message: string\n\n    constructor(source: IGameCode, message: string) {\n        super(source)\n        this.message = message\n    }\n\n    public getType() { return COMMAND_TYPE.MESSAGE }\n    public getMessage() { return this.message }\n\n    // These are used by message levels. Maybe we should split this into 2 classes\n    public isInvalid(): Optional<string> {\n        return null\n    }\n    public isMap() {\n        return false\n    }\n    public toKey() { return `[MESSAGE:\"${this.message}\"]` }\n}\n\nexport class SoundCommand extends AbstractCommand {\n    private readonly sound: GameSound\n    constructor(source: IGameCode, sound: GameSound) {\n        super(source)\n        this.sound = sound\n        if (!sound) {\n            throw new Error(`ERROR: Sound not found\\n${this.toString()}`)\n        }\n    }\n\n    public getType() { return COMMAND_TYPE.SFX }\n    public getSound() {\n        return this.sound\n    }\n    public toKey() { return `[SOUND:${this.sound.soundCode}]` }\n}\n\nexport class CancelCommand extends AbstractCommand {\n    constructor(source: IGameCode) {\n        super(source)\n    }\n    public getType() { return COMMAND_TYPE.CANCEL }\n    public toKey() { return `[CANCEL]` }\n}\n\nexport class CheckpointCommand extends AbstractCommand {\n    constructor(source: IGameCode) {\n        super(source)\n    }\n    public getType() { return COMMAND_TYPE.CHECKPOINT }\n    public toKey() { return `[CHECKPOINT]` }\n}\n\nexport class RestartCommand extends AbstractCommand {\n    constructor(source: IGameCode) {\n        super(source)\n    }\n    public getType() { return COMMAND_TYPE.RESTART }\n    public toKey() { return `[RESTART]` }\n}\n\nexport class WinCommand extends AbstractCommand {\n    constructor(source: IGameCode) {\n        super(source)\n    }\n    public getType() { return COMMAND_TYPE.WIN }\n    public toKey() { return `[WIN]` }\n}\n\nexport class AgainCommand extends AbstractCommand {\n    constructor(source: IGameCode) {\n        super(source)\n    }\n    public getType() { return COMMAND_TYPE.AGAIN }\n    public toKey() { return `[AGAIN]` }\n}\n","import BitSet from 'bitset'\nimport { GameData } from './models/game'\nimport { GameSprite } from './models/tile'\n// BitSet does not export a default so import does not work in webpack-built file\nconst BitSet2 = require('bitset') // tslint:disable-line:no-var-requires\n\nabstract class CustomBitSet<T> {\n    protected readonly bitSet: BitSet\n    constructor(items?: Iterable<T>, bitSet?: BitSet) {\n        if (bitSet) {\n            this.bitSet = bitSet\n        } else {\n            this.bitSet = new BitSet2()\n        }\n\n        if (items) {\n            this.addAll(items)\n        }\n    }\n\n    // Unused\n    // public clear() {\n    //     this.bitSet.clear()\n    // }\n\n    public isEmpty() {\n        return this.bitSet.isEmpty()\n    }\n\n    public addAll(items: Iterable<T>) {\n        for (const sprite of items) {\n            this.add(sprite)\n        }\n    }\n\n    // Unused\n    // public removeAll(items: Iterable<T>) {\n    //     for (const sprite of items) {\n    //         this.remove(sprite)\n    //     }\n    // }\n\n    public add(item: T) {\n        this.bitSet.set(this._indexOf(item))\n    }\n\n    public remove(item: T) {\n        this.bitSet.clear(this._indexOf(item))\n    }\n\n    public has(item: T) {\n        return !!this.bitSet.get(this._indexOf(item))\n    }\n\n    public containsAll(other: CustomBitSet<T>) {\n        return other.bitSet.cardinality() === this.bitSet.and(other.bitSet).cardinality()\n    }\n\n    public containsAny(other: CustomBitSet<T>) {\n        return !this.bitSet.and(other.bitSet).isEmpty()\n    }\n\n    public containsNone(other: CustomBitSet<T>) {\n        return other.bitSet.and(this.bitSet).isEmpty()\n    }\n\n    protected abstract indexOf(item: T): number\n\n    private _indexOf(item: T) {\n        const index = this.indexOf(item)\n        if (index < 0) {\n            throw new Error(`BUG: Expected the item index to be >= 0 but it was ${index}`)\n        }\n        return index\n    }\n}\n\nexport class SpriteBitSet extends CustomBitSet<GameSprite> {\n\n    public indexOf(item: GameSprite) {\n        return item.allSpritesBitSetIndex\n    }\n\n    public toString(gameData: GameData) {\n        const str = []\n        for (const sprite of this.getSprites(gameData)) {\n            str.push(sprite.getName())\n        }\n        return str.join(' ')\n    }\n\n    public union(bitSets: Iterable<SpriteBitSet>) {\n        let ret: SpriteBitSet = this // tslint:disable-line:no-this-assignment\n        for (const bitSet of bitSets) {\n            ret = ret.or(bitSet)\n        }\n        return ret\n    }\n\n    private getSprites(gameData: GameData) {\n        const sprites = new Set<GameSprite>()\n        for (const sprite of gameData.objects) {\n            if (this.has(sprite)) {\n                sprites.add(sprite)\n            }\n        }\n        return sprites\n    }\n\n    private or(bitSet: SpriteBitSet) {\n        return new SpriteBitSet(undefined, this.bitSet.or(bitSet.bitSet))\n    }\n\n}\n","import { getLetterSprites } from '../letters'\nimport { AbstractRuleish } from '../parser/astRule'\nimport { Optional } from '../util'\nimport { IGameCode } from './BaseForLines'\nimport { CollisionLayer } from './collisionLayer'\nimport { ILevel } from './level'\nimport { GameMetadata } from './metadata'\nimport { IRule } from './rule'\nimport { GameSound } from './sound'\nimport { GameLegendTileSimple, GameSprite, IGameTile } from './tile'\nimport { WinConditionSimple } from './winCondition'\n\nexport interface IGameNode {\n    __source: {code: string, sourceOffset: number}\n    __coverageCount: Optional<number>\n    __getSourceLineAndColumn(): { lineNum: number, colNum: number }\n    __getLineAndColumnRange(): { start: { line: number, col: number }, end: { line: number, col: number } }\n    toString(): string\n    toSourceString(): string\n}\n\nexport class GameData {\n    public readonly title: string\n    public readonly metadata: GameMetadata\n    public readonly objects: GameSprite[]\n    public readonly legends: GameLegendTileSimple[]\n    public readonly sounds: GameSound[]\n    public readonly collisionLayers: CollisionLayer[]\n    public readonly rules: IRule[]\n    public readonly winConditions: WinConditionSimple[]\n    public readonly levels: ILevel[]\n    private readonly cacheSpriteSize: {spriteHeight: number, spriteWidth: number}\n    private cachedBackgroundSprite: Optional<GameSprite>\n    private readonly letterSprites: Map<string, GameSprite>\n\n    constructor(\n        source: IGameCode,\n        title: string,\n        metadata: GameMetadata,\n        objects: GameSprite[],\n        legends: GameLegendTileSimple[],\n        sounds: GameSound[],\n        collisionLayers: CollisionLayer[],\n        rules: AbstractRuleish[],\n        winConditions: WinConditionSimple[],\n        levels: ILevel[]\n    ) {\n        this.title = title\n        this.metadata = metadata\n        this.objects = objects\n        this.legends = legends\n        this.sounds = sounds\n        this.collisionLayers = collisionLayers\n        this.winConditions = winConditions\n        this.levels = levels\n\n        // assign an index to each GameSprite\n        this.objects.forEach((sprite, index) => {\n            sprite.allSpritesBitSetIndex = index\n        })\n        let spriteIndexCounter = this.objects.length // 1 more than all the game sprites\n\n        const ruleCache = new Map()\n        const bracketCache = new Map()\n        const neighborCache = new Map()\n        const tileCache = new Map()\n        this.rules = rules.map((rule) => rule.simplify(ruleCache, bracketCache, neighborCache, tileCache))\n\n        const firstSpriteWithPixels = this.objects.filter((sprite) => sprite.hasPixels())[0]\n        if (firstSpriteWithPixels) {\n            const firstSpritePixels = firstSpriteWithPixels.getPixels(1, 1) // We don't care about these args\n            this.cacheSpriteSize = {\n                spriteHeight: firstSpritePixels.length,\n                spriteWidth: firstSpritePixels[0].length\n            }\n        } else {\n            // All the sprites are just a single color, so set the size to be 5x5\n            this.cacheSpriteSize = {\n                spriteHeight: 1,\n                spriteWidth: 1\n            }\n        }\n\n        // Create a collisionlayer for the letter sprites\n        this.letterSprites = getLetterSprites(source)\n        for (const letterSprite of this.letterSprites.values()) {\n            letterSprite.allSpritesBitSetIndex = spriteIndexCounter++\n        }\n        const letterCollisionLayer = new CollisionLayer(source, [...this.letterSprites.values()], () => {\n            throw new Error(`BUG: Letter collision layers should not have a problem`)\n        })\n        this.collisionLayers.push(letterCollisionLayer)\n    }\n\n    public _getSpriteByName(name: string) {\n        return this.objects.find((sprite) => sprite.getName().toLowerCase() === name.toLowerCase())\n    }\n    public _getTileByName(name: string) {\n        return this.legends.find((tile) => tile.getName().toLowerCase() === name.toLowerCase())\n    }\n\n    public getMagicBackgroundSprite() {\n        if (this.cachedBackgroundSprite) {\n            return this.cachedBackgroundSprite\n        } else {\n            const background: Optional<GameSprite> = this._getSpriteByName('background')\n            if (!background) {\n                const legendBackground = this.legends.find((tile) => tile.spriteNameOrLevelChar.toLocaleLowerCase() === 'background')\n                if (legendBackground) {\n                    if (legendBackground.isOr()) {\n                        return null\n                    } else {\n                        return legendBackground.getSprites()[0]\n                    }\n                }\n            }\n            if (!background) {\n                throw new Error(`ERROR: Game does not have a Background Sprite or Tile`)\n            }\n            this.cachedBackgroundSprite = background\n            return background\n        }\n    }\n    public getPlayer(): IGameTile {\n        const player = this._getSpriteByName('player') || this.legends.find((tile) => tile.spriteNameOrLevelChar.toLocaleLowerCase() === 'player')\n        if (!player) {\n            throw new Error(`BUG: Could not find the Player sprite or tile in the game`)\n        }\n        return player\n    }\n\n    public clearCaches() {\n        for (const rule of this.rules) {\n            rule.clearCaches()\n        }\n        for (const sprite of this.objects) {\n            sprite.clearCaches()\n        }\n    }\n\n    public getSpriteSize() {\n        return this.cacheSpriteSize\n    }\n\n    public getLetterSprite(char: string) {\n        const sprite = this.letterSprites.get(char)\n        if (!sprite) {\n            throw new Error(`BUG: Cannot find sprite for letter \"${char}\"`)\n        }\n        return sprite\n    }\n}\n","import BitSet from 'bitset'\nimport { Cell } from '../engine'\nimport { _flatten, Optional, RULE_DIRECTION, setDifference, setIntersection } from '../util'\nimport { BaseForLines, IGameCode } from './BaseForLines'\nimport { CollisionLayer } from './collisionLayer'\nimport { IColor, TransparentColor } from './colors'\nimport { IGameNode } from './game'\nimport { SimpleTileWithModifier } from './rule'\n// BitSet does not export a default so import does not work in webpack-built file\nconst BitSet2 = require('bitset') // tslint:disable-line:no-var-requires\n\nexport interface IGameTile extends IGameNode {\n    subscribeToCellChanges: (t: SimpleTileWithModifier) => void\n    hasNegationTileWithModifier: () => boolean\n    addCells: (sprite: GameSprite, cells: Cell[], wantsToMove: Optional<RULE_DIRECTION>) => void\n    updateCells: (sprite: GameSprite, cells: Cell[], wantsToMove: RULE_DIRECTION) => void\n    removeCells: (sprite: GameSprite, cells: Cell[]) => void\n    _getDescendantTiles: () => IGameTile[]\n    getSprites: () => GameSprite[]\n    getSpritesForRuleAction: () => GameSprite[]\n    isInvalid: () => Optional<string>\n    hasCollisionLayer: () => boolean\n    hasSingleCollisionLayer: () => boolean\n    setCollisionLayer: (collisionLayer: CollisionLayer) => void\n    getCollisionLayer: () => CollisionLayer\n    matchesCell: (cell: Cell) => boolean\n    isOr: () => boolean\n    getCellsThatMatch: () => Set<Cell>\n    getSpritesThatMatch: (cell: Cell) => Set<GameSprite>\n    getName: () => string\n    equals: (t: IGameTile) => boolean\n    hasCell(cell: Cell): boolean\n}\n\nexport abstract class GameSprite extends BaseForLines implements IGameTile {\n    public allSpritesBitSetIndex: number // set onde all the sprites have been determined\n    public readonly _optionalLegendChar: Optional<string>\n    private readonly name: string\n    private collisionLayer: Optional<CollisionLayer>\n    private collisionLayerIndex: Optional<number>\n    private readonly trickleCells: Set<Cell>\n    private readonly trickleTiles: Set<IGameTile>\n    private readonly trickleTilesWithModifier: Set<SimpleTileWithModifier>\n    private bitSet: Optional<BitSet>\n\n    constructor(source: IGameCode, name: string, optionalLegendChar: Optional<string>) {\n        super(source)\n        this.name = name\n        this._optionalLegendChar = optionalLegendChar\n        this.trickleCells = new Set()\n        this.trickleTiles = new Set()\n        this.trickleTilesWithModifier = new Set()\n        this.allSpritesBitSetIndex = -1 // will be changed once we have all the sprites\n    }\n    public isOr() {\n        return false\n    }\n    public equals(t: IGameTile): boolean {\n        return this === t // sprites MUST be exact\n    }\n    public abstract hasPixels(): boolean\n    public abstract getPixels(spriteHeight: number, spriteWidth: number): IColor[][]\n\n    public getName() {\n        return this.name\n    }\n    public isBackground() {\n        return this.name.toLowerCase() === 'background'\n    }\n    public _getDescendantTiles(): IGameTile[] {\n        return []\n    }\n    public getSprites() {\n        // to match the signature of LegendTile\n        return [this]\n    }\n    public getSpritesForRuleAction() {\n        return this.getSprites()\n    }\n    public hasCollisionLayer() {\n        return !!this.collisionLayer\n    }\n    public hasSingleCollisionLayer() {\n        // always true. This is only ever false for OR tiles\n        return this.hasCollisionLayer()\n    }\n    public setCollisionLayer(collisionLayer: CollisionLayer) {\n        this.collisionLayer = collisionLayer\n    }\n    public setCollisionLayerAndIndex(collisionLayer: CollisionLayer, bitSetIndex: number) {\n        this.collisionLayer = collisionLayer\n        this.collisionLayerIndex = bitSetIndex\n        this.bitSet = new BitSet2() as BitSet\n        this.bitSet.set(bitSetIndex)\n    }\n    public getBitSet() {\n        return this.bitSet\n    }\n    public getBitSetIndex() {\n        return this.collisionLayerIndex\n    }\n    public getCollisionLayer() {\n        if (!this.collisionLayer) {\n            throw new Error(`ERROR: This sprite was not in a Collision Layer\\n${this.toString()}`)\n        }\n        return this.collisionLayer\n    }\n    public isInvalid() {\n        if (!this.collisionLayer) {\n            return 'This object does not have an entry in the COLLISIONLAYERS section.'\n        }\n        return null\n    }\n    public clearCaches() {\n        this.trickleCells.clear()\n    }\n    public hasCell(cell: Cell): boolean {\n        return this.trickleCells.has(cell)\n    }\n    public matchesCell(cell: Cell): boolean {\n        return cell.getSpritesAsSet().has(this)\n    }\n    public getSpritesThatMatch(cell: Cell) {\n        if (cell.getSpritesAsSet().has(this)) {\n            return new Set([this])\n        } else {\n            return new Set()\n        }\n    }\n\n    public subscribeToCellChanges(t: SimpleTileWithModifier) {\n        this.trickleTilesWithModifier.add(t)\n    }\n    public subscribeToCellChangesTile(tile: IGameTile) {\n        this.trickleTiles.add(tile)\n    }\n    public addCell(cell: Cell, wantsToMove: Optional<RULE_DIRECTION>) {\n        this.addCells(this, [cell], wantsToMove)\n    }\n    public removeCell(cell: Cell) {\n        this.removeCells(this, [cell])\n    }\n    public updateCell(cell: Cell, wantsToMove: RULE_DIRECTION) {\n        if (process.env.NODE_ENV === 'development') {\n            // check that the cell is already in the sprite cell set\n            if (!this.has(cell)) {\n                throw new Error(`BUG: Expected cell to already be in the sprite set`)\n            }\n        }\n\n        // propagate up\n        for (const t of this.trickleTiles) {\n            t.updateCells(this, [cell], wantsToMove)\n        }\n        for (const t of this.trickleTilesWithModifier) {\n            t.updateCells(this, [cell], wantsToMove)\n        }\n    }\n    public addCells(sprite: GameSprite, cells: Cell[], wantsToMove: Optional<RULE_DIRECTION>) {\n        for (const cell of cells) {\n            if (this.trickleCells.has(cell)) {\n                throw new Error(`BUG: should not be trying to add a cell that has already been matched (right?)`)\n            }\n            this.trickleCells.add(cell)\n        }\n        // propagate up\n        for (const t of this.trickleTiles) {\n            t.addCells(this, cells, wantsToMove)\n        }\n        for (const t of this.trickleTilesWithModifier) {\n            t.addCells(this, this, cells, wantsToMove)\n        }\n    }\n    public updateCells(sprite: GameSprite, cells: Cell[], wantsToMove: RULE_DIRECTION) {\n        // propagate up\n        for (const t of this.trickleTiles) {\n            t.updateCells(this, cells, wantsToMove)\n        }\n        for (const t of this.trickleTilesWithModifier) {\n            t.updateCells(this, cells, wantsToMove)\n        }\n    }\n    public removeCells(sprite: GameSprite, cells: Cell[]) {\n        for (const cell of cells) {\n            this.trickleCells.delete(cell)\n        }\n        // propagate up\n        for (const t of this.trickleTiles) {\n            t.removeCells(this, cells)\n        }\n        for (const t of this.trickleTilesWithModifier) {\n            t.removeCells(this, this, cells)\n        }\n    }\n    public has(cell: Cell) {\n        return this.trickleCells.has(cell)\n    }\n    public hasNegationTileWithModifier() {\n        for (const t of this.trickleTilesWithModifier) {\n            if (t.isNo()) {\n                return true\n            }\n        }\n        for (const tile of this.trickleTiles) {\n            if (tile.hasNegationTileWithModifier()) {\n                return true\n            }\n        }\n        return false\n    }\n    public getCellsThatMatch() {\n        return this.trickleCells\n    }\n}\n\nexport class GameSpriteSingleColor extends GameSprite {\n    private readonly color: IColor\n\n    constructor(source: IGameCode, name: string, optionalLegendChar: Optional<string>, colors: IColor[]) {\n        super(source, name, optionalLegendChar)\n        this.color = colors[0] // Ignore if the user added multiple colors (like `transparent yellow`)\n    }\n    public hasPixels() {\n        return false\n    }\n    public getPixels(spriteHeight: number, spriteWidth: number) {\n        // When there are no pixels then it means \"color the whole thing in the same color\"\n        const rows: IColor[][] = []\n        for (let row = 0; row < spriteHeight; row++) {\n            rows.push([])\n            for (let col = 0; col < spriteWidth; col++) {\n                rows[row].push(this.color)\n            }\n        }\n        return rows\n    }\n}\n\nexport class GameSpritePixels extends GameSprite {\n    private readonly colors: IColor[]\n    private readonly pixels: IColor[][]\n\n    constructor(source: IGameCode, name: string, optionalLegendChar: Optional<string>, colors: IColor[], pixels: Array<Array<'.' | number>>) {\n        super(source, name, optionalLegendChar)\n        this.colors = colors\n        this.pixels = pixels.map((row) => {\n            return row.map((col) => {\n                if (col === '.') {\n                    return new TransparentColor(this.__source)\n                } else {\n                    return this.colors[col]\n                }\n            })\n        }) // Pixel colors are 0-indexed.\n    }\n    public isInvalid() {\n        if (super.isInvalid()) {\n            return super.isInvalid()\n        }\n        let isInvalid = null\n        const colorLen = this.colors.length\n        const rowLen = this.pixels[0].length\n        this.pixels.forEach((row: any[]) => {\n            if (row.length !== rowLen) {\n                isInvalid = `Row lengths do not match. Expected ${rowLen} but got ${row.length}. Row: ${row}`\n            }\n            // Check that only '.' or a digit that is less than the number of colors is present\n            row.forEach((pixel) => {\n                if (pixel !== '.') {\n                    if (pixel >= colorLen) {\n                        isInvalid = `Pixel number is too high (${pixel}). There are only ${colorLen} colors defined`\n                    }\n                }\n            })\n        })\n        return isInvalid\n    }\n    public getSprites() {\n        // to match the signature of LegendTile\n        return [this]\n    }\n    public hasPixels() {\n        return true\n    }\n    public getPixels(spriteHeight: number, spriteWidth: number) {\n        // Make a copy because others may edit it\n        return this.pixels.map((row) => {\n            return row.map((col) => col)\n        })\n    }\n\n}\n\nexport abstract class GameLegendTile extends BaseForLines implements IGameTile {\n    public readonly spriteNameOrLevelChar: string\n    public readonly tiles: IGameTile[]\n    protected collisionLayer: Optional<CollisionLayer>\n    private trickleCells: Set<Cell>\n    private trickleTilesWithModifier: Set<SimpleTileWithModifier>\n    private spritesCache: Optional<GameSprite[]>\n\n    constructor(source: IGameCode, spriteNameOrLevelChar: string, tiles: IGameTile[]) {\n        super(source)\n        this.spriteNameOrLevelChar = spriteNameOrLevelChar\n        this.tiles = tiles\n        this.trickleCells = new Set()\n        this.trickleTilesWithModifier = new Set()\n    }\n    public equals(t: IGameTile) {\n        if (this.isOr() !== t.isOr()) {\n            return false\n        }\n        const difference = setDifference(new Set(this.getSprites()), t.getSprites())\n        return difference.size === 0\n    }\n    public isOr() {\n        return false\n    }\n    public isInvalid() {\n        if (!this.hasCollisionLayer()) {\n            return 'Missing collision layer'\n        }\n        return null\n    }\n    public abstract matchesCell(cell: Cell): boolean\n    public abstract getSpritesThatMatch(cell: Cell): Set<GameSprite>\n    public abstract hasSingleCollisionLayer(): boolean\n\n    public getName() {\n        return this.spriteNameOrLevelChar\n    }\n    public getSpritesForRuleAction() {\n        return this.getSprites()\n    }\n    public _getDescendantTiles(): IGameTile[] {\n        // recursively pull all the tiles out\n        return this.tiles.concat(_flatten(this.tiles.map((tile) => tile._getDescendantTiles())))\n    }\n    public getSprites() {\n        // Use a cache because all the collision layers have not been loaded in time\n        if (!this.spritesCache) {\n            // 2 levels of indirection should be safe\n            // Sort by collisionLayer so that the most-important sprite is first\n            this.spritesCache = _flatten(\n                this.tiles.map((tile) => {\n                    return tile.getSprites()\n                })\n            ).sort((a, b) => {\n                return a.getCollisionLayer().id - b.getCollisionLayer().id\n            }).reverse()\n        }\n        return this.spritesCache\n    }\n    public hasCollisionLayer() {\n        return !!this.collisionLayer\n    }\n    public setCollisionLayer(collisionLayer: CollisionLayer) {\n        this.collisionLayer = collisionLayer\n    }\n    public getCollisionLayer() {\n        // OR tiles and AND tiles don't necessarily have a collisionLayer set so pull it from the sprite (this might not work)\n        if (this.collisionLayer) {\n            return this.collisionLayer\n        }\n        // check that all sprites are in the same collisionlayer... if not, thene our understanding is flawed\n        const firstCollisionLayer = this.getSprites()[0].getCollisionLayer()\n        for (const sprite of this.getSprites()) {\n            if (sprite.getCollisionLayer() !== firstCollisionLayer) {\n                throw new Error(`ooh, sprites in a tile have different collision layers... that's a problem\\n${this.toString()}`)\n            }\n        }\n        return firstCollisionLayer\n    }\n\n    public getCellsThatMatch() {\n        const matches = new Set()\n        for (const sprite of this.getSprites()) {\n            for (const cell of sprite.getCellsThatMatch()) {\n                matches.add(cell)\n            }\n        }\n        return matches\n    }\n\n    public subscribeToCellChanges(t: SimpleTileWithModifier) {\n        this.trickleTilesWithModifier.add(t)\n        // subscribe this to be notified of all Sprite changes of Cells\n        for (const sprite of this.getSprites()) {\n            sprite.subscribeToCellChangesTile(this)\n        }\n    }\n    public hasNegationTileWithModifier() {\n        for (const t of this.trickleTilesWithModifier) {\n            if (t.isNo()) {\n                return true\n            }\n        }\n        return false\n    }\n    public addCells(sprite: GameSprite, cells: Cell[], wantsToMove: Optional<RULE_DIRECTION>) {\n        for (const cell of cells) {\n            if (!this.trickleCells.has(cell)) {\n                if (this.matchesCell(cell)) {\n                    this.trickleCells.add(cell)\n                    for (const t of this.trickleTilesWithModifier) {\n                        t.addCells(this, sprite, [cell], wantsToMove)\n                    }\n                }\n            }\n        }\n    }\n    public updateCells(sprite: GameSprite, cells: Cell[], wantsToMove: Optional<RULE_DIRECTION>) {\n        // verify that all the cells are in trickleCells\n        if (process.env.NODE_ENV === 'development') {\n            for (const cell of cells) {\n                if (!this.trickleCells.has(cell)) {\n                    throw new Error(`Cell was not already added before`)\n                }\n            }\n        }\n        for (const t of this.trickleTilesWithModifier) {\n            t.updateCells(sprite, cells, wantsToMove)\n        }\n    }\n\n    public removeCells(sprite: GameSprite, cells: Cell[]) {\n        for (const cell of cells) {\n            if (this.matchesCell(cell)) {\n                if (!this.trickleCells.has(cell)) {\n                    this.addCells(sprite, [cell], null)\n                } else {\n                    // We need to propagate this is an OR tile\n                    // because removing one of the OR tiles\n                    // may (or may not) cause this cell to\n                    // no longer match\n                    this.updateCells(sprite, [cell], null)\n                }\n            } else {\n                this.trickleCells.delete(cell)\n                for (const t of this.trickleTilesWithModifier) {\n                    t.removeCells(this, sprite, [cell])\n                }\n            }\n        }\n    }\n    public hasCell(cell: Cell) {\n        return this.trickleCells.has(cell)\n    }\n}\n\nexport class GameLegendTileSimple extends GameLegendTile {\n    constructor(source: IGameCode, spriteNameOrLevelChar: string, tile: GameSprite) {\n        super(source, spriteNameOrLevelChar, [tile])\n    }\n    public matchesCell(cell: Cell) {\n        // Update code coverage (Maybe only count the number of times it was true?)\n        if (process.env.NODE_ENV === 'development') {\n            this.__incrementCoverage()\n        }\n\n        // Check that the cell contains all of the tiles (ANDED)\n        // Since this is a Simple Tile it should only contain 1 tile so anding is the right way to go.\n        for (const tile of this.tiles) {\n            if (!tile.matchesCell(cell)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    public getSpritesThatMatch(cell: Cell) {\n        return setIntersection(new Set(this.getSprites()), cell.getSpritesAsSet())\n    }\n\n    public hasSingleCollisionLayer() {\n        return !!this.collisionLayer\n    }\n}\n\nexport class GameLegendTileAnd extends GameLegendTile {\n    public matchesCell(cell: Cell) {\n        // Update code coverage (Maybe only count the number of times it was true?)\n        if (process.env.NODE_ENV === 'development') {\n            this.__incrementCoverage()\n        }\n\n        // Check that the cell contains all of the tiles (AND)\n        for (const tile of this.tiles) {\n            if (!tile.matchesCell(cell)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    public getSpritesThatMatch(cell: Cell): Set<GameSprite> {\n        // return setIntersection(new Set(this.getSprites()), cell.getSpritesAsSet())\n        throw new Error(`BUG: This method should only be called for OR tiles`)\n    }\n\n    public hasSingleCollisionLayer() {\n        return !!this.collisionLayer\n    }\n\n}\n\nexport class GameLegendTileOr extends GameLegendTile {\n    public isOr() {\n        return true\n    }\n    public matchesCell(cell: Cell) {\n        // Update code coverage (Maybe only count the number of times it was true?)\n        if (process.env.NODE_ENV === 'development') {\n            this.__incrementCoverage()\n        }\n\n        // Check that the cell contains any of the tiles (OR)\n        for (const tile of this.tiles) {\n            if (tile.matchesCell(cell)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public getSpritesThatMatch(cell: Cell) {\n        return setIntersection(new Set(this.getSprites()), cell.getSpritesAsSet())\n    }\n\n    public hasSingleCollisionLayer() {\n        const sprites = this.getSprites()\n        for (const sprite of sprites) {\n            if (sprite.getCollisionLayer() !== sprites[0].getCollisionLayer()) {\n                return false\n            }\n        }\n        return true\n    }\n}\n","import { AddValidationFunc, ValidationLevel, ValidationMessage } from '../parser/parser'\nimport { _flatten } from '../util'\nimport { BaseForLines, IGameCode } from './BaseForLines'\nimport { GameSprite, IGameTile } from './tile'\n\nlet collisionIdCounter = 0\nexport class CollisionLayer extends BaseForLines {\n    public readonly id: number // Used for sorting collision layers for rendering\n    private sprites: GameSprite[]\n\n    constructor(source: IGameCode, tiles: IGameTile[], addValidationMessage: AddValidationFunc) {\n        super(source)\n        this.id = collisionIdCounter++\n\n        // Map all the Objects to the layer\n        tiles.forEach((tile: IGameTile) => {\n            if (tile.hasCollisionLayer()) {\n                addValidationMessage(new ValidationMessage(tile.__source, ValidationLevel.WARNING, 'An Object should not belong to more than one collision layer'))\n            }\n            tile.setCollisionLayer(this)\n            tile._getDescendantTiles().forEach((subTile) => {\n                if (subTile.hasCollisionLayer()) {\n                    addValidationMessage(new ValidationMessage(subTile.__source, ValidationLevel.WARNING,\n                        'An Object should not belong to more than one collision layer. This item was referenced indirectly by a LEGEND entry'))\n                }\n                subTile.setCollisionLayer(this)\n            })\n        })\n\n        // build an array of Sprites so we can index to them in a BitSet\n        this.sprites = [...new Set(_flatten(tiles.map((t) => t.getSprites())))]\n\n        this.sprites.forEach((sprite, index) => sprite.setCollisionLayerAndIndex(this, index))\n    }\n\n    // isInvalid(): Optional<string> {\n    //     return null\n    // }\n\n    public getBitSetIndexOf(sprite: GameSprite) {\n        const index = this.sprites.indexOf(sprite)\n        if (index < 0) {\n            throw new Error(`BUG: Sprite is not in this CollisionLayer`)\n        }\n        return index\n    }\n\n    public toKey() {\n        return this.sprites.map((s) => s.getName()).join(' ')\n    }\n\n    // bitSetToSprites(bitSet: BitSet) {\n    //     const ret = []\n    //     let index = 0\n    //     for (const sprite of this.sprites) {\n    //         if (bitSet.get(index)) {\n    //             ret.push(sprite)\n    //         }\n    //         index++\n    //     }\n    //     return ret\n    // }\n}\n","import { Cell, GameData, GameEngine, Optional } from '..'\nimport { RULE_DIRECTION } from '../index'\nimport { IColor } from '../models/colors'\nimport { GameSprite } from '../models/tile'\nimport Parser from '../parser/parser'\nimport { _flatten } from '../util'\n\nclass CellColorCache {\n    private readonly cache: Map<string, IColor[][]>\n\n    constructor() {\n        this.cache = new Map()\n    }\n\n    public get(spritesToDrawSet: Set<GameSprite>,\n               backgroundColor: Optional<IColor>,\n               spriteHeight: number,\n               spriteWidth: number) {\n        const spritesToDraw = [...spritesToDrawSet]\n        .sort((s1, s2) => s1.getCollisionLayer().id - s2.getCollisionLayer().id)\n        .reverse()\n\n        const key = spritesToDraw.map((s) => s.getName()).join(' ')\n        let ret = this.cache.get(key)\n        if (!ret) {\n            ret = collapseSpritesToPixels(spritesToDraw, backgroundColor, spriteHeight, spriteWidth)\n            this.cache.set(key, ret)\n        }\n        return ret\n    }\n\n    public clear() {\n        this.cache.clear()\n    }\n}\n\n// First Sprite one is on top.\n// This caused a 2x speedup while rendering.\nfunction collapseSpritesToPixels(spritesToDraw: GameSprite[],\n                                 backgroundColor: Optional<IColor>,\n                                 spriteHeight: number,\n                                 spriteWidth: number) {\n\n    if (spritesToDraw.length === 0) {\n        // Just draw the background\n        const spritePixels: IColor[][] = []\n        for (let y = 0; y < spriteHeight; y++) {\n            spritePixels[y] = spritePixels[y] || []\n            for (let x = 0; x < spriteWidth; x++) {\n                // If this is the last sprite and nothing was found then use the game background color\n                if (backgroundColor) {\n                    spritePixels[y][x] = backgroundColor\n                }\n            }\n        }\n        return spritePixels\n    }\n    // Record Code coverage\n    if (process.env.NODE_ENV === 'development') {\n        spritesToDraw[0].__incrementCoverage()\n    }\n    if (spritesToDraw.length === 1) {\n        return spritesToDraw[0].getPixels(spriteHeight, spriteWidth)\n    }\n    const sprite = spritesToDraw[0].getPixels(spriteHeight, spriteWidth)\n    spritesToDraw.slice(1).forEach((objectToDraw, spriteIndex) => {\n        if (process.env.NODE_ENV === 'development') {\n            objectToDraw.__incrementCoverage()\n        }\n        const pixels = objectToDraw.getPixels(spriteHeight, spriteWidth)\n        for (let y = 0; y < spriteHeight; y++) {\n            sprite[y] = sprite[y] || []\n            for (let x = 0; x < spriteWidth; x++) {\n                const pixel = pixels[y][x]\n                // try to pull it out of the current sprite\n                if ((!sprite[y][x] || sprite[y][x].isTransparent()) && pixel && !pixel.isTransparent()) {\n                    sprite[y][x] = pixel\n                }\n            }\n        }\n    })\n    return sprite\n}\n\nabstract class BaseUI {\n    public PIXEL_WIDTH: number // number of characters in the terminal used to represent a pixel\n    public PIXEL_HEIGHT: number\n    protected gameData: Optional<GameData>\n    protected engine: Optional<GameEngine>\n    protected renderedPixels: Array<Array<{hex: string, chars: string}>> // string is the hex code of the pixel\n    protected windowOffsetColStart: number\n    protected windowOffsetRowStart: number\n    protected windowOffsetWidth: Optional<number>\n    protected windowOffsetHeight: Optional<number>\n    protected isDumpingScreen: boolean\n    protected SPRITE_WIDTH: number\n    protected SPRITE_HEIGHT: number\n    protected hasVisualUi: boolean\n    private readonly cellColorCache: CellColorCache\n\n    constructor() {\n        this.cellColorCache = new CellColorCache()\n        this.renderedPixels = []\n        this.windowOffsetColStart = 0\n        this.windowOffsetRowStart = 0\n        this.isDumpingScreen = false\n        // defaults that get overridden later\n        this.PIXEL_HEIGHT = 1\n        this.PIXEL_WIDTH = 2\n        this.SPRITE_HEIGHT = 5\n        this.SPRITE_WIDTH = 5\n\n        this.hasVisualUi = true\n    }\n    public setGameEngine(engine: GameEngine) {\n        this.engine = engine\n        this.gameData = engine.getGameData()\n\n        this.renderedPixels = []\n        this.cellColorCache.clear()\n        this.clearScreen()\n\n        // reset flickscreen and zoomscreen settings\n        this.windowOffsetColStart = 0\n        this.windowOffsetRowStart = 0\n\n        this.windowOffsetWidth = null\n        this.windowOffsetHeight = null\n        if (this.gameData.metadata.flickscreen) {\n            const { width, height } = this.gameData.metadata.flickscreen\n            this.windowOffsetWidth = width\n            this.windowOffsetHeight = height\n        } else if (this.gameData.metadata.zoomscreen) {\n            const { width, height } = this.gameData.metadata.zoomscreen\n            this.windowOffsetWidth = width\n            this.windowOffsetHeight = height\n        }\n\n        // Set the sprite width/height based on the 1st sprite (default is 5x5)\n        // TODO: Loop until we find an actual sprite, not a single-color sprite\n        const { spriteHeight, spriteWidth } = this.gameData.getSpriteSize()\n        this.SPRITE_HEIGHT = spriteHeight\n        this.SPRITE_WIDTH = spriteWidth\n    }\n\n    public setGame(gameData: string) {\n        const { data } = Parser.parse(gameData)\n        if (!data) {\n            throw new Error(`BUG: Could not parse gameData and did not find an error`)\n        }\n        this.setGameEngine(new GameEngine(data))\n    }\n    public getGameData() {\n        if (!this.engine) {\n            throw new Error(`BUG: Game has not been specified yet`)\n        }\n        return this.engine.getGameData()\n    }\n\n    public press(dir: RULE_DIRECTION) {\n        if (this.engine) {\n            this.engine.press(dir)\n        }\n    }\n    public pressUp() {\n        this.press(RULE_DIRECTION.UP)\n    }\n    public pressDown() {\n        this.press(RULE_DIRECTION.DOWN)\n    }\n    public pressLeft() {\n        this.press(RULE_DIRECTION.LEFT)\n    }\n    public pressRight() {\n        this.press(RULE_DIRECTION.RIGHT)\n    }\n    public pressAction() {\n        this.press(RULE_DIRECTION.ACTION)\n    }\n    public pressUndo() {\n        if (this.engine) {\n            this.engine.pressUndo(); this.renderScreen(false)\n        }\n    }\n    public pressRestart() {\n        if (this.engine) {\n            this.engine.pressRestart(); this.renderScreen(false)\n        }\n    }\n    public setLevel(levelNum: number) {\n        if (this.engine) {\n            this.engine.setLevel(levelNum)\n        }\n    }\n    public getCurrentLevelCells() {\n        if (this.engine) {\n            return this.engine.getCurrentLevelCells()\n        } else {\n            throw new Error(`BUG: Game has not been specified yet`)\n        }\n    }\n    public tick() {\n        if (!this.engine) {\n            throw new Error(`BUG: Game has not been specified yet`)\n        }\n        const ret = this.engine.tick()\n        this.drawCells(ret.changedCells, false)\n        return ret\n    }\n\n    public debugRenderScreen() {\n        if (this.engine) {\n            this.renderScreen(true)\n        }\n    }\n\n    public renderMessageScreen(message: string) {\n        const screenWidth = 34\n        const screenHeight = 13\n        // re-center the screen so we can show the message\n        // remember these values so we can restore them right after rendering the message\n        // tslint:disable-next-line:no-this-assignment\n        const { windowOffsetColStart, windowOffsetRowStart, windowOffsetHeight, windowOffsetWidth } = this\n        this.windowOffsetColStart = 0\n        this.windowOffsetRowStart = 0\n        this.windowOffsetHeight = screenHeight\n        this.windowOffsetWidth = screenWidth\n        this.clearScreen()\n\n        if (this.engine) {\n            const sprites = this.createMessageSprites(message)\n            this.engine.setMessageLevel(sprites)\n            // this.renderScreen(false)\n            this.drawCellsAfterRecentering(_flatten(this.getCurrentLevelCells()), 0)\n            this.engine.restoreFromMessageLevel()\n        }\n\n        this.windowOffsetColStart = windowOffsetColStart\n        this.windowOffsetRowStart = windowOffsetRowStart\n        this.windowOffsetHeight = windowOffsetHeight\n        this.windowOffsetWidth = windowOffsetWidth\n    }\n\n    public renderScreen(clearCaches: boolean, renderScreenDepth: number = 0) {\n        if (!this.gameData) {\n            throw new Error(`BUG: gameData was not set yet`)\n        }\n        if (!this.engine) {\n            throw new Error(`BUG: gameEngine was not set yet`)\n        }\n\n        const level = this.engine.getCurrentLevel()\n        if (!level.isMap()) {\n            this.renderMessageScreen(level.getMessage())\n            return\n        }\n\n        // Otherwise, the level is a Map so render the cells\n        const levelRows = this.engine.getCurrentLevelCells()\n\n        if (clearCaches) {\n            this.cellColorCache.clear()\n            this.renderedPixels = []\n        }\n\n        this.renderLevelScreen(levelRows, renderScreenDepth)\n    }\n\n    public drawCells(cells: Iterable<Cell>, dontRestoreCursor: boolean, renderScreenDepth: number = 0) {\n        if (!this.gameData) {\n            throw new Error(`BUG: gameData was not set yet`)\n        }\n        if (!this.engine) {\n            throw new Error(`BUG: gameEngine was not set yet`)\n        }\n\n        // Sort of HACKy... If the player is not visible on the screen then we need to\n        // move the screen so that they are visible.\n        const playerTile = this.gameData.getPlayer()\n        if (playerTile.getCellsThatMatch().size === 1) {\n            // if the screen can only show an even number of cells (eg 4) then this will oscillate indefinitely\n            // So we limit the recursion to just a couple of recursions\n            if (renderScreenDepth <= 1) {\n                const playerCell = [...playerTile.getCellsThatMatch()][0]\n                const { isOnScreen } = this.cellPosToXY(playerCell)\n                if (this.recenterPlayerIfNeeded(playerCell, isOnScreen)) {\n                    // if we moved the screen then re-render the whole screen\n                    cells = _flatten(this.engine.getCurrentLevelCells())\n                }\n            }\n            // otherwise, keep rendering cells like normal\n        }\n\n        if (!this.hasVisualUi) {\n            return // no need to re-say the whole level (a11y)\n        }\n        this.drawCellsAfterRecentering(cells, renderScreenDepth)\n    }\n\n    protected createMessageTextScreen(messageStr: string) {\n        const titleImage = [\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '                                  ',\n            '          X to continue           ',\n            '                                  ',\n            '                                  '\n        ]\n\n        function wordwrap(str: string, screenWidth: number) {\n            screenWidth = screenWidth || 75\n            const cut = true\n            if (!str) { return str }\n            const regex = '.{1,' + screenWidth + '}(\\\\s|$)' + (cut ? '|.{' + screenWidth + '}|.+$' : '|\\\\S+?(\\\\s|$)')\n            const ret = str.match(RegExp(regex, 'g'))\n            if (ret) {\n                return ret\n            }\n            throw new Error(`BUG: Match did not work`)\n        }\n\n        const emptyLineStr = titleImage[9]\n        const xToContinueStr = titleImage[10]\n\n        titleImage[10] = emptyLineStr\n\n        const width = titleImage[0].length\n\n        const splitMessage = wordwrap(messageStr, titleImage[0].length)\n\n        let offset = 5 - ((splitMessage.length / 2) | 0) // tslint:disable-line:no-bitwise\n        if (offset < 0) {\n            offset = 0\n        }\n\n        const count = Math.min(splitMessage.length, 12)\n        for (let i = 0; i < count; i++) {\n            const m = splitMessage[i]\n            const row = offset + i\n            const messageLength = m.length\n            const lmargin = ((width - messageLength) / 2) | 0 // tslint:disable-line:no-bitwise\n            // var rmargin = width-messageLength-lmargin;\n            const rowtext = titleImage[row]\n            titleImage[row] = rowtext.slice(0,lmargin) + m + rowtext.slice(lmargin + m.length)\n        }\n\n        let endPos = 10\n        if (count >= 10) {\n            if (count < 12) {\n                endPos = count + 1\n            } else {\n                endPos = 12\n            }\n        }\n        // if (quittingMessageScreen) {\n        //     titleImage[endPos]=emptyLineStr;\n        // } else {\n        titleImage[endPos] = xToContinueStr\n        // }\n\n        return titleImage\n    }\n\n    protected createMessageSprites(messageStr: string) {\n        if (!this.gameData) {\n            throw new Error(`BUG: gameData was not set yet`)\n        }\n        if (!this.engine) {\n            throw new Error(`BUG: gameEngine was not set yet`)\n        }\n        const titleImage = this.createMessageTextScreen(messageStr)\n\n        // Now, convert the string array into cells\n        const cells: Array<Array<Set<GameSprite>>> = []\n        for (const row of titleImage) {\n            const cellsRow: Array<Set<GameSprite>> = []\n            cells.push(cellsRow)\n            for (const char of row) {\n                const sprite = this.gameData.getLetterSprite(char)\n                cellsRow.push(new Set([sprite]))\n            }\n        }\n        return cells\n    }\n\n    protected abstract renderLevelScreen(levelRows: Cell[][], renderScreenDepth: number): void\n\n    protected abstract setPixel(x: number, y: number, hex: string, fgHex: Optional<string>, chars: string): void\n\n    protected abstract checkIfCellCanBeDrawnOnScreen(cellStartX: number, cellStartY: number): boolean\n\n    protected cellPosToXY(cell: Cell) {\n        const { colIndex, rowIndex } = cell\n        let isOnScreen = true // can be set to false for many reasons\n        let cellStartX = -1\n        let cellStartY = -1\n        if (this.windowOffsetHeight && this.windowOffsetWidth) {\n            if (this.windowOffsetColStart > colIndex ||\n                this.windowOffsetRowStart > rowIndex ||\n                this.windowOffsetColStart + this.windowOffsetWidth <= colIndex ||\n                this.windowOffsetRowStart + this.windowOffsetHeight <= rowIndex) {\n\n                // cell is off-screen\n                isOnScreen = false\n            }\n        }\n        cellStartX = (colIndex - this.windowOffsetColStart) * this.SPRITE_WIDTH\n        cellStartY = (rowIndex - this.windowOffsetRowStart) * this.SPRITE_HEIGHT /*pixels*/\n\n        if (isOnScreen) {\n            isOnScreen = this.checkIfCellCanBeDrawnOnScreen(cellStartX, cellStartY)\n        }\n\n        if (cellStartX < 0 || cellStartY < 0) {\n            isOnScreen = false\n        }\n        return { isOnScreen, cellStartX, cellStartY }\n    }\n\n    protected abstract getMaxSize(): {columns: number, rows: number}\n\n    protected abstract drawCellsAfterRecentering(cells: Iterable<Cell>, renderScreenDepth: number): void\n\n    protected getPixelsForCell(cell: Cell) {\n        if (!this.gameData) {\n            throw new Error(`BUG: gameData was not set yet`)\n        }\n        const spritesToDrawSet = cell.getSpritesAsSet() // Not sure why, but entanglement renders properly when reversed\n\n        // If there is a magic background object then rely on it last\n        const magicBackgroundSprite = this.gameData.getMagicBackgroundSprite()\n        if (magicBackgroundSprite) {\n            spritesToDrawSet.add(magicBackgroundSprite)\n        }\n\n        const pixels = this.cellColorCache.get(spritesToDrawSet,\n            this.gameData.metadata.backgroundColor, this.SPRITE_HEIGHT, this.SPRITE_WIDTH)\n        return pixels\n    }\n\n    protected clearScreen() {\n        this.renderedPixels = []\n    }\n\n    protected hasAgainThatNeedsToRun() {\n        if (!this.engine) {\n            throw new Error(`BUG: Engine has not been set yet`)\n        }\n        return this.engine.hasAgain()\n    }\n\n    // Returns true if the window was moved (so we can re-render the screen)\n    private recenterPlayerIfNeeded(playerCell: Cell, isOnScreen: boolean) {\n        if (!this.gameData) {\n            throw new Error(`BUG: gameData was not set yet`)\n        }\n        if (!this.engine) {\n            throw new Error(`BUG: gameEngine was not set yet`)\n        }\n        let boundingBoxLeft\n        let boundingBoxTop\n        let boundingBoxWidth\n        let boundingBoxHeight\n\n        const windowLeft = this.windowOffsetColStart\n        const windowTop = this.windowOffsetRowStart\n        let windowWidth\n        let windowHeight\n\n        const flickScreen = this.gameData.metadata.flickscreen\n        const zoomScreen = this.gameData.metadata.zoomscreen\n        // these are number of sprites that can fit on the terminal\n        const { columns, rows } = this.getMaxSize()\n        const terminalWidth = Math.floor(columns / this.SPRITE_WIDTH / this.PIXEL_WIDTH)\n        const terminalHeight = Math.floor(rows / this.SPRITE_HEIGHT / this.PIXEL_HEIGHT)\n\n        if (flickScreen) {\n            boundingBoxTop = playerCell.rowIndex - (playerCell.rowIndex % flickScreen.height)\n            boundingBoxLeft = playerCell.colIndex - (playerCell.colIndex % flickScreen.width)\n            boundingBoxHeight = flickScreen.height\n            boundingBoxWidth = flickScreen.width\n        } else {\n            boundingBoxLeft = 0\n            boundingBoxTop = 0\n            boundingBoxHeight = this.engine.getCurrentLevelCells().length\n            boundingBoxWidth = this.engine.getCurrentLevelCells()[0].length\n        }\n\n        if (zoomScreen) {\n            windowHeight = Math.min(zoomScreen.height, terminalHeight)\n            windowWidth = Math.min(zoomScreen.width, terminalWidth)\n        } else {\n            windowHeight = terminalHeight\n            windowWidth = terminalWidth\n        }\n\n        // If the boundingbox is larger than the window then we need to apply the zoom\n        // which means we need to pan whenever the player moves out of the middle 1/2 of\n        // the screen.\n        if (boundingBoxHeight <= windowHeight && boundingBoxWidth <= windowWidth) {\n            // just ensure that the player is on the screen\n            if (!isOnScreen) {\n                this.windowOffsetColStart = boundingBoxLeft\n                this.windowOffsetRowStart = boundingBoxTop\n                return true\n            }\n        } else {\n            // Move the screen so that the player is centered*\n            // Except when we are at one of the edges of the level/flickscreen\n\n            // Check the left and then the top\n            let didADirectionChange = false\n\n            if (boundingBoxWidth > windowWidth) {\n                if (windowLeft + Math.round(windowWidth / 4) > playerCell.colIndex ||\n                    windowLeft + Math.round(windowWidth * 3 / 4) <= playerCell.colIndex) {\n\n                    let newWindowLeft = playerCell.colIndex - Math.floor(windowWidth / 2)\n                    // Check the near sides of the bounding box (left)\n                    newWindowLeft = Math.max(newWindowLeft, boundingBoxLeft)\n                    // Check the far sides of the bounding box (right)\n                    if (newWindowLeft + windowWidth > boundingBoxLeft + boundingBoxWidth) {\n                        newWindowLeft = boundingBoxLeft + boundingBoxWidth - windowWidth\n                    }\n\n                    if (newWindowLeft !== this.windowOffsetColStart) {\n                        this.windowOffsetColStart = newWindowLeft\n                        didADirectionChange = true\n                    }\n                }\n            }\n\n            // This is copy/pasta'd from above but adjusted for Top instead of Left\n            if (boundingBoxHeight > windowHeight) {\n                if (windowTop + Math.round(windowHeight / 4) > playerCell.rowIndex ||\n                    windowTop + Math.round(windowHeight * 3 / 4) <= playerCell.rowIndex) {\n\n                    let newWindowTop = playerCell.rowIndex - Math.floor(windowHeight / 2)\n\n                    // Check the near sides of the bounding box (top)\n                    newWindowTop = Math.max(newWindowTop, boundingBoxTop)\n\n                    // Check the far sides of the bounding box (bottom)\n                    if (newWindowTop + windowHeight > boundingBoxTop + boundingBoxHeight) {\n                        newWindowTop = boundingBoxTop + boundingBoxHeight - windowHeight\n                    }\n\n                    // Only recenter the axis that moved to be out-of-center\n                    // Use Math.abs() because an even number of cells visible\n                    // (e.g. 4) will cause the screen to clicker back and forth\n                    if (newWindowTop !== this.windowOffsetRowStart) {\n                        this.windowOffsetRowStart = newWindowTop\n                        didADirectionChange = true\n                    }\n                }\n            }\n\n            if (!didADirectionChange) {\n                // cell is within the middle of the window.\n                // just ensure that the player is on the screen\n                if (!isOnScreen) {\n                    this.windowOffsetColStart = boundingBoxLeft\n                    this.windowOffsetRowStart = boundingBoxTop\n                    return true\n                }\n\n            }\n            return didADirectionChange\n        }\n\n        return false\n    }\n\n}\n\nexport default BaseUI\n","import * as keymaster from 'keymaster'\nimport { BaseUI, Cell, closeSounds, GameData, GameEngine, ILoadingCellsEvent, Optional, Parser, playSound, RULE_DIRECTION } from '.'\nimport TableUI from './ui/table'\n\n// Public API\nexport {\n    Parser,\n    GameEngine,\n    Cell,\n    ILoadingCellsEvent,\n    GameData,\n    Optional,\n    RULE_DIRECTION,\n    BaseUI,\n    TableUI,\n    keymaster,\n    playSound,\n    closeSounds\n}\n\nexport class TableEngine {\n    private tableUI: TableUI\n    private timer: number\n    private currentLevel: number\n\n    constructor(table: HTMLTableElement) {\n        this.tableUI = new TableUI(table)\n        this.timer = 0\n        this.currentLevel = 0\n    }\n\n    public setGame(source: string, levelNum: number) {\n        this.tableUI.setGame(source)\n        this.tableUI.setLevel(levelNum)\n        this.currentLevel = levelNum\n    }\n\n    public start() {\n        this.startKeyboardListener()\n        this.startTickHandler()\n    }\n\n    public stop() {\n        cancelAnimationFrame(this.timer)\n    }\n\n    public startKeyboardListener() {\n        keymaster('up, w', () => this.tableUI.pressUp())\n        keymaster('down, s', () => this.tableUI.pressDown())\n        keymaster('left, a', () => this.tableUI.pressLeft())\n        keymaster('right, d', () => this.tableUI.pressRight())\n        keymaster('space, x', () => this.tableUI.pressAction())\n        keymaster('z, u', () => this.tableUI.pressUndo())\n        keymaster('r', () => this.tableUI.pressRestart())\n    }\n\n    public startTickHandler() {\n        const runLoop = async() => {\n            while (this.tableUI.isCurrentLevelAMessage()) {\n                alert(this.tableUI.getCurrentLevelMessage())\n                this.currentLevel++\n                this.tableUI.setLevel(this.currentLevel)\n            }\n            const {\n                // changedCells,\n                didLevelChange,\n                didWinGame,\n                messageToShow,\n                soundToPlay\n                // wasAgainTick\n            } = this.tableUI.tick()\n\n            if (soundToPlay) {\n                // let sounds play while the game loads or player keeps moving\n                /* await */ playSound(soundToPlay) // tslint:disable-line:no-floating-promises\n            }\n            if (didWinGame) {\n                alert(`You Won!`)\n                cancelAnimationFrame(this.timer)\n                return // make sure we don't call window.requestAnimationFrame again\n            } else if (didLevelChange) {\n                this.currentLevel += 1\n                this.tableUI.setLevel(this.currentLevel)\n                if (!this.tableUI.isCurrentLevelAMessage()) {\n                    alert(`Congratulations! You completed the level.`)\n                }\n            } else if (messageToShow) {\n                alert(messageToShow)\n                this.tableUI.pressAction()\n            }\n            this.timer = window.requestAnimationFrame(runLoop)\n        }\n\n        this.timer = window.requestAnimationFrame(runLoop)\n    }\n}\n","//     keymaster.js\n//     (c) 2011-2013 Thomas Fuchs\n//     keymaster.js may be freely distributed under the MIT license.\n\n;(function(global){\n  var k,\n    _handlers = {},\n    _mods = { 16: false, 18: false, 17: false, 91: false },\n    _scope = 'all',\n    // modifier keys\n    _MODIFIERS = {\n      '⇧': 16, shift: 16,\n      '⌥': 18, alt: 18, option: 18,\n      '⌃': 17, ctrl: 17, control: 17,\n      '⌘': 91, command: 91\n    },\n    // special keys\n    _MAP = {\n      backspace: 8, tab: 9, clear: 12,\n      enter: 13, 'return': 13,\n      esc: 27, escape: 27, space: 32,\n      left: 37, up: 38,\n      right: 39, down: 40,\n      del: 46, 'delete': 46,\n      home: 36, end: 35,\n      pageup: 33, pagedown: 34,\n      ',': 188, '.': 190, '/': 191,\n      '`': 192, '-': 189, '=': 187,\n      ';': 186, '\\'': 222,\n      '[': 219, ']': 221, '\\\\': 220\n    },\n    code = function(x){\n      return _MAP[x] || x.toUpperCase().charCodeAt(0);\n    },\n    _downKeys = [];\n\n  for(k=1;k<20;k++) _MAP['f'+k] = 111+k;\n\n  // IE doesn't support Array#indexOf, so have a simple replacement\n  function index(array, item){\n    var i = array.length;\n    while(i--) if(array[i]===item) return i;\n    return -1;\n  }\n\n  // for comparing mods before unassignment\n  function compareArray(a1, a2) {\n    if (a1.length != a2.length) return false;\n    for (var i = 0; i < a1.length; i++) {\n        if (a1[i] !== a2[i]) return false;\n    }\n    return true;\n  }\n\n  var modifierMap = {\n      16:'shiftKey',\n      18:'altKey',\n      17:'ctrlKey',\n      91:'metaKey'\n  };\n  function updateModifierKey(event) {\n      for(k in _mods) _mods[k] = event[modifierMap[k]];\n  };\n\n  // handle keydown event\n  function dispatch(event) {\n    var key, handler, k, i, modifiersMatch, scope;\n    key = event.keyCode;\n\n    if (index(_downKeys, key) == -1) {\n        _downKeys.push(key);\n    }\n\n    // if a modifier key, set the key.<modifierkeyname> property to true and return\n    if(key == 93 || key == 224) key = 91; // right command on webkit, command on Gecko\n    if(key in _mods) {\n      _mods[key] = true;\n      // 'assignKey' from inside this closure is exported to window.key\n      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = true;\n      return;\n    }\n    updateModifierKey(event);\n\n    // see if we need to ignore the keypress (filter() can can be overridden)\n    // by default ignore key presses if a select, textarea, or input is focused\n    if(!assignKey.filter.call(this, event)) return;\n\n    // abort if no potentially matching shortcuts found\n    if (!(key in _handlers)) return;\n\n    scope = getScope();\n\n    // for each potential shortcut\n    for (i = 0; i < _handlers[key].length; i++) {\n      handler = _handlers[key][i];\n\n      // see if it's in the current scope\n      if(handler.scope == scope || handler.scope == 'all'){\n        // check if modifiers match if any\n        modifiersMatch = handler.mods.length > 0;\n        for(k in _mods)\n          if((!_mods[k] && index(handler.mods, +k) > -1) ||\n            (_mods[k] && index(handler.mods, +k) == -1)) modifiersMatch = false;\n        // call the handler and stop the event if neccessary\n        if((handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91]) || modifiersMatch){\n          if(handler.method(event, handler)===false){\n            if(event.preventDefault) event.preventDefault();\n              else event.returnValue = false;\n            if(event.stopPropagation) event.stopPropagation();\n            if(event.cancelBubble) event.cancelBubble = true;\n          }\n        }\n      }\n    }\n  };\n\n  // unset modifier keys on keyup\n  function clearModifier(event){\n    var key = event.keyCode, k,\n        i = index(_downKeys, key);\n\n    // remove key from _downKeys\n    if (i >= 0) {\n        _downKeys.splice(i, 1);\n    }\n\n    if(key == 93 || key == 224) key = 91;\n    if(key in _mods) {\n      _mods[key] = false;\n      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = false;\n    }\n  };\n\n  function resetModifiers() {\n    for(k in _mods) _mods[k] = false;\n    for(k in _MODIFIERS) assignKey[k] = false;\n  };\n\n  // parse and assign shortcut\n  function assignKey(key, scope, method){\n    var keys, mods;\n    keys = getKeys(key);\n    if (method === undefined) {\n      method = scope;\n      scope = 'all';\n    }\n\n    // for each shortcut\n    for (var i = 0; i < keys.length; i++) {\n      // set modifier keys if any\n      mods = [];\n      key = keys[i].split('+');\n      if (key.length > 1){\n        mods = getMods(key);\n        key = [key[key.length-1]];\n      }\n      // convert to keycode and...\n      key = key[0]\n      key = code(key);\n      // ...store handler\n      if (!(key in _handlers)) _handlers[key] = [];\n      _handlers[key].push({ shortcut: keys[i], scope: scope, method: method, key: keys[i], mods: mods });\n    }\n  };\n\n  // unbind all handlers for given key in current scope\n  function unbindKey(key, scope) {\n    var multipleKeys, keys,\n      mods = [],\n      i, j, obj;\n\n    multipleKeys = getKeys(key);\n\n    for (j = 0; j < multipleKeys.length; j++) {\n      keys = multipleKeys[j].split('+');\n\n      if (keys.length > 1) {\n        mods = getMods(keys);\n        key = keys[keys.length - 1];\n      }\n\n      key = code(key);\n\n      if (scope === undefined) {\n        scope = getScope();\n      }\n      if (!_handlers[key]) {\n        return;\n      }\n      for (i = 0; i < _handlers[key].length; i++) {\n        obj = _handlers[key][i];\n        // only clear handlers if correct scope and mods match\n        if (obj.scope === scope && compareArray(obj.mods, mods)) {\n          _handlers[key][i] = {};\n        }\n      }\n    }\n  };\n\n  // Returns true if the key with code 'keyCode' is currently down\n  // Converts strings into key codes.\n  function isPressed(keyCode) {\n      if (typeof(keyCode)=='string') {\n        keyCode = code(keyCode);\n      }\n      return index(_downKeys, keyCode) != -1;\n  }\n\n  function getPressedKeyCodes() {\n      return _downKeys.slice(0);\n  }\n\n  function filter(event){\n    var tagName = (event.target || event.srcElement).tagName;\n    // ignore keypressed in any elements that support keyboard data input\n    return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');\n  }\n\n  // initialize key.<modifier> to false\n  for(k in _MODIFIERS) assignKey[k] = false;\n\n  // set current scope (default 'all')\n  function setScope(scope){ _scope = scope || 'all' };\n  function getScope(){ return _scope || 'all' };\n\n  // delete all handlers for a given scope\n  function deleteScope(scope){\n    var key, handlers, i;\n\n    for (key in _handlers) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length; ) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);\n        else i++;\n      }\n    }\n  };\n\n  // abstract key logic for assign and unassign\n  function getKeys(key) {\n    var keys;\n    key = key.replace(/\\s/g, '');\n    keys = key.split(',');\n    if ((keys[keys.length - 1]) == '') {\n      keys[keys.length - 2] += ',';\n    }\n    return keys;\n  }\n\n  // abstract mods logic for assign and unassign\n  function getMods(key) {\n    var mods = key.slice(0, key.length - 1);\n    for (var mi = 0; mi < mods.length; mi++)\n    mods[mi] = _MODIFIERS[mods[mi]];\n    return mods;\n  }\n\n  // cross-browser events\n  function addEvent(object, event, method) {\n    if (object.addEventListener)\n      object.addEventListener(event, method, false);\n    else if(object.attachEvent)\n      object.attachEvent('on'+event, function(){ method(window.event) });\n  };\n\n  // set the handlers globally on document\n  addEvent(document, 'keydown', function(event) { dispatch(event) }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48\n  addEvent(document, 'keyup', clearModifier);\n\n  // reset modifiers to false whenever the window is (re)focused.\n  addEvent(window, 'focus', resetModifiers);\n\n  // store previously defined key\n  var previousKey = global.key;\n\n  // restore previously defined key and return reference to our key object\n  function noConflict() {\n    var k = global.key;\n    global.key = previousKey;\n    return k;\n  }\n\n  // set window.key and window.key.set/get/deleteScope, and the default filter\n  global.key = assignKey;\n  global.key.setScope = setScope;\n  global.key.getScope = getScope;\n  global.key.deleteScope = deleteScope;\n  global.key.filter = filter;\n  global.key.isPressed = isPressed;\n  global.key.getPressedKeyCodes = getPressedKeyCodes;\n  global.key.noConflict = noConflict;\n  global.key.unbind = unbindKey;\n\n  if(typeof module !== 'undefined') module.exports = assignKey;\n\n})(this);\n","import { EventEmitter2, Listener } from 'eventemitter2'\nimport { CollisionLayer } from './models/collisionLayer'\nimport { AbstractCommand, COMMAND_TYPE } from './models/command'\nimport { GameData } from './models/game'\nimport { IMutation, IRule } from './models/rule'\nimport { GameSound } from './models/sound'\nimport { GameSprite } from './models/tile'\nimport { SpriteBitSet } from './spriteBitSet'\nimport { _flatten, Optional, resetRandomSeed, RULE_DIRECTION, setAddAll, setDifference, setEquals } from './util'\n\ninterface ICollisionLayerState {\n    readonly wantsToMove: Optional<RULE_DIRECTION>\n    readonly sprite: GameSprite\n}\n\ninterface ITickResult {\n    changedCells: Set<Cell>,\n    soundToPlay: Optional<GameSound>,\n    messageToShow: Optional<string>,\n    didWinGame: boolean,\n    didLevelChange: boolean,\n    wasAgainTick: boolean\n}\n\ntype Snapshot = Array<Array<Set<GameSprite>>>\n\n/**\n * The state of sprites in one position of the current level being played.\n *\n * This stores all the sprites and which direction those sprites want to move.\n *\n * The [[TerminalUI]] uses this object to render and the [[GameEngine]] uses this to maintain the state\n * of one position of the current level.\n */\nexport class Cell {\n    public readonly rowIndex: number\n    public readonly colIndex: number\n    public readonly spriteBitSet: SpriteBitSet\n    private readonly level: Optional<Level>\n    private readonly state: Map<CollisionLayer, ICollisionLayerState>\n    private cacheCollisionLayers: CollisionLayer[]\n    private cachedKeyValue: Optional<string>\n\n    constructor(level: Optional<Level>, sprites: Set<GameSprite>, rowIndex: number, colIndex: number) {\n        this.level = level\n        this.rowIndex = rowIndex\n        this.colIndex = colIndex\n        this.state = new Map()\n        this.cacheCollisionLayers = []\n        this.spriteBitSet = new SpriteBitSet(sprites)\n        this.cachedKeyValue = null\n\n        for (const sprite of sprites) {\n            this._setWantsToMove(sprite, RULE_DIRECTION.STATIONARY)\n        }\n    }\n    public _setWantsToMove(sprite: GameSprite, wantsToMove: Optional<RULE_DIRECTION>) {\n        const collisionLayer = sprite.getCollisionLayer()\n        const { wantsToMove: cellWantsToMove, sprite: cellSprite } = this.getStateForCollisionLayer(collisionLayer)\n        const didActuallyChangeDir = cellWantsToMove !== wantsToMove\n        const didActuallyChangeSprite = cellSprite !== sprite\n        // replace the sprite in the bitSet\n        if (cellSprite !== sprite) {\n            if (cellSprite) {\n                throw new Error(`BUG: Should have already been removed?`)\n                // this.spriteBitSet.remove(cellSprite)\n            }\n            this.spriteBitSet.add(sprite)\n        }\n\n        this._setState(collisionLayer, sprite, wantsToMove)\n        // call replaceSprite only **after** we updated the Cell\n        if (cellSprite !== sprite) {\n            this.replaceSpriteInLevel(cellSprite, sprite)\n        }\n        return didActuallyChangeSprite || didActuallyChangeDir\n    }\n    public _deleteWantsToMove(sprite: GameSprite) {\n        // There may be other sprites in the same ... oh wait, no that's not possible.\n        const collisionLayer = sprite.getCollisionLayer()\n        const cellSprite = this.getSpriteByCollisionLayer(collisionLayer)\n        const didActuallyChange = !!cellSprite\n\n        if (cellSprite) {\n            this.spriteBitSet.remove(cellSprite)\n        }\n\n        this._setState(collisionLayer, null, null) // delete the entry\n\n        return didActuallyChange\n    }\n    public setWantsToMoveCollisionLayer(collisionLayer: CollisionLayer, wantsToMove: RULE_DIRECTION) {\n        // Check that there is a sprite for this collision layer\n        const { sprite, wantsToMove: cellWantsToMove } = this.getStateForCollisionLayer(collisionLayer)\n        if (!sprite) {\n            throw new Error(`BUG: No sprite for collision layer. Cannot set direction.\\n${collisionLayer.toString()}`)\n        }\n        const didActuallyChange = cellWantsToMove !== wantsToMove\n\n        this._setState(collisionLayer, sprite, wantsToMove)\n\n        sprite.updateCell(this, wantsToMove)\n        return didActuallyChange\n    }\n    public getSpriteByCollisionLayer(collisionLayer: CollisionLayer) {\n        const { sprite } = this.getStateForCollisionLayer(collisionLayer)\n        return sprite || null\n    }\n    public getCollisionLayers() {\n        // return [...this._state.keys()]\n        //     .sort((c1, c2) => c1.id - c2.id)\n        return this.cacheCollisionLayers\n    }\n    public getSprites() {\n        // Just pull out the sprite, not the wantsToMoveDir\n        const sprites: GameSprite[] = []\n        const collisionLayers = this.getCollisionLayers()\n        for (const collisionLayer of collisionLayers) {\n            const sprite = this.getSpriteByCollisionLayer(collisionLayer)\n            if (sprite) {\n                sprites.push(sprite)\n            }\n        }\n        return sprites.reverse() // reversed so we render sprites properly\n    }\n    public getSpritesAsSet() {\n        // Just pull out the sprite, not the wantsToMoveDir\n        const sprites = new Set<GameSprite>()\n        for (const { sprite } of this.state.values()) {\n            sprites.add(sprite)\n        }\n        return sprites\n    }\n    public getSpriteAndWantsToMoves() {\n        // Just pull out the sprite, not the wantsToMoveDir\n        // Retur na new set so we can mutate it later\n        const map = new Map()\n        for (const collisionLayer of this.getCollisionLayers()) {\n            const { sprite, wantsToMove } = this.getStateForCollisionLayer(collisionLayer)\n            map.set(sprite, wantsToMove)\n        }\n        return map\n    }\n    public getCollisionLayerWantsToMove(collisionLayer: CollisionLayer) {\n        const { wantsToMove } = this.getStateForCollisionLayer(collisionLayer)\n        return wantsToMove || null\n    }\n    public hasSprite(sprite: GameSprite) {\n        const cellSprite = this.getSpriteByCollisionLayer(sprite.getCollisionLayer())\n        return sprite === cellSprite\n    }\n    public getNeighbor(direction: string) {\n        switch (direction) {\n            case RULE_DIRECTION.UP:\n                return this.getRelativeNeighbor(-1, 0)\n            case RULE_DIRECTION.DOWN:\n                return this.getRelativeNeighbor(1, 0)\n            case RULE_DIRECTION.LEFT:\n                return this.getRelativeNeighbor(0, -1)\n            case RULE_DIRECTION.RIGHT:\n                return this.getRelativeNeighbor(0, 1)\n            default:\n                throw new Error(`BUG: Unsupported direction \"${direction}\"`)\n        }\n    }\n    public getWantsToMove(sprite: GameSprite) {\n        return this.getCollisionLayerWantsToMove(sprite.getCollisionLayer())\n    }\n    public hasCollisionWithSprite(otherSprite: GameSprite) {\n        return !!this.getCollisionLayerWantsToMove(otherSprite.getCollisionLayer())\n    }\n    public clearWantsToMove(sprite: GameSprite) {\n        this._setWantsToMove(sprite, RULE_DIRECTION.STATIONARY)\n        sprite.updateCell(this, RULE_DIRECTION.STATIONARY)\n    }\n    public addSprite(sprite: GameSprite, wantsToMove: Optional<RULE_DIRECTION>) {\n        let didActuallyChange = false\n        // If we already have a sprite in that collision layer then we need to remove it\n        const prevSprite = this.getSpriteByCollisionLayer(sprite.getCollisionLayer())\n        const prevWantsToMove = this.getCollisionLayerWantsToMove(sprite.getCollisionLayer())\n        if (prevSprite && prevSprite !== sprite) {\n            this.removeSprite(prevSprite)\n        }\n        if (wantsToMove) {\n            didActuallyChange = this._setWantsToMove(sprite, wantsToMove)\n        } else if (!this.hasSprite(sprite)) {\n            wantsToMove = prevWantsToMove || RULE_DIRECTION.STATIONARY // try to preserve the wantsToMove\n            didActuallyChange = this._setWantsToMove(sprite, wantsToMove)\n        }\n        sprite.addCell(this, wantsToMove)\n        return didActuallyChange\n    }\n    public updateSprite(sprite: GameSprite, wantsToMove: RULE_DIRECTION) {\n        // Copy/pasta from addSprite except it calls updateCell\n        let didActuallyChange = false\n        // If we already have a sprite in that collision layer then we need to remove it\n        const prevSprite = this.getSpriteByCollisionLayer(sprite.getCollisionLayer())\n        if (prevSprite !== sprite) {\n            throw new Error(`BUG: Should not be trying to update the direction of a sprite that is not in the cell`)\n        }\n        if (wantsToMove) {\n            didActuallyChange = this._setWantsToMove(sprite, wantsToMove)\n        } else if (!this.hasSprite(sprite)) {\n            throw new Error(`BUG: sprite should already be in the cell since we are updating it`)\n        }\n        sprite.updateCell(this, wantsToMove)\n        return didActuallyChange\n    }\n    public removeSprite(sprite: GameSprite) {\n        const didActuallyChange = this._deleteWantsToMove(sprite)\n        sprite.removeCell(this)\n        return didActuallyChange\n    }\n    public toString() {\n        return `Cell [${this.rowIndex}][${this.colIndex}] ${[...this.getSpriteAndWantsToMoves().entries()].map(([sprite, wantsToMove]) => `${wantsToMove} ${sprite.getName()}`).join(' ')}`\n    }\n    public toKey() {\n        if (!this.cachedKeyValue) {\n            this.cachedKeyValue = [...this.state.values()].map(({ sprite, wantsToMove }) => `${wantsToMove} ${sprite.getName()}`).join(' ')\n            // this.cachedKeyValue = [...this.getSpriteAndWantsToMoves().entries()].map(([sprite, wantsToMove]) => `${wantsToMove} ${sprite.getName()}`).join(' ')\n        }\n        return this.cachedKeyValue\n    }\n    public toSnapshot() {\n        return this.getSpritesAsSet()\n    }\n    public fromSnapshot(newSprites: Set<GameSprite>) {\n        const currentSprites = this.getSpritesAsSet()\n        const spritesToRemove = setDifference(currentSprites, newSprites)\n        const spritesToAdd = setDifference(newSprites, currentSprites)\n        // Remove Sprites\n        this.removeSprites(spritesToRemove)\n        // Add Sprites\n        this.addSprites(spritesToAdd)\n    }\n    // This method is replaced by LetterCells (because they are not boud to a level)\n    protected replaceSpriteInLevel(cellSprite: Optional<GameSprite>, newSprite: GameSprite) {\n        this.getLevel().replaceSprite(this, cellSprite, newSprite)\n    }\n    private _setState(collisionLayer: CollisionLayer, sprite: Optional<GameSprite>, wantsToMove: Optional<RULE_DIRECTION>) {\n        let needsToUpdateCache\n        if (sprite) {\n            needsToUpdateCache = this.cacheCollisionLayers.indexOf(collisionLayer) < 0\n            this.state.set(collisionLayer, { wantsToMove, sprite })\n        } else {\n            this.state.delete(collisionLayer)\n            needsToUpdateCache = true\n        }\n\n        if (needsToUpdateCache) {\n            // Update the collisionLayer Cache\n            this.cacheCollisionLayers = [...this.state.keys()]\n            .sort((c1, c2) => c1.id - c2.id)\n        }\n        this.invalidateKey()\n    }\n    private getLevel() {\n        if (!this.level) {\n            throw new Error(`BUG: we need an engine Level in order to find neighbors. It is optional for letters in messages`)\n        }\n        return this.level\n    }\n    private getStateForCollisionLayer(collisionLayer: CollisionLayer) {\n        const state = this.state.get(collisionLayer)\n        if (!state) {\n            return { wantsToMove: null, sprite: null }\n        }\n        return state\n    }\n\n    private getRelativeNeighbor(y: number, x: number) {\n        return this.getLevel().getCellOrNull(this.rowIndex + y, this.colIndex + x)\n    }\n    private removeSprites(sprites: Iterable<GameSprite>) {\n        for (const sprite of sprites) {\n            this.removeSprite(sprite)\n        }\n    }\n    private addSprites(sprites: Iterable<GameSprite>) {\n        for (const sprite of sprites) {\n            this.addSprite(sprite, null)\n        }\n    }\n    private invalidateKey() {\n        this.cachedKeyValue = null\n    }\n}\n\nexport class Level {\n    private cells: Optional<Cell[][]>\n    private rowCache: Array<Optional<SpriteBitSet>>\n    private colCache: Array<Optional<SpriteBitSet>>\n    constructor() {\n        this.rowCache = []\n        this.colCache = []\n    }\n    public setCells(cells: Cell[][]) {\n        this.cells = cells\n    }\n    public getCells() {\n        if (!this.cells) {\n            throw new Error(`BUG: Should have called setCells() first`)\n        }\n        return this.cells\n    }\n    public getCellOrNull(rowIndex: number, colIndex: number) {\n        const row = this.getCells()[rowIndex]\n        if (row) {\n            return row[colIndex]\n        }\n        return null\n    }\n    public getCell(rowIndex: number, colIndex: number) {\n        // Skip error checks for performance\n        return this.getCells()[rowIndex][colIndex]\n    }\n    public replaceSprite(cell: Cell, oldSprite: Optional<GameSprite>, newSprite: Optional<GameSprite>) {\n        // When a new Cell is instantiated it will call this method but `this.cells` is not defined yet\n        if (this.cells) {\n            // Invalidate the row/column cache. It will be rebuilt when requested\n            this.rowCache[cell.rowIndex] = null\n            this.colCache[cell.colIndex] = null\n        }\n    }\n    public rowContainsSprites(rowIndex: number, spritesPresent: SpriteBitSet, anySpritesPresent: SpriteBitSet) {\n        let cache = this.rowCache[rowIndex]\n        if (!cache) {\n            cache = this.computeRowCache(rowIndex)\n            this.rowCache[rowIndex] = cache\n        }\n        return cache.containsAll(spritesPresent) && anySpritesPresent.isEmpty() ? true : cache.containsAny(anySpritesPresent)\n    }\n    public colContainsSprites(colIndex: number, sprites: SpriteBitSet, anySpritesPresent: SpriteBitSet) {\n        let cache = this.colCache[colIndex]\n        if (!cache) {\n            cache = this.computeColCache(colIndex)\n            this.colCache[colIndex] = cache\n        }\n        return cache.containsAll(sprites) && anySpritesPresent.isEmpty() ? true : cache.containsAny(anySpritesPresent)\n    }\n    private computeRowCache(rowIndex: number) {\n        const cols = this.getCells()[0].length\n        const bitSets = []\n        for (let index = 0; index < cols; index++) {\n            bitSets.push(this.getCell(rowIndex, index).spriteBitSet)\n        }\n        return (new SpriteBitSet()).union(bitSets)\n    }\n    private computeColCache(colIndex: number) {\n        const rows = this.getCells().length\n        const bitSets = []\n        for (let index = 0; index < rows; index++) {\n            bitSets.push(this.getCell(index, colIndex).spriteBitSet)\n        }\n        return (new SpriteBitSet()).union(bitSets)\n    }\n}\n\n/**\n * Internal class that ise used to maintain the state of a level.\n *\n * This should not be called directly. Instead, use [[GameEngine]] .\n */\nexport class LevelEngine extends EventEmitter2 {\n    public readonly gameData: GameData\n    public pendingPlayerWantsToMove: Optional<RULE_DIRECTION>\n    public hasAgainThatNeedsToRun: boolean\n    private currentLevel: Optional<Level>\n    private tempOldLevel: Optional<Level>\n    private undoStack: Snapshot[]\n\n    constructor(gameData: GameData) {\n        super()\n        this.gameData = gameData\n        this.hasAgainThatNeedsToRun = false\n        this.undoStack = []\n    }\n\n    public setLevel(levelNum: number) {\n        this.undoStack = []\n        this.gameData.clearCaches()\n\n        const levelData = this.gameData.levels[levelNum]\n        if (!levelData) {\n            throw new Error(`Invalid levelNum: ${levelNum}`)\n        }\n        if (process.env.NODE_ENV === 'development') {\n            levelData.__incrementCoverage()\n        }\n        resetRandomSeed()\n\n        const levelSprites = levelData.getRows().map((row) => {\n            return row.map((col) => {\n                const sprites = new Set(col.getSprites())\n                const backgroundSprite = this.gameData.getMagicBackgroundSprite()\n                if (backgroundSprite) {\n                    sprites.add(backgroundSprite)\n                }\n                return sprites\n            })\n        })\n\n        // Clone the board because we will be modifying it\n        this._setLevel(levelSprites)\n\n        this.takeSnapshot(this.createSnapshot())\n\n        // Return the cells so the UI can listen to when they change\n        return this.getCells()\n    }\n\n    public setMessageLevel(sprites: Array<Array<Set<GameSprite>>>) {\n        this.tempOldLevel = this.currentLevel\n        this._setLevel(sprites)\n    }\n\n    public restoreFromMessageLevel() {\n        this.currentLevel = this.tempOldLevel\n        this.tempOldLevel = null\n        // this.setLevel(this.tempOldLevel)\n    }\n\n    public getCurrentLevel() {\n        if (this.currentLevel) {\n            return this.currentLevel\n        } else {\n            throw new Error(`BUG: There is no current level. Maybe it is a message level or maybe setLevel was never called`)\n        }\n    }\n\n    public toSnapshot() {\n        return this.getCurrentLevel().getCells().map((row) => {\n            return row.map((cell) => {\n                const ret: string[] = []\n                cell.getSpriteAndWantsToMoves().forEach((wantsToMove, sprite) => {\n                    ret.push(`${wantsToMove} ${sprite.getName()}`)\n                })\n                return ret\n            })\n        })\n    }\n\n    public tick() {\n        if (process.env.LOG_LEVEL === 'debug') {\n            console.error(``) // tslint:disable-line:no-console\n        }\n\n        if (this.hasAgainThatNeedsToRun) {\n            // run the AGAIN rules\n            this.hasAgainThatNeedsToRun = false // let the .tick() make it true\n        }\n        const ret = this.tickNormal()\n        // TODO: Handle the commands like RESTART, CANCEL, WIN at this point\n        let soundToPlay: Optional<GameSound> = null\n        let messageToShow: Optional<string> = null\n        let hasWinCommand = false\n        let hasRestart = false\n        for (const command of ret.commands) {\n            switch (command.getType()) {\n                case COMMAND_TYPE.RESTART:\n                    hasRestart = true\n                    break\n                case COMMAND_TYPE.SFX:\n                    soundToPlay = command.getSound()\n                    break\n                case COMMAND_TYPE.MESSAGE:\n                    this.hasAgainThatNeedsToRun = false // make sure we won't be waiting on another tick\n                    messageToShow = command.getMessage()\n                    break\n                case COMMAND_TYPE.WIN:\n                    hasWinCommand = true\n                    break\n                default:\n                    // console.error(`BUG: Unsupported command \"${command.getType()}\"`) // tslint:disable-line:no-console\n            }\n        }\n        if (process.env.LOG_LEVEL === 'debug') {\n            console.error(`checking win condition.`) // tslint:disable-line:no-console\n        }\n        if (this.hasAgainThatNeedsToRun) {\n            if (process.env.LOG_LEVEL === 'debug') {\n                console.error(`AGAIN command executed, with changes detected - will execute another turn.`) // tslint:disable-line:no-console\n            }\n        }\n\n        return {\n            changedCells: new Set(ret.changedCells.keys()),\n            soundToPlay,\n            messageToShow,\n            hasRestart,\n            isWinning: hasWinCommand || this.isWinning()\n        }\n    }\n\n    public hasAgain() {\n        return this.hasAgainThatNeedsToRun\n    }\n\n    public press(direction: RULE_DIRECTION) {\n        // Should disable keypresses if `AGAIN` is running.\n        // It is commented because the didSpritesChange logic is not correct.\n        // a rule might add a sprite, and then another rule might remove a sprite.\n        // We need to compare the set of sprites before and after ALL rules ran.\n        // This will likely be implemented as part of UNDO or CHECKPOINT.\n        // if (!this.hasAgain()) {\n        this.pendingPlayerWantsToMove = direction\n        // }\n    }\n    public pressRestart() {\n        // Add the initial checkpoint to the top (rather than clearing the stack)\n        // so the player can still \"UNDO\" after pressing \"RESTART\"\n        const snapshot = this.undoStack[0]\n        this.undoStack.push(snapshot)\n        this.applySnapshot(snapshot)\n    }\n    public pressUndo() {\n        const snapshot = this.undoStack.pop()\n        if (snapshot && this.undoStack.length > 0) { // the 0th entry is the initial load of the level\n            this.applySnapshot(snapshot)\n        } else if (snapshot) {\n            // oops, put the snapshot back on the stack\n            this.undoStack.push(snapshot)\n        }\n    }\n\n    private _setLevel(levelSprites: Array<Array<Set<GameSprite>>>) {\n        const level = new Level()\n        this.currentLevel = level\n        const spriteCells = levelSprites.map((row, rowIndex) => {\n            return row.map((sprites, colIndex) => {\n                const backgroundSprite = this.gameData.getMagicBackgroundSprite()\n                if (backgroundSprite) {\n                    sprites.add(backgroundSprite)\n                }\n                return new Cell(level, sprites, rowIndex, colIndex)\n            })\n        })\n        level.setCells(spriteCells)\n        // link up all the cells. Loop over all the sprites\n        // in case they are NO tiles (so the cell is included)\n        const batchCells: Map<string, Cell[]> = new Map()\n        function spriteSetToKey(sprites: Set<GameSprite>) {\n            const key = []\n            for (const spriteName of [...sprites].map((sprite) => sprite.getName()).sort()) {\n                key.push(spriteName)\n            }\n            return key.join(' ')\n        }\n        const allCells = this.getCells()\n        // But first, fill up any empty condition brackets with ALL THE CELLS\n        for (const rule of this.gameData.rules) {\n            rule.addCellsToEmptyRules(allCells)\n        }\n        for (const cell of allCells) {\n            const key = spriteSetToKey(cell.getSpritesAsSet())\n            let batch = batchCells.get(key)\n            if (!batch) {\n                batch = []\n                batchCells.set(key, batch)\n            }\n            batch.push(cell)\n        }\n        // Print progress while loading up the Cells\n        let i = 0\n        for (const [key, cells] of batchCells) {\n            if ((batchCells.size > 100 && i % 10 === 0) || cells.length > 100) {\n                this.emit('loading-cells', {\n                    cellStart: i,\n                    cellEnd: i + cells.length,\n                    cellTotal: allCells.length,\n                    key\n                })\n            }\n            // All Cells contain the same set of sprites so just pull out the 1st one\n            for (const sprite of this.gameData.objects) {\n                const cellSprites = cells[0].getSpritesAsSet()\n                const hasSprite = cellSprites.has(sprite)\n                if (hasSprite || sprite.hasNegationTileWithModifier()) {\n                    if (hasSprite) {\n                        sprite.addCells(sprite, cells, RULE_DIRECTION.STATIONARY)\n                    } else {\n                        sprite.removeCells(sprite, cells)\n                    }\n                }\n            }\n            i += cells.length\n        }\n        return level\n    }\n\n    private getCells() {\n        return _flatten(this.getCurrentLevel().getCells())\n    }\n\n    private tickUpdateCells() {\n        if (process.env.LOG_LEVEL === 'debug') {\n            console.error(`applying rules`) // tslint:disable-line:no-console\n        }\n        return this._tickUpdateCells(this.gameData.rules.filter((r) => !r.isLate()))\n    }\n\n    private tickUpdateCellsLate() {\n        if (process.env.LOG_LEVEL === 'debug') {\n            console.error(`applying late rules`) // tslint:disable-line:no-console\n        }\n        return this._tickUpdateCells(this.gameData.rules.filter((r) => r.isLate()))\n    }\n\n    private _tickUpdateCells(rules: Iterable<IRule>) {\n        const changedMutations: Set<IMutation> = new Set()\n        const evaluatedRules: IRule[] = []\n        if (!this.currentLevel) {\n            throw new Error(`BUG: Level Cells do not exist yet`)\n        }\n        for (const rule of rules) {\n            const cellMutations = rule.evaluate(this.currentLevel, false/*evaluate all rules*/)\n            if (cellMutations.length > 0) {\n                evaluatedRules.push(rule)\n            }\n            for (const mutation of cellMutations) {\n                changedMutations.add(mutation)\n            }\n            // if (process.env['LOG_LEVEL'] === 'debug') {\n            //     if (rule.timesRan && rule.totalTimeMs) {\n            //         const avg = rule.totalTimeMs // Math.round(rule.totalTimeMs / rule.timesRan)\n            //         if (avg > 100) {\n            //             console.error(`Took:${avg}ms (${cellMutations.length} changed) ${rule.toString()}`) // tslint:disable-line:no-console\n            //         }\n            //     }\n            //     // if (cellMutations.length > 0) {\n            //     //     console.error(`Took:${rule.totalTimeMs}ms (${cellMutations.length} changed) ${rule.toString()}`) // tslint:disable-line:no-console\n            //     // }\n            // }\n        }\n\n        // We may have mutated the same cell 4 times (e.g. [Player]->[>Player]) so consolidate\n        const changedCells = new Set<Cell>()\n        const commands = new Set<AbstractCommand>()\n        // let didSomeSpriteChange = false\n        for (const mutation of changedMutations) {\n            // if (mutation.getDidSpritesChange()) {\n            //     didSomeSpriteChange = true\n            // }\n            if (mutation.hasCell()) {\n                changedCells.add(mutation.getCell())\n            } else {\n                commands.add(mutation.getCommand())\n            }\n            // if (!changedCells.has(mutation.cell)) {\n            //     changedCells.set(mutation.cell, mutation.didSpritesChange)\n            // }\n        }\n        return { evaluatedRules, changedCells, commands/*, didSomeSpriteChange: didSomeSpriteChange*/ }\n    }\n\n    private tickMoveSprites(changedCells: Set<Cell>) {\n        const movedCells: Set<Cell> = new Set()\n        // Loop over all the cells, see if a Rule matches, apply the transition, and notify that cells changed\n        let somethingChanged\n        do {\n            somethingChanged = false\n            for (const cell of changedCells) {\n                for (const [sprite, wantsToMove] of cell.getSpriteAndWantsToMoves()) {\n\n                    switch (wantsToMove) {\n                        case RULE_DIRECTION.STATIONARY:\n                            // nothing to do\n                            break\n                        case RULE_DIRECTION.ACTION:\n                            // just clear the wantsToMove flag\n                            somethingChanged = true\n                            cell.clearWantsToMove(sprite)\n                            break\n                        case RULE_DIRECTION.UP:\n                        case RULE_DIRECTION.DOWN:\n                        case RULE_DIRECTION.LEFT:\n                        case RULE_DIRECTION.RIGHT:\n                            const neighbor = cell.getNeighbor(wantsToMove)\n                            // Make sure\n                            if (neighbor && !neighbor.hasCollisionWithSprite(sprite)) {\n                                cell.removeSprite(sprite)\n                                neighbor.addSprite(sprite, RULE_DIRECTION.STATIONARY)\n                                movedCells.add(neighbor)\n                                movedCells.add(cell)\n                                somethingChanged = true\n                                // Don't delete until we are sure none of the sprites want to move\n                                // changedCells.delete(cell)\n                            } else {\n                                // Clear the wantsToMove flag LATER if we hit a wall (a sprite in the same collisionLayer) or are at the end of the map\n                                // We do this later because we are looping as long as something changed\n                                // cell.clearWantsToMove(sprite)\n                            }\n                            break\n                        default:\n                            throw new Error(`BUG: wantsToMove should have been handled earlier`)\n                    }\n                }\n            }\n        } while (somethingChanged)\n\n        // Clear the wantsToMove from all remaining cells\n        for (const cell of changedCells) {\n            for (const [sprite] of cell.getSpriteAndWantsToMoves()) {\n                cell.clearWantsToMove(sprite)\n            }\n        }\n        return movedCells\n    }\n\n    private tickNormal() {\n        let changedCellMutations = new Set()\n        const initialSnapshot = this.createSnapshot()\n        if (this.pendingPlayerWantsToMove) {\n            this.takeSnapshot(initialSnapshot)\n\n            if (process.env.LOG_LEVEL === 'debug') {\n                console.error(`=======================`) // tslint:disable-line:no-console\n                console.error(`Turn starts with input of ${this.pendingPlayerWantsToMove.toLowerCase()}.`) // tslint:disable-line:no-console\n            }\n            const t = this.gameData.getPlayer()\n            for (const cell of t.getCellsThatMatch()) {\n                for (const sprite of t.getSpritesThatMatch(cell)) {\n                    cell.updateSprite(sprite, this.pendingPlayerWantsToMove)\n                    changedCellMutations.add(cell)\n                }\n            }\n            this.pendingPlayerWantsToMove = null\n        } else {\n            if (process.env.LOG_LEVEL === 'debug') {\n                console.error(`Turn starts with no input.`) // tslint:disable-line:no-console\n            }\n        }\n\n        const { changedCells: changedCellMutations2, evaluatedRules, commands } = this.tickUpdateCells()\n        changedCellMutations = setAddAll(changedCellMutations, changedCellMutations2)\n\n        // Continue evaluating again rules only when some sprites have changed\n        // The didSpritesChange logic is not correct.\n        // a rule might add a sprite, and then another rule might remove a sprite.\n        // We need to compare the set of sprites before and after ALL rules ran.\n        // This will likely be implemented as part of UNDO or CHECKPOINT.\n        const movedCells = this.tickMoveSprites(new Set<Cell>(changedCellMutations.keys()))\n        const { changedCells: changedCellsLate, evaluatedRules: evaluatedRulesLate, commands: commandsLate } = this.tickUpdateCellsLate()\n        const allCommands = [...commands, ...commandsLate]\n        const didCancel = !!allCommands.filter((c) => c.getType() === COMMAND_TYPE.CANCEL)[0]\n        if (didCancel) {\n            this.hasAgainThatNeedsToRun = false\n            if (this.undoStack.length > 0) {\n                this.applySnapshot(this.undoStack[this.undoStack.length - 1])\n            }\n            return {\n                changedCells: new Set(),\n                commands: new Set(),\n                evaluatedRules\n            }\n        }\n        const didCheckpoint = !!allCommands.find((c) => c.getType() === COMMAND_TYPE.CHECKPOINT)\n        if (didCheckpoint) {\n            this.undoStack = []\n            this.takeSnapshot(this.createSnapshot())\n        }\n        // set this only if we did not CANCEL and if some cell changed\n        const changedCells = setAddAll(setAddAll(changedCellMutations, changedCellsLate), movedCells)\n        if (allCommands.find((c) => c.getType() === COMMAND_TYPE.AGAIN)) {\n            // Compare all the cells to the top of the undo stack. If it does not differ\n            this.hasAgainThatNeedsToRun = this.doSnapshotsDiffer(initialSnapshot, this.createSnapshot())\n        }\n        return {\n            changedCells,\n            evaluatedRules: evaluatedRules.concat(evaluatedRulesLate),\n            commands: allCommands\n        }\n    }\n\n    private isWinning() {\n        let conditionsSatisfied = this.gameData.winConditions.length > 0 // true\n        this.gameData.winConditions.forEach((winCondition) => {\n            if (!winCondition.isSatisfied(this.getCells())) {\n                conditionsSatisfied = false\n            }\n        })\n        return conditionsSatisfied\n    }\n\n    // Used for UNDO and RESTART\n    private createSnapshot() {\n        return this.getCurrentLevel().getCells().map((row) => row.map((cell) => cell.toSnapshot()))\n    }\n    private takeSnapshot(snapshot: Snapshot) {\n        this.undoStack.push(snapshot)\n    }\n    private applySnapshot(snpashot: Snapshot) {\n        const cells = this.getCurrentLevel().getCells()\n        for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {\n            const row = cells[rowIndex]\n            const snapshotRow = snpashot[rowIndex]\n            for (let colIndex = 0; colIndex < row.length; colIndex++) {\n                const cell = row[colIndex]\n                const state = snapshotRow[colIndex]\n                cell.fromSnapshot(state)\n            }\n        }\n    }\n    private doSnapshotsDiffer(snapshot1: Snapshot, snapshot2: Snapshot) {\n        for (let rowIndex = 0; rowIndex < snapshot1.length; rowIndex++) {\n            for (let colIndex = 0; colIndex < snapshot1[0].length; colIndex++) {\n                const sprites1 = snapshot1[rowIndex][colIndex]\n                const sprites2 = snapshot2[rowIndex][colIndex]\n                if (!setEquals(sprites1, sprites2)) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n}\n\nexport interface ILoadingCellsEvent {\n    cellStart: number,\n    cellEnd: number,\n    cellTotal: number,\n    key: string\n}\nexport interface ILoadingProgressHandler extends Listener {\n    (info: ILoadingCellsEvent): void\n}\n\nexport type CellSaveState = string[][][]\n\n/**\n * Maintains the state of the game. Here is an example flow:\n *\n * ```js\n * const engine = new GameEngine(gameData)\n * engine.setLevel(0)\n * engine.pressRight()\n * engine.tick()\n * engine.tick()\n * engine.pressUp()\n * engine.tick()\n * engine.pressUndo()\n * engine.tick()\n * ```\n */\nexport class GameEngine {\n    private levelEngine: LevelEngine\n    private currentLevelNum: number\n    private isFirstTick: boolean\n    private messageShownAndWaitingForActionPress: boolean\n    constructor(gameData: GameData) {\n        this.isFirstTick = true\n        this.currentLevelNum = -1234567\n        this.messageShownAndWaitingForActionPress = false\n\n        this.levelEngine = new LevelEngine(gameData)\n        this.messageShownAndWaitingForActionPress = false\n    }\n    public on(eventName: string, handler: ILoadingProgressHandler) {\n        this.levelEngine.on(eventName, handler)\n    }\n    public getGameData() {\n        return this.levelEngine.gameData\n    }\n    public getCurrentLevelCells() {\n        return this.levelEngine.getCurrentLevel().getCells()\n    }\n    public getCurrentLevel() {\n        return this.getGameData().levels[this.getCurrentLevelNum()]\n    }\n    public getCurrentLevelNum() {\n        return this.currentLevelNum\n    }\n    public hasAgain() {\n        return this.levelEngine.hasAgain()\n    }\n    public setLevel(levelNum: number) {\n        this.messageShownAndWaitingForActionPress = false\n        this.levelEngine.hasAgainThatNeedsToRun = false // clear this so the user can press \"X\"\n        if (this.getGameData().levels[levelNum].isMap()) {\n            this.isFirstTick = true\n            this.levelEngine.setLevel(levelNum)\n        } else {\n            // TODO: no need to set the levelEngine when the current level is a Message\n        }\n        this.currentLevelNum = levelNum\n    }\n    public tick(): ITickResult {\n        // When the current level is a Message, wait until the user presses ACTION\n        if (!this.getCurrentLevel().isMap()) {\n            // Wait until the user presses \"X\" (ACTION)\n            let didWinGameInMessage = false\n            let didLevelChange = false\n            if (this.levelEngine.pendingPlayerWantsToMove === RULE_DIRECTION.ACTION) {\n                didLevelChange = true\n                if (this.currentLevelNum === this.levelEngine.gameData.levels.length - 1) {\n                    didWinGameInMessage = true\n                } else {\n                    this.setLevel(this.currentLevelNum + 1)\n                }\n            }\n            // clear any keys that were pressed\n            this.levelEngine.pendingPlayerWantsToMove = null\n\n            return {\n                changedCells: new Set(),\n                soundToPlay: null,\n                messageToShow: null,\n                didWinGame: didWinGameInMessage,\n                didLevelChange,\n                wasAgainTick: false\n            }\n        }\n        const hasAgain = this.levelEngine.hasAgain()\n        if (this.levelEngine.gameData.metadata.runRulesOnLevelStart && this.isFirstTick) {\n            // don't cancel early\n        } else if (!hasAgain && !(this.levelEngine.gameData.metadata.realtimeInterval || this.levelEngine.pendingPlayerWantsToMove)) {\n            // check if the `require_player_movement` flag is set in the game\n            return {\n                changedCells: new Set(),\n                soundToPlay: null,\n                messageToShow: null,\n                didWinGame: false,\n                didLevelChange: false,\n                wasAgainTick: false\n            }\n        }\n\n        // If we are showing a message then wait until ACTION is pressed\n        if (this.messageShownAndWaitingForActionPress) {\n            if (this.levelEngine.pendingPlayerWantsToMove === RULE_DIRECTION.ACTION) {\n                // render all the cells because we are currently rendering a Message\n                this.messageShownAndWaitingForActionPress = false\n                this.levelEngine.pendingPlayerWantsToMove = null\n                return {\n                    changedCells: new Set(_flatten(this.getCurrentLevelCells())),\n                    soundToPlay: null,\n                    messageToShow: null,\n                    didWinGame: false,\n                    didLevelChange: false,\n                    wasAgainTick: false\n                }\n            } else {\n                // Keep waiting until ACTION is pressed\n                return {\n                    changedCells: new Set(),\n                    soundToPlay: null,\n                    messageToShow: null,\n                    didWinGame: false,\n                    didLevelChange: false,\n                    wasAgainTick: false\n                }\n\n            }\n        }\n\n        const { changedCells, soundToPlay, messageToShow, isWinning, hasRestart } = this.levelEngine.tick()\n        this.isFirstTick = false\n\n        if (hasRestart) {\n            this.pressRestart()\n            return {\n                changedCells: new Set(_flatten(this.getCurrentLevelCells())),\n                soundToPlay: null,\n                messageToShow: null,\n                didWinGame: false,\n                didLevelChange: false,\n                wasAgainTick: false\n            }\n        }\n\n        let didWinGame = false\n        if (isWinning) {\n            if (this.currentLevelNum === this.levelEngine.gameData.levels.length - 1) {\n                didWinGame = true\n            } else {\n                this.setLevel(this.currentLevelNum + 1)\n            }\n        }\n\n        if (messageToShow) {\n            this.messageShownAndWaitingForActionPress = true\n        }\n\n        return {\n            changedCells,\n            soundToPlay,\n            messageToShow,\n            didWinGame,\n            didLevelChange: isWinning,\n            wasAgainTick: hasAgain\n        }\n    }\n\n    public press(direction: RULE_DIRECTION) {\n        return this.levelEngine.press(direction)\n    }\n    public pressUp() {\n        this.levelEngine.press(RULE_DIRECTION.UP)\n    }\n    public pressDown() {\n        this.levelEngine.press(RULE_DIRECTION.DOWN)\n    }\n    public pressLeft() {\n        this.levelEngine.press(RULE_DIRECTION.LEFT)\n    }\n    public pressRight() {\n        this.levelEngine.press(RULE_DIRECTION.RIGHT)\n    }\n    public pressAction() {\n        this.levelEngine.press(RULE_DIRECTION.ACTION)\n    }\n\n    public pressRestart() {\n        this.isFirstTick = true\n        this.levelEngine.pressRestart()\n    }\n    public pressUndo() {\n        this.messageShownAndWaitingForActionPress = false\n        this.levelEngine.pressUndo()\n    }\n\n    // Pixels and Sprites\n    public getSpriteSize() {\n        return this.getGameData().getSpriteSize()\n    }\n\n    public saveSnapshotToJSON(): CellSaveState {\n        return this.getCurrentLevelCells().map((row) => row.map((cell) => [...cell.toSnapshot()].map((s) => s.getName())))\n    }\n\n    public loadSnapshotFromJSON(json: CellSaveState) {\n        json.forEach((rowSave, rowIndex) => {\n            rowSave.forEach((cellSave, colIndex) => {\n                const cell = this.levelEngine.getCurrentLevel().getCell(rowIndex, colIndex)\n\n                const spritesToHave = cellSave.map((spriteName) => {\n                    const sprite = this.getGameData()._getSpriteByName(spriteName)\n                    if (sprite) {\n                        return sprite\n                    } else {\n                        throw new Error(`BUG: Could not find sprite to add named ${spriteName}`)\n                    }\n                })\n\n                cell.fromSnapshot(new Set(spritesToHave))\n            })\n        })\n    }\n\n    public setMessageLevel(sprites: Array<Array<Set<GameSprite>>>) {\n        this.levelEngine.setMessageLevel(sprites)\n    }\n\n    public restoreFromMessageLevel() {\n        this.levelEngine.restoreFromMessageLevel()\n    }\n\n}\n","/*!\r\n * EventEmitter2\r\n * https://github.com/hij1nx/EventEmitter2\r\n *\r\n * Copyright (c) 2013 hij1nx\r\n * Licensed under the MIT license.\r\n */\r\n;!function(undefined) {\r\n\r\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n  };\r\n  var defaultMaxListeners = 10;\r\n\r\n  function init() {\r\n    this._events = {};\r\n    if (this._conf) {\r\n      configure.call(this, this._conf);\r\n    }\r\n  }\r\n\r\n  function configure(conf) {\r\n    if (conf) {\r\n      this._conf = conf;\r\n\r\n      conf.delimiter && (this.delimiter = conf.delimiter);\r\n      this._maxListeners = conf.maxListeners !== undefined ? conf.maxListeners : defaultMaxListeners;\r\n\r\n      conf.wildcard && (this.wildcard = conf.wildcard);\r\n      conf.newListener && (this._newListener = conf.newListener);\r\n      conf.removeListener && (this._removeListener = conf.removeListener);\r\n      conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);\r\n\r\n      if (this.wildcard) {\r\n        this.listenerTree = {};\r\n      }\r\n    } else {\r\n      this._maxListeners = defaultMaxListeners;\r\n    }\r\n  }\r\n\r\n  function logPossibleMemoryLeak(count, eventName) {\r\n    var errorMsg = '(node) warning: possible EventEmitter memory ' +\r\n        'leak detected. ' + count + ' listeners added. ' +\r\n        'Use emitter.setMaxListeners() to increase limit.';\r\n\r\n    if(this.verboseMemoryLeak){\r\n      errorMsg += ' Event name: ' + eventName + '.';\r\n    }\r\n\r\n    if(typeof process !== 'undefined' && process.emitWarning){\r\n      var e = new Error(errorMsg);\r\n      e.name = 'MaxListenersExceededWarning';\r\n      e.emitter = this;\r\n      e.count = count;\r\n      process.emitWarning(e);\r\n    } else {\r\n      console.error(errorMsg);\r\n\r\n      if (console.trace){\r\n        console.trace();\r\n      }\r\n    }\r\n  }\r\n\r\n  function EventEmitter(conf) {\r\n    this._events = {};\r\n    this._newListener = false;\r\n    this._removeListener = false;\r\n    this.verboseMemoryLeak = false;\r\n    configure.call(this, conf);\r\n  }\r\n  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property\r\n\r\n  //\r\n  // Attention, function return type now is array, always !\r\n  // It has zero elements if no any matches found and one or more\r\n  // elements (leafs) if there are matches\r\n  //\r\n  function searchListenerTree(handlers, type, tree, i) {\r\n    if (!tree) {\r\n      return [];\r\n    }\r\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\r\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\r\n    if (i === typeLength && tree._listeners) {\r\n      //\r\n      // If at the end of the event(s) list and the tree has listeners\r\n      // invoke those listeners.\r\n      //\r\n      if (typeof tree._listeners === 'function') {\r\n        handlers && handlers.push(tree._listeners);\r\n        return [tree];\r\n      } else {\r\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\r\n          handlers && handlers.push(tree._listeners[leaf]);\r\n        }\r\n        return [tree];\r\n      }\r\n    }\r\n\r\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\r\n      //\r\n      // If the event emitted is '*' at this part\r\n      // or there is a concrete match at this patch\r\n      //\r\n      if (currentType === '*') {\r\n        for (branch in tree) {\r\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\r\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\r\n          }\r\n        }\r\n        return listeners;\r\n      } else if(currentType === '**') {\r\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\r\n        if(endReached && tree._listeners) {\r\n          // The next element has a _listeners, add it to the handlers.\r\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\r\n        }\r\n\r\n        for (branch in tree) {\r\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\r\n            if(branch === '*' || branch === '**') {\r\n              if(tree[branch]._listeners && !endReached) {\r\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\r\n              }\r\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\r\n            } else if(branch === nextType) {\r\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\r\n            } else {\r\n              // No match on this one, shift into the tree but not in the type array.\r\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\r\n            }\r\n          }\r\n        }\r\n        return listeners;\r\n      }\r\n\r\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\r\n    }\r\n\r\n    xTree = tree['*'];\r\n    if (xTree) {\r\n      //\r\n      // If the listener tree will allow any match for this part,\r\n      // then recursively explore all branches of the tree\r\n      //\r\n      searchListenerTree(handlers, type, xTree, i+1);\r\n    }\r\n\r\n    xxTree = tree['**'];\r\n    if(xxTree) {\r\n      if(i < typeLength) {\r\n        if(xxTree._listeners) {\r\n          // If we have a listener on a '**', it will catch all, so add its handler.\r\n          searchListenerTree(handlers, type, xxTree, typeLength);\r\n        }\r\n\r\n        // Build arrays of matching next branches and others.\r\n        for(branch in xxTree) {\r\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\r\n            if(branch === nextType) {\r\n              // We know the next element will match, so jump twice.\r\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\r\n            } else if(branch === currentType) {\r\n              // Current node matches, move into the tree.\r\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\r\n            } else {\r\n              isolatedBranch = {};\r\n              isolatedBranch[branch] = xxTree[branch];\r\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\r\n            }\r\n          }\r\n        }\r\n      } else if(xxTree._listeners) {\r\n        // We have reached the end and still on a '**'\r\n        searchListenerTree(handlers, type, xxTree, typeLength);\r\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\r\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\r\n      }\r\n    }\r\n\r\n    return listeners;\r\n  }\r\n\r\n  function growListenerTree(type, listener) {\r\n\r\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n\r\n    //\r\n    // Looks for two consecutive '**', if so, don't add the event at all.\r\n    //\r\n    for(var i = 0, len = type.length; i+1 < len; i++) {\r\n      if(type[i] === '**' && type[i+1] === '**') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var tree = this.listenerTree;\r\n    var name = type.shift();\r\n\r\n    while (name !== undefined) {\r\n\r\n      if (!tree[name]) {\r\n        tree[name] = {};\r\n      }\r\n\r\n      tree = tree[name];\r\n\r\n      if (type.length === 0) {\r\n\r\n        if (!tree._listeners) {\r\n          tree._listeners = listener;\r\n        }\r\n        else {\r\n          if (typeof tree._listeners === 'function') {\r\n            tree._listeners = [tree._listeners];\r\n          }\r\n\r\n          tree._listeners.push(listener);\r\n\r\n          if (\r\n            !tree._listeners.warned &&\r\n            this._maxListeners > 0 &&\r\n            tree._listeners.length > this._maxListeners\r\n          ) {\r\n            tree._listeners.warned = true;\r\n            logPossibleMemoryLeak.call(this, tree._listeners.length, name);\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      name = type.shift();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // By default EventEmitters will print a warning if more than\r\n  // 10 listeners are added to it. This is a useful default which\r\n  // helps finding memory leaks.\r\n  //\r\n  // Obviously not all Emitters should be limited to 10. This function allows\r\n  // that to be increased. Set to zero for unlimited.\r\n\r\n  EventEmitter.prototype.delimiter = '.';\r\n\r\n  EventEmitter.prototype.setMaxListeners = function(n) {\r\n    if (n !== undefined) {\r\n      this._maxListeners = n;\r\n      if (!this._conf) this._conf = {};\r\n      this._conf.maxListeners = n;\r\n    }\r\n  };\r\n\r\n  EventEmitter.prototype.event = '';\r\n\r\n\r\n  EventEmitter.prototype.once = function(event, fn) {\r\n    return this._once(event, fn, false);\r\n  };\r\n\r\n  EventEmitter.prototype.prependOnceListener = function(event, fn) {\r\n    return this._once(event, fn, true);\r\n  };\r\n\r\n  EventEmitter.prototype._once = function(event, fn, prepend) {\r\n    this._many(event, 1, fn, prepend);\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.many = function(event, ttl, fn) {\r\n    return this._many(event, ttl, fn, false);\r\n  }\r\n\r\n  EventEmitter.prototype.prependMany = function(event, ttl, fn) {\r\n    return this._many(event, ttl, fn, true);\r\n  }\r\n\r\n  EventEmitter.prototype._many = function(event, ttl, fn, prepend) {\r\n    var self = this;\r\n\r\n    if (typeof fn !== 'function') {\r\n      throw new Error('many only accepts instances of Function');\r\n    }\r\n\r\n    function listener() {\r\n      if (--ttl === 0) {\r\n        self.off(event, listener);\r\n      }\r\n      return fn.apply(this, arguments);\r\n    }\r\n\r\n    listener._origin = fn;\r\n\r\n    this._on(event, listener, prepend);\r\n\r\n    return self;\r\n  };\r\n\r\n  EventEmitter.prototype.emit = function() {\r\n\r\n    this._events || init.call(this);\r\n\r\n    var type = arguments[0];\r\n\r\n    if (type === 'newListener' && !this._newListener) {\r\n      if (!this._events.newListener) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var al = arguments.length;\r\n    var args,l,i,j;\r\n    var handler;\r\n\r\n    if (this._all && this._all.length) {\r\n      handler = this._all.slice();\r\n      if (al > 3) {\r\n        args = new Array(al);\r\n        for (j = 0; j < al; j++) args[j] = arguments[j];\r\n      }\r\n\r\n      for (i = 0, l = handler.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          handler[i].call(this, type);\r\n          break;\r\n        case 2:\r\n          handler[i].call(this, type, arguments[1]);\r\n          break;\r\n        case 3:\r\n          handler[i].call(this, type, arguments[1], arguments[2]);\r\n          break;\r\n        default:\r\n          handler[i].apply(this, args);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.wildcard) {\r\n      handler = [];\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\r\n    } else {\r\n      handler = this._events[type];\r\n      if (typeof handler === 'function') {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          handler.call(this);\r\n          break;\r\n        case 2:\r\n          handler.call(this, arguments[1]);\r\n          break;\r\n        case 3:\r\n          handler.call(this, arguments[1], arguments[2]);\r\n          break;\r\n        default:\r\n          args = new Array(al - 1);\r\n          for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n          handler.apply(this, args);\r\n        }\r\n        return true;\r\n      } else if (handler) {\r\n        // need to make copy of handlers because list can change in the middle\r\n        // of emit call\r\n        handler = handler.slice();\r\n      }\r\n    }\r\n\r\n    if (handler && handler.length) {\r\n      if (al > 3) {\r\n        args = new Array(al - 1);\r\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n      }\r\n      for (i = 0, l = handler.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          handler[i].call(this);\r\n          break;\r\n        case 2:\r\n          handler[i].call(this, arguments[1]);\r\n          break;\r\n        case 3:\r\n          handler[i].call(this, arguments[1], arguments[2]);\r\n          break;\r\n        default:\r\n          handler[i].apply(this, args);\r\n        }\r\n      }\r\n      return true;\r\n    } else if (!this._all && type === 'error') {\r\n      if (arguments[1] instanceof Error) {\r\n        throw arguments[1]; // Unhandled 'error' event\r\n      } else {\r\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\r\n      }\r\n      return false;\r\n    }\r\n\r\n    return !!this._all;\r\n  };\r\n\r\n  EventEmitter.prototype.emitAsync = function() {\r\n\r\n    this._events || init.call(this);\r\n\r\n    var type = arguments[0];\r\n\r\n    if (type === 'newListener' && !this._newListener) {\r\n        if (!this._events.newListener) { return Promise.resolve([false]); }\r\n    }\r\n\r\n    var promises= [];\r\n\r\n    var al = arguments.length;\r\n    var args,l,i,j;\r\n    var handler;\r\n\r\n    if (this._all) {\r\n      if (al > 3) {\r\n        args = new Array(al);\r\n        for (j = 1; j < al; j++) args[j] = arguments[j];\r\n      }\r\n      for (i = 0, l = this._all.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          promises.push(this._all[i].call(this, type));\r\n          break;\r\n        case 2:\r\n          promises.push(this._all[i].call(this, type, arguments[1]));\r\n          break;\r\n        case 3:\r\n          promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));\r\n          break;\r\n        default:\r\n          promises.push(this._all[i].apply(this, args));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.wildcard) {\r\n      handler = [];\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\r\n    } else {\r\n      handler = this._events[type];\r\n    }\r\n\r\n    if (typeof handler === 'function') {\r\n      this.event = type;\r\n      switch (al) {\r\n      case 1:\r\n        promises.push(handler.call(this));\r\n        break;\r\n      case 2:\r\n        promises.push(handler.call(this, arguments[1]));\r\n        break;\r\n      case 3:\r\n        promises.push(handler.call(this, arguments[1], arguments[2]));\r\n        break;\r\n      default:\r\n        args = new Array(al - 1);\r\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n        promises.push(handler.apply(this, args));\r\n      }\r\n    } else if (handler && handler.length) {\r\n      handler = handler.slice();\r\n      if (al > 3) {\r\n        args = new Array(al - 1);\r\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n      }\r\n      for (i = 0, l = handler.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          promises.push(handler[i].call(this));\r\n          break;\r\n        case 2:\r\n          promises.push(handler[i].call(this, arguments[1]));\r\n          break;\r\n        case 3:\r\n          promises.push(handler[i].call(this, arguments[1], arguments[2]));\r\n          break;\r\n        default:\r\n          promises.push(handler[i].apply(this, args));\r\n        }\r\n      }\r\n    } else if (!this._all && type === 'error') {\r\n      if (arguments[1] instanceof Error) {\r\n        return Promise.reject(arguments[1]); // Unhandled 'error' event\r\n      } else {\r\n        return Promise.reject(\"Uncaught, unspecified 'error' event.\");\r\n      }\r\n    }\r\n\r\n    return Promise.all(promises);\r\n  };\r\n\r\n  EventEmitter.prototype.on = function(type, listener) {\r\n    return this._on(type, listener, false);\r\n  };\r\n\r\n  EventEmitter.prototype.prependListener = function(type, listener) {\r\n    return this._on(type, listener, true);\r\n  };\r\n\r\n  EventEmitter.prototype.onAny = function(fn) {\r\n    return this._onAny(fn, false);\r\n  };\r\n\r\n  EventEmitter.prototype.prependAny = function(fn) {\r\n    return this._onAny(fn, true);\r\n  };\r\n\r\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\r\n\r\n  EventEmitter.prototype._onAny = function(fn, prepend){\r\n    if (typeof fn !== 'function') {\r\n      throw new Error('onAny only accepts instances of Function');\r\n    }\r\n\r\n    if (!this._all) {\r\n      this._all = [];\r\n    }\r\n\r\n    // Add the function to the event listener collection.\r\n    if(prepend){\r\n      this._all.unshift(fn);\r\n    }else{\r\n      this._all.push(fn);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  EventEmitter.prototype._on = function(type, listener, prepend) {\r\n    if (typeof type === 'function') {\r\n      this._onAny(type, listener);\r\n      return this;\r\n    }\r\n\r\n    if (typeof listener !== 'function') {\r\n      throw new Error('on only accepts instances of Function');\r\n    }\r\n    this._events || init.call(this);\r\n\r\n    // To avoid recursion in the case that type == \"newListeners\"! Before\r\n    // adding it to the listeners, first emit \"newListeners\".\r\n    if (this._newListener)\r\n       this.emit('newListener', type, listener);\r\n\r\n    if (this.wildcard) {\r\n      growListenerTree.call(this, type, listener);\r\n      return this;\r\n    }\r\n\r\n    if (!this._events[type]) {\r\n      // Optimize the case of one listener. Don't need the extra array object.\r\n      this._events[type] = listener;\r\n    }\r\n    else {\r\n      if (typeof this._events[type] === 'function') {\r\n        // Change to array.\r\n        this._events[type] = [this._events[type]];\r\n      }\r\n\r\n      // If we've already got an array, just add\r\n      if(prepend){\r\n        this._events[type].unshift(listener);\r\n      }else{\r\n        this._events[type].push(listener);\r\n      }\r\n\r\n      // Check for listener leak\r\n      if (\r\n        !this._events[type].warned &&\r\n        this._maxListeners > 0 &&\r\n        this._events[type].length > this._maxListeners\r\n      ) {\r\n        this._events[type].warned = true;\r\n        logPossibleMemoryLeak.call(this, this._events[type].length, type);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  EventEmitter.prototype.off = function(type, listener) {\r\n    if (typeof listener !== 'function') {\r\n      throw new Error('removeListener only takes instances of Function');\r\n    }\r\n\r\n    var handlers,leafs=[];\r\n\r\n    if(this.wildcard) {\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\r\n    }\r\n    else {\r\n      // does not use listeners(), so no side effect of creating _events[type]\r\n      if (!this._events[type]) return this;\r\n      handlers = this._events[type];\r\n      leafs.push({_listeners:handlers});\r\n    }\r\n\r\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\r\n      var leaf = leafs[iLeaf];\r\n      handlers = leaf._listeners;\r\n      if (isArray(handlers)) {\r\n\r\n        var position = -1;\r\n\r\n        for (var i = 0, length = handlers.length; i < length; i++) {\r\n          if (handlers[i] === listener ||\r\n            (handlers[i].listener && handlers[i].listener === listener) ||\r\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0) {\r\n          continue;\r\n        }\r\n\r\n        if(this.wildcard) {\r\n          leaf._listeners.splice(position, 1);\r\n        }\r\n        else {\r\n          this._events[type].splice(position, 1);\r\n        }\r\n\r\n        if (handlers.length === 0) {\r\n          if(this.wildcard) {\r\n            delete leaf._listeners;\r\n          }\r\n          else {\r\n            delete this._events[type];\r\n          }\r\n        }\r\n        if (this._removeListener)\r\n          this.emit(\"removeListener\", type, listener);\r\n\r\n        return this;\r\n      }\r\n      else if (handlers === listener ||\r\n        (handlers.listener && handlers.listener === listener) ||\r\n        (handlers._origin && handlers._origin === listener)) {\r\n        if(this.wildcard) {\r\n          delete leaf._listeners;\r\n        }\r\n        else {\r\n          delete this._events[type];\r\n        }\r\n        if (this._removeListener)\r\n          this.emit(\"removeListener\", type, listener);\r\n      }\r\n    }\r\n\r\n    function recursivelyGarbageCollect(root) {\r\n      if (root === undefined) {\r\n        return;\r\n      }\r\n      var keys = Object.keys(root);\r\n      for (var i in keys) {\r\n        var key = keys[i];\r\n        var obj = root[key];\r\n        if ((obj instanceof Function) || (typeof obj !== \"object\") || (obj === null))\r\n          continue;\r\n        if (Object.keys(obj).length > 0) {\r\n          recursivelyGarbageCollect(root[key]);\r\n        }\r\n        if (Object.keys(obj).length === 0) {\r\n          delete root[key];\r\n        }\r\n      }\r\n    }\r\n    recursivelyGarbageCollect(this.listenerTree);\r\n\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.offAny = function(fn) {\r\n    var i = 0, l = 0, fns;\r\n    if (fn && this._all && this._all.length > 0) {\r\n      fns = this._all;\r\n      for(i = 0, l = fns.length; i < l; i++) {\r\n        if(fn === fns[i]) {\r\n          fns.splice(i, 1);\r\n          if (this._removeListener)\r\n            this.emit(\"removeListenerAny\", fn);\r\n          return this;\r\n        }\r\n      }\r\n    } else {\r\n      fns = this._all;\r\n      if (this._removeListener) {\r\n        for(i = 0, l = fns.length; i < l; i++)\r\n          this.emit(\"removeListenerAny\", fns[i]);\r\n      }\r\n      this._all = [];\r\n    }\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\r\n\r\n  EventEmitter.prototype.removeAllListeners = function(type) {\r\n    if (type === undefined) {\r\n      !this._events || init.call(this);\r\n      return this;\r\n    }\r\n\r\n    if (this.wildcard) {\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\r\n\r\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\r\n        var leaf = leafs[iLeaf];\r\n        leaf._listeners = null;\r\n      }\r\n    }\r\n    else if (this._events) {\r\n      this._events[type] = null;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.listeners = function(type) {\r\n    if (this.wildcard) {\r\n      var handlers = [];\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\r\n      return handlers;\r\n    }\r\n\r\n    this._events || init.call(this);\r\n\r\n    if (!this._events[type]) this._events[type] = [];\r\n    if (!isArray(this._events[type])) {\r\n      this._events[type] = [this._events[type]];\r\n    }\r\n    return this._events[type];\r\n  };\r\n\r\n  EventEmitter.prototype.eventNames = function(){\r\n    return Object.keys(this._events);\r\n  }\r\n\r\n  EventEmitter.prototype.listenerCount = function(type) {\r\n    return this.listeners(type).length;\r\n  };\r\n\r\n  EventEmitter.prototype.listenersAny = function() {\r\n\r\n    if(this._all) {\r\n      return this._all;\r\n    }\r\n    else {\r\n      return [];\r\n    }\r\n\r\n  };\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n     // AMD. Register as an anonymous module.\r\n    define(function() {\r\n      return EventEmitter;\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    // CommonJS\r\n    module.exports = EventEmitter;\r\n  }\r\n  else {\r\n    // Browser global.\r\n    window.EventEmitter2 = EventEmitter;\r\n  }\r\n}();\r\n","import { IGameCode } from './models/BaseForLines'\nimport { HexColor } from './models/colors'\nimport { GameSpritePixels } from './models/tile'\n\nconst letters: Map<string, number[][]> = new Map()\n\nfunction toSprite(source: IGameCode, char: string, pixels: number[][]) {\n    return new GameSpritePixels(source, `letterchar=\"${char}\"`, '', [new HexColor(source, '#000000'), new HexColor(source, '#ffffff')], pixels)\n}\nfunction makeLetter(char: string, pixels: number[][]) {\n    letters.set(char, pixels)\n}\n\nexport function getLetterSprites(source: IGameCode) {\n    const sprites = new Map<string, GameSpritePixels>()\n    for (const [char, pixels] of letters.entries()) {\n        const sprite = toSprite(source, char, pixels)\n        sprites.set(char, sprite)\n    }\n    return sprites\n}\n\nmakeLetter('a', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 1, 0]\n])\nmakeLetter('b', [\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('c', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0]\n])\nmakeLetter('d', [\n    [0, 0, 0, 1, 0],\n    [0, 0, 0, 1, 0],\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('e', [\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 1, 1, 0, 0],\n    [1, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('f', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 1, 0],\n    [0, 1, 0, 0, 0],\n    [1, 1, 1, 0, 0],\n    [0, 1, 0, 0, 0]\n])\nmakeLetter('g', [\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('h', [\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0]\n])\nmakeLetter('i', [\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 1, 0]\n])\nmakeLetter('j', [\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [1, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0]\n])\nmakeLetter('k', [\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0]\n])\nmakeLetter('l', [\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('m', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 0, 1, 0],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1]\n])\nmakeLetter('n', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0]\n])\nmakeLetter('o', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('p', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 1, 1, 0, 0],\n    [1, 0, 0, 0, 0]\n])\nmakeLetter('q', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 1, 0]\n])\nmakeLetter('r', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0]\n])\nmakeLetter('s', [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 0, 1, 0],\n    [1, 1, 1, 0, 0]\n])\nmakeLetter('t', [\n    [0, 1, 0, 0, 0],\n    [1, 1, 1, 0, 0],\n    [0, 1, 0, 0, 0],\n    [0, 1, 0, 0, 1],\n    [0, 0, 1, 1, 0]\n])\nmakeLetter('u', [\n    [0, 0, 0, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0],\n    [1, 1, 1, 0, 0]\n])\nmakeLetter('v', [\n    [0, 0, 0, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 0, 1, 0, 0],\n    [1, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0]\n])\nmakeLetter('w', [\n    [0, 0, 0, 0, 0],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [0, 1, 0, 1, 0]\n])\nmakeLetter('x', [\n    [0, 0, 0, 0, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0],\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0]\n])\nmakeLetter('y', [\n    [1, 0, 0, 1, 0],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 1, 0],\n    [1, 1, 1, 0, 0]\n])\nmakeLetter('z', [\n    [0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 0]\n])\nmakeLetter('A', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1]\n])\nmakeLetter('B', [\n    [1, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0]\n])\nmakeLetter('C', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('D', [\n    [1, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0]\n])\nmakeLetter('E', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('F', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0]\n])\nmakeLetter('G', [\n    [0, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 1, 1],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 1]\n])\nmakeLetter('H', [\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1]\n])\nmakeLetter('I', [\n    [1, 1, 1, 1, 1],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('J', [\n    [1, 1, 1, 1, 1],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [1, 1, 1, 0, 0]\n])\nmakeLetter('K', [\n    [1, 0, 0, 0, 1],\n    [1, 0, 1, 1, 0],\n    [1, 1, 0, 0, 0],\n    [1, 0, 1, 1, 0],\n    [1, 0, 0, 0, 1]\n])\nmakeLetter('L', [\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('M', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1]\n])\nmakeLetter('N', [\n    [1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 0, 1, 1],\n    [1, 0, 0, 0, 1]\n])\nmakeLetter('O', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('P', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0]\n])\nmakeLetter('Q', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 1]\n])\nmakeLetter('R', [\n    [1, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1]\n])\nmakeLetter('S', [\n    [0, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0]\n])\nmakeLetter('T', [\n    [1, 1, 1, 1, 1],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter('U', [\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('V', [\n    [1, 0, 0, 0, 1],\n    [0, 1, 0, 1, 0],\n    [0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter('W', [\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1],\n    [0, 1, 0, 1, 0]\n])\nmakeLetter('X', [\n    [1, 0, 0, 0, 1],\n    [0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 1, 0],\n    [1, 0, 0, 0, 1]\n])\nmakeLetter('Y', [\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter('Z', [\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('0', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 1, 1],\n    [1, 0, 1, 0, 1],\n    [1, 1, 0, 0, 1],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('1', [\n    [1, 1, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('2', [\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('3', [\n    [1, 1, 1, 1, 0],\n    [0, 0, 0, 0, 1],\n    [0, 0, 1, 1, 0],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0]\n])\nmakeLetter('4', [\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 1, 0],\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 1, 0]\n])\nmakeLetter('5', [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0]\n])\nmakeLetter('6', [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0]\n])\nmakeLetter('7', [\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0]\n])\nmakeLetter('8', [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0]\n])\nmakeLetter('9', [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0]\n])\nmakeLetter('.', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter(',', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter(';', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter(':', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('?', [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 0, 1, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter('!', [\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter('@', [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0]\n])\nmakeLetter('£', [\n    [0, 1, 1, 1, 0],\n    [0, 1, 0, 0, 1],\n    [1, 1, 1, 0, 0],\n    [0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('$', [\n    [0, 1, 1, 1, 1],\n    [1, 0, 1, 0, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 1, 0, 1],\n    [1, 1, 1, 1, 0]\n])\nmakeLetter('%', [\n    [1, 1, 0, 0, 1],\n    [1, 1, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 1, 1],\n    [1, 0, 0, 1, 1]\n])\nmakeLetter('^', [\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 1, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('&', [\n    [0, 1, 1, 0, 0],\n    [1, 0, 0, 0, 0],\n    [0, 1, 0, 1, 1],\n    [1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('*', [\n    [0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 1, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('(', [\n    [0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 1, 0]\n])\nmakeLetter(')', [\n    [0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0]\n])\nmakeLetter('+', [\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [1, 1, 1, 1, 1],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter('-', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('_', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1]\n])\nmakeLetter('=', [\n    [0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter(' ', [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('{', [\n    [0, 0, 1, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 1, 0]\n])\nmakeLetter('}', [\n    [0, 1, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('[', [\n    [0, 0, 1, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 1, 0]\n])\nmakeLetter(']', [\n    [0, 1, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 1, 0, 0]\n])\nmakeLetter('\\'', [\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('\"', [\n    [0, 1, 0, 1, 0],\n    [0, 1, 0, 1, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('/', [\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0]\n])\nmakeLetter('\\\\', [\n    [1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 1, 0],\n    [0, 0, 0, 0, 1]\n])\nmakeLetter('|', [\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0]\n])\nmakeLetter('<', [\n    [0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 1, 0]\n])\nmakeLetter('>', [\n    [0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0]\n])\nmakeLetter('~', [\n    [0, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0],\n    [1, 0, 1, 0, 1],\n    [0, 0, 0, 1, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('`', [\n    [0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n])\nmakeLetter('#', [\n    [0, 1, 0, 1, 0],\n    [1, 1, 1, 1, 1],\n    [0, 1, 0, 1, 0],\n    [1, 1, 1, 1, 1],\n    [0, 1, 0, 1, 0]\n])\n","(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        function stringifySymbolSequence (e) {\n            return e.literal ? JSON.stringify(e.literal) :\n                   e.type ? '%' + e.type : e.toString();\n        }\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(stringifySymbolSequence).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var line = buffer.substring(this.lastLineBreak, nextLineBreak)\n            var col = this.index - this.lastLineBreak;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += \"  \" + line + \"\\n\"\n            message += \"  \" + Array(col).join(\" \") + \"^\"\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n    }\n\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (token = lexer.next()) {\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var message = this.lexer.formatError(token, \"invalid syntax\") + \"\\n\";\n                message += \"Unexpected \" + (token.type ? token.type + \" token: \" : \"\");\n                message += JSON.stringify(token.value !== undefined ? token.value : token) + \"\\n\";\n                var err = new Error(message);\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n","const ALIASES = [\n    'arnecolors', // the default color palette\n    'mastersystem',\n    'gameboycolour',\n    'amiga',\n    'arnecolors',\n    'famicom',\n    'atari',\n    'pastel',\n    'ega',\n    'amstrad',\n    'proteus_mellow',\n    'proteus_rich',\n    'proteus_night',\n    'c64',\n    'whitingjp'\n]\n\nconst COLOR_PALETTES = new Map()\n\nCOLOR_PALETTES.set('mastersystem', {\n    black: '#000000',\n    white: '#FFFFFF',\n    grey: '#555555',\n    darkgrey: '#555500',\n    lightgrey: '#AAAAAA',\n    gray: '#555555',\n    darkgray: '#555500',\n    lightgray: '#AAAAAA',\n    red: '#FF0000',\n    darkred: '#AA0000',\n    lightred: '#FF5555',\n    brown: '#AA5500',\n    darkbrown: '#550000',\n    lightbrown: '#FFAA00',\n    orange: '#FF5500',\n    yellow: '#FFFF55',\n    green: '#55AA00',\n    darkgreen: '#005500',\n    lightgreen: '#AAFF00',\n    blue: '#5555AA',\n    lightblue: '#AAFFFF',\n    darkblue: '#000055',\n    purple: '#550055',\n    pink: '#FFAAFF'\n})\n\nCOLOR_PALETTES.set('gameboycolour', {\n    black: '#000000',\n    white: '#FFFFFF',\n    grey: '#7F7F7C',\n    darkgrey: '#3E3E44',\n    lightgrey: '#BAA7A7',\n    gray: '#7F7F7C',\n    darkgray: '#3E3E44',\n    lightgray: '#BAA7A7',\n    red: '#A7120C',\n    darkred: '#880606',\n    lightred: '#BA381F',\n    brown: '#57381F',\n    darkbrown: '#3E2519',\n    lightbrown: '#8E634B',\n    orange: '#BA4B32',\n    yellow: '#C0BA6F',\n    green: '#517525',\n    darkgreen: '#385D12',\n    lightgreen: '#6F8E44',\n    blue: '#5D6FA7',\n    lightblue: '#8EA7A7',\n    darkblue: '#4B575D',\n    purple: '#3E3E44',\n    pink: '#BA381F'\n})\n\nCOLOR_PALETTES.set('amiga', {\n    black: '#000000',\n    white: '#FFFFFF',\n    grey: '#BBBBBB',\n    darkgrey: '#333333',\n    lightgrey: '#FFEEDD',\n    gray: '#BBBBBB',\n    darkgray: '#333333',\n    lightgray: '#FFEEDD',\n    red: '#DD1111',\n    darkred: '#990000',\n    lightred: '#FF4422',\n    brown: '#663311',\n    darkbrown: '#331100',\n    lightbrown: '#AA6644',\n    orange: '#FF6644',\n    yellow: '#FFDD66',\n    green: '#448811',\n    darkgreen: '#335500',\n    lightgreen: '#88BB77',\n    blue: '#8899DD',\n    lightblue: '#BBDDEE',\n    darkblue: '#666688',\n    purple: '#665555',\n    pink: '#997788'\n})\n\nCOLOR_PALETTES.set('arnecolors', {\n    black: '#000000',\n    white: '#FFFFFF',\n    grey: '#9d9d9d',\n    darkgrey: '#697175',\n    lightgrey: '#cccccc',\n    gray: '#9d9d9d',\n    darkgray: '#697175',\n    lightgray: '#cccccc',\n    red: '#be2633',\n    darkred: '#732930',\n    lightred: '#e06f8b',\n    brown: '#a46422',\n    darkbrown: '#493c2b',\n    lightbrown: '#eeb62f',\n    orange: '#eb8931',\n    yellow: '#f7e26b',\n    green: '#44891a',\n    darkgreen: '#2f484e',\n    lightgreen: '#a3ce27',\n    blue: '#1d57f7',\n    lightblue: '#B2DCEF',\n    darkblue: '#1B2632',\n    purple: '#342a97',\n    pink: '#de65e2'\n})\nCOLOR_PALETTES.set('famicom', {\n    black: '#000000',\n    white: '#ffffff',\n    grey: '#7c7c7c',\n    darkgrey: '#080808',\n    lightgrey: '#bcbcbc',\n    gray: '#7c7c7c',\n    darkgray: '#080808',\n    lightgray: '#bcbcbc',\n    red: '#f83800',\n    darkred: '#881400',\n    lightred: '#f87858',\n    brown: '#AC7C00',\n    darkbrown: '#503000',\n    lightbrown: '#FCE0A8',\n    orange: '#FCA044',\n    yellow: '#F8B800',\n    green: '#00B800',\n    darkgreen: '#005800',\n    lightgreen: '#B8F8B8',\n    blue: '#0058F8',\n    lightblue: '#3CBCFC',\n    darkblue: '#0000BC',\n    purple: '#6644FC',\n    pink: '#F878F8'\n})\n\nCOLOR_PALETTES.set('atari', {\n    black: '#000000',\n    white: '#FFFFFF',\n    grey: '#909090',\n    darkgrey: '#404040',\n    lightgrey: '#b0b0b0',\n    gray: '#909090',\n    darkgray: '#404040',\n    lightgray: '#b0b0b0',\n    red: '#A03C50',\n    darkred: '#700014',\n    lightred: '#DC849C',\n    brown: '#805020',\n    darkbrown: '#703400',\n    lightbrown: '#CB9870',\n    orange: '#CCAC70',\n    yellow: '#ECD09C',\n    green: '#58B06C',\n    darkgreen: '#006414',\n    lightgreen: '#70C484',\n    blue: '#1C3C88',\n    lightblue: '#6888C8',\n    darkblue: '#000088',\n    purple: '#3C0080',\n    pink: '#B484DC'\n})\nCOLOR_PALETTES.set('pastel', {\n    black: '#000000',\n    white: '#FFFFFF',\n    grey: '#3e3e3e',\n    darkgrey: '#313131',\n    lightgrey: '#9cbcbc',\n    gray: '#3e3e3e',\n    darkgray: '#313131',\n    lightgray: '#9cbcbc',\n    red: '#f56ca2',\n    darkred: '#a63577',\n    lightred: '#ffa9cf',\n    brown: '#b58c53',\n    darkbrown: '#787562',\n    lightbrown: '#B58C53',\n    orange: '#EB792D',\n    yellow: '#FFe15F',\n    green: '#00FF4F',\n    darkgreen: '#2b732c',\n    lightgreen: '#97c04f',\n    blue: '#0f88d3',\n    lightblue: '#00fffe',\n    darkblue: '#293a7b',\n    purple: '#ff6554',\n    pink: '#eb792d'\n})\nCOLOR_PALETTES.set('ega', {\n    black: '#000000',\n    white: '#ffffff',\n    grey: '#555555',\n    darkgrey: '#555555',\n    lightgrey: '#aaaaaa',\n    gray: '#555555',\n    darkgray: '#555555',\n    lightgray: '#aaaaaa',\n    red: '#ff5555',\n    darkred: '#aa0000',\n    lightred: '#ff55ff',\n    brown: '#aa5500',\n    darkbrown: '#aa5500',\n    lightbrown: '#ffff55',\n    orange: '#ff5555',\n    yellow: '#ffff55',\n    green: '#00aa00',\n    darkgreen: '#00aaaa',\n    lightgreen: '#55ff55',\n    blue: '#5555ff',\n    lightblue: '#55ffff',\n    darkblue: '#0000aa',\n    purple: '#aa00aa',\n    pink: '#ff55ff'\n})\n\nCOLOR_PALETTES.set('proteus_mellow', {\n    black: '#3d2d2e',\n    white: '#ddf1fc',\n    grey: '#9fb2d4',\n    darkgrey: '#7b8272',\n    lightgrey: '#a4bfda',\n    gray: '#9fb2d4',\n    darkgray: '#7b8272',\n    lightgray: '#a4bfda',\n    red: '#9d5443',\n    darkred: '#8c5b4a',\n    lightred: '#94614c',\n    brown: '#89a78d',\n    darkbrown: '#829e88',\n    lightbrown: '#aaae97',\n    orange: '#d1ba86',\n    yellow: '#d6cda2',\n    green: '#75ac8d',\n    darkgreen: '#8fa67f',\n    lightgreen: '#8eb682',\n    blue: '#88a3ce',\n    lightblue: '#a5adb0',\n    darkblue: '#5c6b8c',\n    purple: '#d39fac',\n    pink: '#c8ac9e'\n})\n\nCOLOR_PALETTES.set('proteus_night', {\n    black: '#010912',\n    white: '#fdeeec',\n    grey: '#051d40',\n    darkgrey: '#091842',\n    lightgrey: '#062151',\n    gray: '#051d40',\n    darkgray: '#091842',\n    lightgray: '#062151',\n    red: '#ad4576',\n    darkred: '#934765',\n    lightred: '#ab6290',\n    brown: '#61646b',\n    darkbrown: '#3d2d2d',\n    lightbrown: '#8393a0',\n    orange: '#0a2227',\n    yellow: '#0a2541',\n    green: '#75ac8d',\n    darkgreen: '#0a2434',\n    lightgreen: '#061f2e',\n    blue: '#0b2c79',\n    lightblue: '#809ccb',\n    darkblue: '#08153b',\n    purple: '#666a87',\n    pink: '#754b4d'\n})\n\nCOLOR_PALETTES.set('proteus_rich', {\n    black: '#6f686f',\n    white: '#d1b1e2',\n    grey: '#b9aac1',\n    darkgrey: '#8e8b84',\n    lightgrey: '#c7b5cd',\n    gray: '#b9aac1',\n    darkgray: '#8e8b84',\n    lightgray: '#c7b5cd',\n    red: '#a11f4f',\n    darkred: '#934765',\n    lightred: '#c998ad',\n    brown: '#89867d',\n    darkbrown: '#797f75',\n    lightbrown: '#ab9997',\n    orange: '#ce8c5c',\n    yellow: '#f0d959',\n    green: '#75bc54',\n    darkgreen: '#599d79',\n    lightgreen: '#90cf5c',\n    blue: '#8fd0ec',\n    lightblue: '#bcdce7',\n    darkblue: '#0b2c70',\n    purple: '#9b377f',\n    pink: '#cd88e5'\n})\n\nCOLOR_PALETTES.set('amstrad', {\n    black: '#000000',\n    white: '#ffffff',\n    grey: '#7f7f7f',\n    darkgrey: '#636363',\n    lightgrey: '#afafaf',\n    gray: '#7f7f7f',\n    darkgray: '#636363',\n    lightgray: '#afafaf',\n    red: '#ff0000',\n    darkred: '#7f0000',\n    lightred: '#ff7f7f',\n    brown: '#ff7f00',\n    darkbrown: '#7f7f00',\n    lightbrown: '#ffff00',\n    orange: '#ff007f',\n    yellow: '#ffff7f',\n    green: '#01ff00',\n    darkgreen: '#007f00',\n    lightgreen: '#7fff7f',\n    blue: '#0000ff',\n    lightblue: '#7f7fff',\n    darkblue: '#00007f',\n    purple: '#7f007f',\n    pink: '#ff7fff'\n})\nCOLOR_PALETTES.set('c64', {\n    black: '#000000',\n    white: '#ffffff',\n    grey: '#6C6C6C',\n    darkgrey: '#444444',\n    lightgrey: '#959595',\n    gray: '#6C6C6C',\n    darkgray: '#444444',\n    lightgray: '#959595',\n    red: '#68372B',\n    darkred: '#3f1e17',\n    lightred: '#9A6759',\n    brown: '#433900',\n    darkbrown: '#221c02',\n    lightbrown: '#6d5c0d',\n    orange: '#6F4F25',\n    yellow: '#B8C76F',\n    green: '#588D43',\n    darkgreen: '#345129',\n    lightgreen: '#9AD284',\n    blue: '#6C5EB5',\n    lightblue: '#70A4B2',\n    darkblue: '#352879',\n    purple: '#6F3D86',\n    pink: '#b044ac'\n})\nCOLOR_PALETTES.set('whitingjp', {\n    black: '#202527',\n    white: '#eff8fd',\n    grey: '#7b7680',\n    darkgrey: '#3c3b44',\n    lightgrey: '#bed0d7',\n    gray: '#7b7680',\n    darkgray: '#3c3b44',\n    lightgray: '#bed0d7',\n    red: '#bd194b',\n    darkred: '#6b1334',\n    lightred: '#ef2358',\n    brown: '#b52e1c',\n    darkbrown: '#681c12',\n    lightbrown: '#e87b45',\n    orange: '#ff8c10',\n    yellow: '#fbd524',\n    green: '#36bc3c',\n    darkgreen: '#317610',\n    lightgreen: '#8ce062',\n    blue: '#3f62c6',\n    lightblue: '#57bbe0',\n    darkblue: '#2c2fa0',\n    purple: '#7037d9',\n    pink: '#ec2b8f'\n})\n\nexport function lookupColorPalette(alias: string, colorName: string) {\n    let aliasStr\n    if (Number.parseInt(alias, 10) >= 1) {\n        aliasStr = ALIASES[Number.parseInt(alias, 10)]\n    } else {\n        aliasStr = alias\n    }\n    const map = COLOR_PALETTES.get(aliasStr)\n    if (!map) {\n        throw new Error(`BUG: Invalid color palette name or number: \"${alias}\" \"${aliasStr}\"`)\n    }\n    const colorValue = map[colorName.toLowerCase()]\n    return colorValue\n}\n","import { Optional } from '../util'\nimport { BaseForLines, IGameCode } from './BaseForLines'\nimport { IGameTile } from './tile'\n\nexport interface ILevel {\n    isInvalid: () => Optional<string>\n    isMap: () => boolean\n    getRows: () => IGameTile[][]\n    getMessage: () => string\n    __incrementCoverage: () => void\n    getWidth(): number\n    getHeight(): number\n}\n\nexport class LevelMap extends BaseForLines implements ILevel {\n    private rows: IGameTile[][]\n\n    constructor(source: IGameCode, rows: IGameTile[][]) {\n        super(source)\n        this.rows = rows\n    }\n    public isInvalid(): Optional<string> {\n        const firstRowLength = this.rows[0].length\n        let isInvalid = null\n        this.rows.forEach((row, index) => {\n            if (firstRowLength !== row.length) {\n                isInvalid = `Row ${index + 1} does not have the same column count as the first row. Expected ${firstRowLength} columns but found ${row.length}.`\n            }\n        })\n        return isInvalid\n    }\n    public isMap() {\n        return true\n    }\n    public getRows() {\n        return this.rows\n    }\n    public getWidth() {\n        return this.rows[0].length\n    }\n    public getHeight() {\n        return this.rows.length\n    }\n    public getMessage(): string {\n        throw new Error(`BUG: Check .isMap() before calling this`)\n    }\n}\n\nexport class MessageLevel extends BaseForLines implements ILevel {\n    private message: string\n    constructor(source: IGameCode, message: string) {\n        super(source)\n        this.message = message\n    }\n    public isInvalid(): Optional<string> { return null }\n    public isMap() {\n        return false\n    }\n    public getRows(): IGameTile[][] {\n        throw new Error(`BUG: Should have checked isMap first`)\n    }\n    public getMessage() {\n        return this.message\n    }\n    public getWidth(): number {\n        throw new Error(`BUG: Should have checked isMap first`)\n    }\n    public getHeight(): number {\n        throw new Error(`BUG: Should have checked isMap first`)\n    }\n}\n","import { IColor } from './colors'\n\nexport class Dimension {\n    public readonly width: number\n    public readonly height: number\n\n    constructor(width: number, height: number) {\n        this.width = width\n        this.height = height\n    }\n}\n\nexport class GameMetadata {\n    public author?: string\n    public homepage?: string\n    public youtube?: string\n    public zoomscreen?: Dimension\n    public flickscreen?: Dimension\n    public colorPalette?: string\n    public backgroundColor?: IColor\n    public textColor?: IColor\n    public realtimeInterval?: string\n    public keyRepeatInterval?: string\n    public againInterval?: string\n    public noAction: boolean\n    public noUndo: boolean\n    public runRulesOnLevelStart?: string\n    public noRepeatAction: boolean\n    public throttleMovement: boolean\n    public noRestart: boolean\n    public requirePlayerMovement: boolean\n    public verboseLogging: boolean\n\n    constructor() {\n        this.noAction = false\n        this.noUndo = false\n        this.noRepeatAction = false\n        this.throttleMovement = false\n        this.noRestart = false\n        this.requirePlayerMovement = false\n        this.verboseLogging = false\n    }\n\n    public _setValue(key: string, value: boolean | string | Dimension | IColor) {\n        switch (key.toLowerCase()) {\n            case 'author': this.author = value as string; break\n            case 'homepage': this.homepage = value as string; break\n            case 'youtube': this.youtube = value as string; break\n            case 'zoomscreen': this.zoomscreen = value as Dimension; break\n            case 'flickscreen': this.flickscreen = value as Dimension; break\n            case 'color_palette': this.colorPalette = value as string; break\n            case 'background_color': this.backgroundColor = value as IColor; break\n            case 'text_color': this.textColor = value as IColor; break\n            case 'realtime_interval': this.realtimeInterval = value as string; break\n            case 'key_repeat_interval': this.keyRepeatInterval = value as string; break\n            case 'again_interval': this.againInterval = value as string; break\n            case 'noaction': this.noAction = value as boolean; break\n            case 'noundo': this.noUndo = value as boolean; break\n            case 'run_rules_on_level_start': this.runRulesOnLevelStart = value as string; break\n            case 'norepeat_action': this.noRepeatAction = value as boolean; break\n            case 'throttle_movement': this.throttleMovement = value as boolean; break\n            case 'norestart': this.noRestart = value as boolean; break\n            case 'require_player_movement': this.requirePlayerMovement = value as boolean; break\n            case 'verbose_logging': this.verboseLogging = value as boolean; break\n            default:\n                throw new Error(`BUG: Unsupported config field \"${key}\" with value \"${value}\"`)\n        }\n    }\n}\n","import { BaseForLines, IGameCode } from './BaseForLines'\nimport { IGameTile } from './tile'\n\n// Abstract class\nexport class GameSound extends BaseForLines {\n    public readonly soundCode: number\n\n    constructor(source: IGameCode, soundCode: number) {\n        super(source)\n        this.soundCode = soundCode\n    }\n}\n\nexport class GameSoundSfx extends GameSound {\n    public readonly sfxName: string\n\n    constructor(source: IGameCode, sfxName: string, soundCode: number) {\n        super(source, soundCode)\n        this.sfxName = sfxName\n    }\n}\n\nexport class GameSoundSimpleEnum extends GameSound {\n    public readonly simpleEventName: string\n\n    constructor(source: IGameCode, simpleEventName: string, soundCode: number) {\n        super(source, soundCode)\n        this.simpleEventName = simpleEventName\n    }\n}\n\n// TODO: Link this up to the Object, rather than just storing the spriteName\nexport class GameSoundNormal extends GameSound {\n    public readonly tile: IGameTile\n    public readonly conditionEnum: string\n\n    constructor(source: IGameCode, sprite: IGameTile, conditionEnum: string, soundCode: number) {\n        super(source, soundCode)\n        this.tile = sprite\n        this.conditionEnum = conditionEnum\n    }\n}\n\nexport class GameSoundMoveSimple extends GameSound {\n    public readonly tile: IGameTile\n\n    constructor(source: IGameCode, sprite: IGameTile, soundCode: number) {\n        super(source, soundCode)\n        this.tile = sprite\n    }\n}\n\nexport class GameSoundMoveDirection extends GameSound {\n    public readonly tile: IGameTile\n    public readonly directionEnum: string\n\n    constructor(source: IGameCode, sprite: IGameTile, directionEnum: string, soundCode: number) {\n        super(source, soundCode)\n        this.tile = sprite\n        this.directionEnum = directionEnum\n    }\n}\n","import { Cell } from '../engine'\nimport { BaseForLines, IGameCode } from './BaseForLines'\nimport { IGameTile } from './tile'\n\nexport enum WIN_QUALIFIER {\n    NO = 'NO',\n    ALL = 'ALL',\n    ANY = 'ANY',\n    SOME = 'SOME'\n}\n\nexport class WinConditionSimple extends BaseForLines {\n    protected readonly qualifier: WIN_QUALIFIER\n    protected readonly tile: IGameTile\n\n    constructor(source: IGameCode, qualifierEnum: WIN_QUALIFIER, tile: IGameTile) {\n        super(source)\n        this.qualifier = qualifierEnum\n        this.tile = tile\n        if (!tile) {\n            throw new Error('BUG: Could not find win condition tile')\n        }\n    }\n\n    public cellsThatMatchTile(cells: Iterable<Cell>, tile: IGameTile) {\n        return [...cells].filter((cell) => tile.matchesCell(cell))\n    }\n\n    public isSatisfied(cells: Iterable<Cell>) {\n        const ret = this._isSatisfied(cells)\n        if (ret) {\n            if (process.env.NODE_ENV === 'development') {\n                this.__incrementCoverage()\n            }\n        }\n        return ret\n    }\n\n    protected _isSatisfied(cells: Iterable<Cell>) {\n        const tileCells = this.cellsThatMatchTile(cells, this.tile)\n        switch (this.qualifier) {\n            case WIN_QUALIFIER.NO:\n                return tileCells.length === 0\n            case WIN_QUALIFIER.ANY:\n            case WIN_QUALIFIER.SOME:\n                return tileCells.length > 0\n            // case WIN_QUALIFIER.ALL:\n            //     return ![...cells].filter(cell => !this.matchesTile(cell, this._tile))[0]\n            default:\n                throw new Error(`BUG: Invalid qualifier: \"${this.qualifier}\"`)\n        }\n    }\n}\n\nexport class WinConditionOn extends WinConditionSimple {\n    private readonly onTile: IGameTile\n\n    constructor(source: IGameCode, qualifierEnum: WIN_QUALIFIER, tile: IGameTile, onTile: IGameTile) {\n        super(source, qualifierEnum, tile)\n        this.onTile = onTile\n    }\n\n    protected _isSatisfied(cells: Iterable<Cell>) {\n        // ALL Target ON CleanDishes\n        const tileCells = this.cellsThatMatchTile(cells, this.tile)\n        const onTileCells = this.cellsThatMatchTile(tileCells, this.onTile)\n\n        switch (this.qualifier) {\n            case WIN_QUALIFIER.NO:\n                return onTileCells.length === 0\n            case WIN_QUALIFIER.ANY:\n            case WIN_QUALIFIER.SOME:\n                return onTileCells.length > 0\n            case WIN_QUALIFIER.ALL:\n                return onTileCells.length === tileCells.length\n            default:\n                throw new Error(`BUG: Invalid qualifier: \"${this.qualifier}\"`)\n        }\n    }\n}\n","import { Cell } from '../engine'\nimport { BaseForLines, IGameCode } from '../models/BaseForLines'\nimport { AbstractCommand } from '../models/command'\nimport {\n    IRule,\n    ISimpleBracket,\n    SIMPLE_DIRECTION_DIRECTIONS,\n    SimpleBracket,\n    SimpleEllipsisBracket,\n    SimpleNeighbor,\n    SimpleRule,\n    SimpleRuleGroup,\n    SimpleRuleLoop,\n    SimpleTileWithModifier} from '../models/rule'\nimport { IGameTile } from '../models/tile'\nimport { DEBUG_FLAG, ICacheable, Optional, RULE_DIRECTION, setIntersection } from '../util'\n\nexport enum AST_RULE_MODIFIER {\n    RANDOM = 'RANDOM',\n    UP = 'UP',\n    DOWN = 'DOWN',\n    LEFT = 'LEFT',\n    RIGHT = 'RIGHT',\n    VERTICAL = 'VERTICAL',\n    HORIZONTAL = 'HORIZONTAL',\n    ORTHOGONAL = 'ORTHOGONAL',\n    PERPENDICULAR = 'PERPENDICULAR',\n    PARALLEL = 'PARALLEL',\n    MOVING = 'MOVING',\n    LATE = 'LATE',\n    RIGID = 'RIGID'\n}\n\nconst RULE_DIRECTION_LIST = [\n    RULE_DIRECTION.UP,\n    RULE_DIRECTION.DOWN,\n    RULE_DIRECTION.LEFT,\n    RULE_DIRECTION.RIGHT\n]\n\nconst RULE_DIRECTION_SET: Set<string> = new Set(RULE_DIRECTION_LIST)\n\nfunction cacheSetAndGet<A extends ICacheable>(cache: Map<string, A>, obj: A) {\n    const key = obj.toKey()\n    if (!cache.has(key)) {\n        cache.set(key, obj)\n    }\n    return cache.get(key) as A\n}\n\n// Note: Directions inside a Bracket are relative to other dorections inside a bracket\n// Example:\n//\n// Interpret `[ > player > cat | < dog ] -> [ < player | cat < dog ]` to:\n// Interpret `[ ^ player v cat | v dog ] -> [ v player | cat v dog ]` to:\n// UP    [ UP    player UP    cat | DOWN  dog ] -> [ DOWN  player | cat DOWN  dog ]\n// DOWN  [ DOWN  player DOWN  cat | UP    dog ] -> [ UP    player | cat UP    dog ]\n// LEFT  [ LEFT  player LEFT  cat | RIGHT dog ] -> [ RIGHT player | cat RIGHT dog ]\n// RIGHT [ RIGHT player RIGHT cat | LEFT  dog ] -> [ LEFT  player | cat LEFT  dog ]\n//\n// Interpret `HORIZONTAL [ > player ] -> [ < crate ] to:\n// LEFT  [ LEFT  player ] -> [ RIGHT crate ]\n// RIGHT [ RIGHT player ] -> [ LEFT  crate ]\n//\n// Interpret `VERTICAL [ ^ player PARALLEL cat | PERPENDICULAR dog ] -> [ < crate |  dog ] to:\n// UP    [ LEFT   player HORIZONTAL cat ] -> [ DOWN  crate | VERTICAL   dog ]\n// DOWN  [ RIGHT  player HORIZONTAL cat ] -> [ UP    crate | VERTICAL   dog ]\n// LEFT  [ DOWN   player VERTICAL   cat ] -> [ RIGHT crate | HORIZONTAL dog ]\n// DOWN  [ RIGHT  player HORIZONTAL cat ] -> [ UP    crate | HORIZONTAL dog ]\n//\n// See https://www.puzzlescript.net/Documentation/executionorder.html\n/**\n * Represents a rule as written in the game as well as the expanded intermediate version.\n *\n * See `.simplify()` for more details on the expanded intermediate version.\n */\nexport class ASTRule extends BaseForLines {\n    private readonly modifiers: AST_RULE_MODIFIER[]\n    private readonly commands: AbstractCommand[]\n    private readonly brackets: IASTRuleBracket[]\n    private readonly actionBrackets: IASTRuleBracket[]\n    private readonly debugFlag: Optional<DEBUG_FLAG> // Used for setting a breakpoint when evaluating the rule\n\n    constructor(source: IGameCode, modifiers: AST_RULE_MODIFIER[], conditions: IASTRuleBracket[], actions: IASTRuleBracket[], commands: AbstractCommand[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.modifiers = modifiers\n        this.commands = commands\n        this.brackets = conditions\n        this.actionBrackets = actions\n        this.debugFlag = debugFlag\n\n        // Check if valid\n        if (conditions.length !== actions.length && actions.length !== 0) {\n            throw new Error(`Left side has \"${conditions.length}\" conditions and right side has \"${actions.length}\" actions!`)\n        }\n\n        if (conditions.length === actions.length) {\n            // do nothing\n        } else if (actions.length !== 0) {\n            throw new Error(`Invalid Rule. The number of brackets on the right must match the structure of the left hand side or be 0`)\n        }\n    }\n\n    // toKey() {\n    //     return `${this.modifiers.join(' ')} ${this.brackets.map(x => x.toKey())} -> ${this.actionBrackets.map(x => x.toKey())} ${this.commands.join(' ')} {debugger?${this.debugFlag}}`\n    // }\n\n    /**\n     * Expands this Rule into multiple `ASTRule` objects and then converts each one into a `SimpleRule`.\n     *\n     * For example, `HORIZONTAL [ > player ] -> [ < crate ]` gets expanded to the following `ASTRule`s:\n     *\n     * -  `LEFT  [ LEFT  player ] -> [ RIGHT crate ]`\n     * -  `RIGHT [ RIGHT player ] -> [ LEFT  crate ]`\n     *\n     * and then each one is converted into a `SimpleRule` which only has absolute directions\n     * rather than the relative ones that were specified in the original game code.\n     *\n     * @param ruleCache A cache for de-duplicating rules (so fewer need to be updated when the game is played)\n     * @param bracketCache A cache for de-duplicating brackets found in the game (so fewer need to be updated)\n     * @param neighborCache A cache for de-duplicating neighbors found in the game (so fewer need to be updated)\n     * @param tileCache A cache for de-duplicating tiles in the game (so fewer need to be updated)\n     */\n    public simplify(ruleCache: Map<string, SimpleRule>, bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>, tileCache: Map<string, SimpleTileWithModifier>) {\n        const simpleRules = this.convertToMultiple().map((r) => r.toSimple(ruleCache, bracketCache, neighborCache, tileCache))\n        // If the brackets are all the same object then that means we can just output 1 rule\n        // (the brackets don't have any directions. Otherwise they would not have been\n        // deduplicated as part of the .toKey() and cacheGetAndSet)\n        const isDuplicate = simpleRules.length === 1 || (!this.isRandom() && simpleRules[1] && simpleRules[0].canCollapseBecauseBracketsMatch(simpleRules[1]))\n        if (isDuplicate) {\n            simpleRules[0].subscribeToCellChanges()\n            // we still need it to be in a RuleGroup\n            // so the Rule can be evaluated multiple times (not just once)\n            return new SimpleRuleGroup(this.__source, this.isRandom(), [simpleRules[0]])\n        } else {\n            for (const rule of simpleRules) {\n                rule.subscribeToCellChanges()\n            }\n            return new SimpleRuleGroup(this.__source, this.isRandom(), simpleRules)\n        }\n    }\n    public isRandom() {\n        return this.modifiers.indexOf(AST_RULE_MODIFIER.RANDOM) >= 0\n    }\n\n    private toSimple(ruleCache: Map<string, SimpleRule>, bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>, tileCache: Map<string, SimpleTileWithModifier>) {\n        const directions = this.getDirectionModifiers()\n        if (directions.length !== 1) {\n            throw new Error(`BUG: should have exactly 1 direction by now but found the following: \"${directions}\"`)\n        }\n\n        // Check if the condition matches the action. If so, we can simplify evaluation.\n        const conditionBrackets = this.brackets.map((x) => x.toSimple(directions[0], ruleCache, bracketCache, neighborCache, tileCache))\n        const actionBrackets = this.actionBrackets.map((x) => x.toSimple(directions[0], ruleCache, bracketCache, neighborCache, tileCache))\n\n        for (let index = 0; index < conditionBrackets.length; index++) {\n            const action = actionBrackets[index]\n            // Skip rules with no action bracket `[ > Player ] -> CHECKPOINT`\n            if (!action) {\n                continue\n            }\n        }\n        return cacheSetAndGet(ruleCache, new SimpleRule(this.__source, directions[0], conditionBrackets, actionBrackets, this.commands, this.isLate(), this.isRigid(), this.debugFlag))\n    }\n\n    private convertToMultiple() {\n        let rulesToConvert = []\n        let convertedRules: ASTRule[] = []\n\n        for (const direction of this.getDirectionModifiers()) {\n            const expandedDirection = this.clone(direction, null, null)\n            rulesToConvert.push(expandedDirection)\n        }\n\n        const expandModifiers = new Map()\n        expandModifiers.set(AST_RULE_MODIFIER.HORIZONTAL, [RULE_DIRECTION.LEFT, RULE_DIRECTION.RIGHT])\n        expandModifiers.set(AST_RULE_MODIFIER.VERTICAL, [RULE_DIRECTION.UP, RULE_DIRECTION.DOWN])\n        expandModifiers.set(AST_RULE_MODIFIER.MOVING, [RULE_DIRECTION.UP, RULE_DIRECTION.DOWN, RULE_DIRECTION.LEFT, RULE_DIRECTION.RIGHT, RULE_DIRECTION.ACTION])\n\n        let didExpandRulesToConvert\n        do {\n            didExpandRulesToConvert = false\n            for (const rule of rulesToConvert) {\n                let didExpand = false\n                const direction = rule.getDirectionModifiers()[0]\n                if (rule.getDirectionModifiers().length !== 1) {\n                    throw new Error(`BUG: should have already expanded the rule to only contian one direction`)\n                }\n                for (const [nameToExpand, variations] of expandModifiers) {\n                    if (rule.hasModifier(nameToExpand)) {\n                        for (const variation of variations) {\n                            convertedRules.push(rule.clone(direction, nameToExpand, variation))\n                            didExpand = true\n                            didExpandRulesToConvert = true\n                        }\n                    }\n                }\n                if (!didExpand) {\n                    // Try expanding PARALLEL and ORTHOGONAL (since they depend on the rule direction)\n                    let perpendiculars\n                    let parallels\n                    switch (direction) {\n                        case RULE_DIRECTION.UP:\n                        case RULE_DIRECTION.DOWN:\n                            perpendiculars = [RULE_DIRECTION.LEFT, RULE_DIRECTION.RIGHT]\n                            parallels = [RULE_DIRECTION.UP, RULE_DIRECTION.DOWN]\n                            break\n                        case RULE_DIRECTION.LEFT:\n                        case RULE_DIRECTION.RIGHT:\n                            perpendiculars = [RULE_DIRECTION.UP, RULE_DIRECTION.DOWN]\n                            parallels = [RULE_DIRECTION.LEFT, RULE_DIRECTION.RIGHT]\n                            break\n                        default:\n                            throw new Error(`BUG: There must be some direction`)\n                    }\n                    if (perpendiculars && parallels) {\n                        const orthoParallels = [\n                            { nameToExpand: AST_RULE_MODIFIER.ORTHOGONAL, variations: perpendiculars },\n                            { nameToExpand: AST_RULE_MODIFIER.PERPENDICULAR, variations: perpendiculars },\n                            { nameToExpand: AST_RULE_MODIFIER.PARALLEL, variations: parallels }\n                        ]\n                        for (const { nameToExpand, variations } of orthoParallels) {\n\n                            if (rule.hasModifier(nameToExpand)) {\n                                for (const variation of variations) {\n                                    convertedRules.push(rule.clone(direction, nameToExpand, variation))\n                                    didExpand = true\n                                    didExpandRulesToConvert = true\n                                }\n                            }\n                        }\n                    }\n\n                }\n                // If nothing was expanded and this is the current rule\n                // then just keep it\n                if (!didExpand) {\n                    convertedRules.push(rule)\n                }\n            }\n            rulesToConvert = convertedRules\n            convertedRules = []\n        } while (didExpandRulesToConvert)\n\n        return rulesToConvert\n    }\n\n    private clone(direction: RULE_DIRECTION, nameToExpand: Optional<AST_RULE_MODIFIER>, newName: Optional<RULE_DIRECTION>) {\n        const conditionBrackets = this.brackets.map((bracket) => bracket.clone(direction, nameToExpand, newName))\n        const actionBrackets = this.actionBrackets.map((bracket) => bracket.clone(direction, nameToExpand, newName))\n        // retain LATE and RIGID but discard the rest of the modifiers\n        let directionModifier\n        switch (direction) {\n            case RULE_DIRECTION.UP:\n                directionModifier = AST_RULE_MODIFIER.UP\n                break\n            case RULE_DIRECTION.DOWN:\n                directionModifier = AST_RULE_MODIFIER.DOWN\n                break\n            case RULE_DIRECTION.LEFT:\n                directionModifier = AST_RULE_MODIFIER.LEFT\n                break\n            case RULE_DIRECTION.RIGHT:\n                directionModifier = AST_RULE_MODIFIER.RIGHT\n                break\n            default:\n                throw new Error(`BUG: Invalid direction \"${direction}\"`)\n        }\n        const modifiers = [...setIntersection(new Set(this.modifiers), [AST_RULE_MODIFIER.LATE, AST_RULE_MODIFIER.RIGID, AST_RULE_MODIFIER.RANDOM])].concat([directionModifier])\n        return new ASTRule(this.__source, modifiers, conditionBrackets, actionBrackets, this.commands, this.debugFlag)\n    }\n\n    private hasModifier(modifier: AST_RULE_MODIFIER) {\n        for (const bracket of this.brackets) {\n            for (const neighbor of bracket._getAllNeighbors()) {\n                for (const t of neighbor.tilesWithModifier) {\n                    if (t.modifier === modifier) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n\n    private getDirectionModifiers() {\n        // Convert HORIZONTAL and VERTICAL to 2:\n        if (this.modifiers.indexOf(AST_RULE_MODIFIER.HORIZONTAL) >= 0) {\n            return [RULE_DIRECTION.LEFT, RULE_DIRECTION.RIGHT]\n        }\n        if (this.modifiers.indexOf(AST_RULE_MODIFIER.VERTICAL) >= 0) {\n            return [RULE_DIRECTION.UP, RULE_DIRECTION.DOWN]\n        }\n        const directions = this.modifiers.filter((m) => RULE_DIRECTION_SET.has(m)).map((d) => {\n            switch (d) {\n                case AST_RULE_MODIFIER.UP:\n                    return RULE_DIRECTION.UP\n                case AST_RULE_MODIFIER.DOWN:\n                    return RULE_DIRECTION.DOWN\n                case AST_RULE_MODIFIER.LEFT:\n                    return RULE_DIRECTION.LEFT\n                case AST_RULE_MODIFIER.RIGHT:\n                    return RULE_DIRECTION.RIGHT\n                default:\n                    throw new Error(`BUG: Invalid rule direction \"${d}\"`)\n            }\n        })\n        if (directions.length === 0) {\n            return RULE_DIRECTION_LIST\n        } else {\n            return directions\n        }\n    }\n\n    private isLate() {\n        return this.modifiers.indexOf(AST_RULE_MODIFIER.LATE) >= 0\n    }\n    private isRigid() {\n        return this.modifiers.indexOf(AST_RULE_MODIFIER.RIGID) >= 0\n    }\n}\n\nexport interface IASTRuleBracket extends ICacheable {\n    clone: (direction: RULE_DIRECTION, nameToExpand: Optional<AST_RULE_MODIFIER>, newName: Optional<RULE_DIRECTION>) => IASTRuleBracket\n    toSimple: (direction: RULE_DIRECTION, ruleCache: Map<string, SimpleRule>, bracketCache: Map<string, ISimpleBracket>,\n               neighborCache: Map<string, SimpleNeighbor>, tileCache: Map<string, SimpleTileWithModifier>) => ISimpleBracket\n    _getAllNeighbors: () => ASTRuleBracketNeighbor[]\n}\n\nexport class ASTRuleBracket extends BaseForLines implements IASTRuleBracket {\n    private readonly neighbors: ASTRuleBracketNeighbor[]\n    private readonly firstCellsInEachDirection: Map<RULE_DIRECTION, Set<Cell>>\n    private readonly debugFlag: Optional<DEBUG_FLAG>\n\n    constructor(source: IGameCode, neighbors: ASTRuleBracketNeighbor[], hack: Optional<string>, debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.neighbors = neighbors\n        this.debugFlag = debugFlag\n\n        // populate the cache\n        this.firstCellsInEachDirection = new Map()\n        for (const direction of SIMPLE_DIRECTION_DIRECTIONS) {\n            this.firstCellsInEachDirection.set(direction, new Set())\n        }\n        this.firstCellsInEachDirection.set(RULE_DIRECTION.ACTION, new Set())\n    }\n\n    public toKey() {\n        return this.neighbors.map((n) => n.toKey()).join('|')\n    }\n\n    public clone(direction: RULE_DIRECTION, nameToExpand: Optional<AST_RULE_MODIFIER>, newName: Optional<RULE_DIRECTION>) {\n        return new ASTRuleBracket(this.__source, this.neighbors.map((n) => n.clone(direction, nameToExpand, newName)), null, this.debugFlag)\n    }\n\n    public toSimple(direction: RULE_DIRECTION, ruleCache: Map<string, SimpleRule>,\n                    bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>,\n                    tileCache: Map<string, SimpleTileWithModifier>) {\n\n        return cacheSetAndGet(bracketCache, new SimpleBracket(this.__source, direction, this.neighbors.map((x) => x.toSimple(ruleCache, bracketCache, neighborCache, tileCache)), this.debugFlag))\n    }\n\n    public _getAllNeighbors() {\n        return this.neighbors\n    }\n}\n\nexport class ASTRuleBracketEllipsis extends BaseForLines implements IASTRuleBracket {\n    private readonly beforeEllipsisNeighbors: ASTRuleBracketNeighbor[]\n    private readonly afterEllipsisNeighbors: ASTRuleBracketNeighbor[]\n    private readonly debugFlag: Optional<DEBUG_FLAG>\n\n    constructor(source: IGameCode, beforeEllipsisNeighbors: ASTRuleBracketNeighbor[], afterEllipsisNeighbors: ASTRuleBracketNeighbor[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.beforeEllipsisNeighbors = beforeEllipsisNeighbors\n        this.afterEllipsisNeighbors = afterEllipsisNeighbors\n        this.debugFlag = debugFlag\n    }\n\n    public toKey() {\n        return `${this.beforeEllipsisNeighbors.map((n) => n.toKey()).join('|')} ... ${this.afterEllipsisNeighbors.map((n) => n.toKey()).join('|')}`\n    }\n\n    public clone(direction: RULE_DIRECTION, nameToExpand: Optional<AST_RULE_MODIFIER>, newName: Optional<RULE_DIRECTION>) {\n        const beforeEllipsis = this.beforeEllipsisNeighbors.map((n) => n.clone(direction, nameToExpand, newName))\n        const afterEllipsis = this.afterEllipsisNeighbors.map((n) => n.clone(direction, nameToExpand, newName))\n        return new ASTRuleBracketEllipsis(this.__source, beforeEllipsis, afterEllipsis, this.debugFlag)\n    }\n\n    public toSimple(direction: RULE_DIRECTION, ruleCache: Map<string, SimpleRule>,\n                    bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>,\n                    tileCache: Map<string, SimpleTileWithModifier>) {\n\n        const beforeEllipsis = this.beforeEllipsisNeighbors.map((x) => x.toSimple(ruleCache, bracketCache, neighborCache, tileCache))\n        const afterEllipsis = this.afterEllipsisNeighbors.map((x) => x.toSimple(ruleCache, bracketCache, neighborCache, tileCache))\n        return cacheSetAndGet(bracketCache, new SimpleEllipsisBracket(this.__source, direction, beforeEllipsis, afterEllipsis, this.debugFlag))\n    }\n\n    public _getAllNeighbors() {\n        return [...this.beforeEllipsisNeighbors, ...this.afterEllipsisNeighbors]\n    }\n}\n\nexport class ASTRuleBracketNeighbor extends BaseForLines implements ICacheable {\n    public readonly tilesWithModifier: ASTTileWithModifier[]\n    private readonly debugFlag: Optional<DEBUG_FLAG>\n\n    constructor(source: IGameCode, tilesWithModifier: ASTTileWithModifier[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.debugFlag = debugFlag\n\n        // Collapse duplicate tiles into one.\n        // e.g. Cyber-Lasso has the following rule:\n        // ... -> [ ElectricFloor Powered no ElectricFloor Claimed ]\n        //\n        // ElectricFloor occurs twice (one is negated)\n        // We keep the first and remove the rest\n        const tilesMap = new Map()\n        for (const t of tilesWithModifier) {\n            if (!tilesMap.has(t.tile)) {\n                tilesMap.set(t.tile, t)\n            }\n        }\n        this.tilesWithModifier = [...tilesMap.values()]\n    }\n\n    public toKey() {\n        return `{${this.tilesWithModifier.map((t) => t.toKey()).sort().join(' ')} debugging?${!!this.debugFlag}}`\n    }\n\n    public clone(direction: RULE_DIRECTION, nameToExpand: Optional<AST_RULE_MODIFIER>, newName: Optional<RULE_DIRECTION>) {\n        return new ASTRuleBracketNeighbor(this.__source, this.tilesWithModifier.map((t) => t.clone(direction, nameToExpand, newName)), this.debugFlag)\n    }\n\n    public toSimple(ruleCache: Map<string, SimpleRule>, bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>, tileCache: Map<string, SimpleTileWithModifier>) {\n        const simpleTilesWithModifier = new Set(this.tilesWithModifier.map((x) => x.toSimple(ruleCache, bracketCache, neighborCache, tileCache)))\n        return cacheSetAndGet(neighborCache, new SimpleNeighbor(this.__source, simpleTilesWithModifier, this.debugFlag))\n    }\n}\n\nconst M_NO = 'NO'\n\nexport class ASTTileWithModifier extends BaseForLines implements ICacheable {\n    public readonly modifier: Optional<string>\n    public readonly tile: IGameTile\n    private readonly debugFlag: Optional<DEBUG_FLAG>\n\n    constructor(source: IGameCode, modifier: Optional<string>, tile: IGameTile, debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.modifier = modifier\n        this.tile = tile\n        this.debugFlag = debugFlag\n    }\n\n    public toKey() {\n        return `${this.modifier || ''} ${this.tile ? this.tile.getSprites().map((sprite) => sprite.getName()) : '|||(notile)|||'}{debugging?${!!this.debugFlag}}`\n    }\n\n    public clone(direction: RULE_DIRECTION, nameToExpand: Optional<AST_RULE_MODIFIER>, newName: Optional<RULE_DIRECTION>) {\n        switch (this.modifier) {\n            case '>':\n            case '<':\n            case '^':\n            case 'v':\n                const modifier = relativeDirectionToAbsolute(direction, this.modifier)\n                return new ASTTileWithModifier(this.__source, modifier, this.tile, this.debugFlag)\n            case nameToExpand:\n                return new ASTTileWithModifier(this.__source, newName, this.tile, this.debugFlag)\n            default:\n                return this\n        }\n    }\n\n    public toSimple(ruleCache: Map<string, SimpleRule>, bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>, tileCache: Map<string, SimpleTileWithModifier>) {\n        let direction\n        switch (this.modifier) {\n            case 'UP':\n            case 'DOWN':\n            case 'LEFT':\n            case 'RIGHT':\n                direction = RULE_DIRECTION[this.modifier]\n                break\n            case 'STATIONARY':\n                direction = RULE_DIRECTION.STATIONARY\n                break\n            case 'ACTION':\n                direction = RULE_DIRECTION.ACTION\n                break\n            case 'RANDOMDIR':\n                direction = RULE_DIRECTION.RANDOMDIR\n                break\n            default:\n                direction = null\n        }\n        return cacheSetAndGet(tileCache, new SimpleTileWithModifier(this.__source, this.isNo(), this.isRandom(), direction, this.tile, this.debugFlag))\n    }\n\n    public isNo() {\n        return this.modifier === M_NO\n    }\n    public isRandom() {\n        return this.modifier === AST_RULE_MODIFIER.RANDOM\n    }\n}\n\n// Extend RuleBracketNeighbor so that NeighborPair doesn't break\nexport class ASTRuleBracketNeighborHack extends ASTRuleBracketNeighbor {\n    public fields: object\n\n    // These should be addressed as we write the interpreter\n    constructor(source: IGameCode, fields: object, debugFlag: DEBUG_FLAG) {\n        super(source, [], debugFlag)\n        this.fields = fields\n    }\n}\n\nexport abstract class AbstractRuleish extends BaseForLines {\n\n    public abstract simplify(ruleCache: Map<string, SimpleRule>,\n                             bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>,\n                             tileCache: Map<string, SimpleTileWithModifier>): IRule\n}\n\nexport class ASTRuleLoop extends AbstractRuleish {\n    private readonly rules: AbstractRuleish[]\n\n    constructor(source: IGameCode, rules: AbstractRuleish[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.rules = rules\n    }\n\n    public simplify(ruleCache: Map<string, SimpleRule>, bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>, tileCache: Map<string, SimpleTileWithModifier>) {\n        return new SimpleRuleLoop(this.__source, false/*isRandom*/, this.rules.map((rule) => rule.simplify(ruleCache, bracketCache, neighborCache, tileCache)))\n    }\n}\n\nexport class ASTRuleGroup extends BaseForLines {\n    private isRandom: boolean\n    private readonly rules: AbstractRuleish[]\n    constructor(source: IGameCode, isRandom: boolean, rules: AbstractRuleish[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.isRandom = isRandom\n        this.rules = rules\n    }\n    // Yes. One propagates isRandom while the other does not\n    public simplify(ruleCache: Map<string, SimpleRule>, bracketCache: Map<string, ISimpleBracket>, neighborCache: Map<string, SimpleNeighbor>, tileCache: Map<string, SimpleTileWithModifier>) {\n        const rules = this.rules.map((rule) => rule.simplify(ruleCache, bracketCache, neighborCache, tileCache))\n        // if (rules.length === 1) {\n        //     return rules[0]\n        // }\n        return new SimpleRuleGroup(this.__source, this.isRandom, rules)\n    }\n\n}\n\nexport function relativeDirectionToAbsolute(currentDirection: RULE_DIRECTION, relativeModifier: string) {\n    let currentDir\n    switch (currentDirection) {\n        case RULE_DIRECTION.RIGHT:\n            currentDir = 0\n            break\n        case RULE_DIRECTION.UP:\n            currentDir = 1\n            break\n        case RULE_DIRECTION.LEFT:\n            currentDir = 2\n            break\n        case RULE_DIRECTION.DOWN:\n            currentDir = 3\n            break\n        default:\n            throw new Error(`BUG! Invalid rule direction \"${currentDirection}`)\n    }\n\n    switch (relativeModifier) {\n        case '>':\n            currentDir += 0\n            break\n        case '^':\n            currentDir += 1\n            break\n        case '<':\n            currentDir += 2\n            break\n        case 'v':\n            currentDir += 3\n            break\n        default:\n            throw new Error(`BUG! invalid relative direction \"${relativeModifier}\"`)\n    }\n    switch (currentDir % 4) {\n        case 0:\n            return RULE_DIRECTION.RIGHT\n        case 1:\n            return RULE_DIRECTION.UP\n        case 2:\n            return RULE_DIRECTION.LEFT\n        case 3:\n            return RULE_DIRECTION.DOWN\n        default:\n            throw new Error(`BUG! Incorrectly computed rule direction \"${currentDirection}\" \"${relativeModifier}\"`)\n    }\n}\n","import BitSet from 'bitset'\nimport { Cell, Level } from '../engine'\nimport LruCache from '../lruCache'\nimport { SpriteBitSet } from '../spriteBitSet'\nimport TerminalUI from '../ui/terminal'\nimport { _flatten, DEBUG_FLAG, ICacheable, nextRandom, opposite, Optional, RULE_DIRECTION, setIntersection } from '../util'\nimport { BaseForLines, IGameCode } from './BaseForLines'\nimport { CollisionLayer } from './collisionLayer'\nimport { AbstractCommand } from './command'\nimport { IGameNode } from './game'\nimport { GameSprite, IGameTile } from './tile'\nconst BitSet2 = require('bitset') // tslint:disable-line:no-var-requires\n\nconst MAX_ITERATIONS_IN_LOOP = 350 // Set by the Random World Generation game\nconst LRU_CACHE_SIZE = 50 // 1000\n\nexport const SIMPLE_DIRECTION_DIRECTIONS = [\n    RULE_DIRECTION.RIGHT,\n    RULE_DIRECTION.DOWN,\n    RULE_DIRECTION.LEFT,\n    RULE_DIRECTION.UP\n]\n\nclass BracketPair<A> {\n    public readonly condition: Optional<A>\n    public action: Optional<A>\n    constructor(condition: Optional<A>, action: Optional<A>) {\n        this.condition = condition\n        this.action = action\n    }\n}\n\nclass ExtraPair<A> extends BracketPair<A> {\n    public readonly extra: boolean\n    constructor(condition: Optional<A>, action: Optional<A>, extra: boolean) {\n        super(condition, action)\n        this.extra = extra\n    }\n}\n\nexport interface IRule extends IGameNode {\n    hasMatches: (level: Level) => boolean\n    evaluate: (level: Level, onlyEvaluateFirstMatch: boolean) => IMutation[]\n    getChildRules: () => IRule[]\n    isLate: () => boolean\n    hasRigid: () => boolean\n    clearCaches: () => void\n    addCellsToEmptyRules: (cells: Iterable<Cell>) => void\n\n    totalTimeMs?: number\n    timesRan?: number\n    toKey(): string\n\n}\n\nexport interface IMutation {\n    hasCell: () => boolean\n    getCell: () => Cell\n    getCommand: () => AbstractCommand\n}\n\nclass CellMutation implements IMutation {\n    private cell: Cell\n    constructor(cell: Cell) {\n        this.cell = cell\n    }\n    public hasCell() { return true }\n    public getCell() { return this.cell }\n    public getCommand(): AbstractCommand {\n        throw new Error(`BUG: check hasCommand first`)\n    }\n}\n\nclass CommandMutation implements IMutation {\n    private command: AbstractCommand\n    constructor(command: AbstractCommand) {\n        this.command = command\n    }\n    public getCommand() { return this.command }\n    public hasCell() { return false }\n    public getCell(): Cell {\n        throw new Error(`BUG: check hasCell first`)\n    }\n}\n\n// Converts `[ [1,2], [a,b] ]` to:\n// `[ [1,a], [2,a], [1,b], [2,b] ]`\nfunction buildPermutations<T>(cells: T[][]) {\n    let tuples: T[][] = [[]]\n\n    for (const row of cells) {\n        const newtuples = []\n        for (const valtoappend of row) {\n            for (const tuple of tuples) {\n                const newtuple = tuple.concat([valtoappend])\n                newtuples.push(newtuple)\n            }\n        }\n        tuples = newtuples\n    }\n    return tuples\n}\n\nexport class SimpleRuleGroup extends BaseForLines implements IRule {\n    private rules: IRule[]\n    private isRandom: boolean\n    constructor(source: IGameCode, isRandom: boolean, rules: IRule[]) {\n        super(source)\n        this.rules = rules\n        this.isRandom = isRandom\n    }\n\n    public hasMatches(level: Level) {\n        for (const rule of this.rules) {\n            if (rule.hasMatches(level)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public evaluate(level: Level, onlyEvaluateFirstMatch: boolean) {\n        let start\n        if (process.env.LOG_LEVEL === 'debug') {\n            start = Date.now()\n        }\n        // Keep looping as long as one of the rules evaluated something\n        const allMutations: IMutation[][] = []\n        let iteration\n        for (iteration = 0; iteration < MAX_ITERATIONS_IN_LOOP; iteration++) {\n            if (process.env.NODE_ENV === 'development' && iteration === MAX_ITERATIONS_IN_LOOP - 10) {\n                // Provide a breakpoint just before we run out of MAX_ITERATIONS_IN_LOOP\n                // so that we can step through the evaluations.\n                console.error(this.toString()) // tslint:disable-line:no-console\n                console.error('BUG: Iterated too many times in startloop or + (rule group)') // tslint:disable-line:no-console\n                if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n            }\n            if (iteration === MAX_ITERATIONS_IN_LOOP - 1) {\n                throw new Error(`BUG: Iterated too many times in startloop or + (rule group)\\n${this.toString()}`)\n            }\n            if (this.isRandom) {\n                // Randomly pick one of the rules. I wonder if it needs to be smart\n                // It is important that it only be evaluated once (hence the returns)\n                const evaluatableRules = this.rules.filter((r) => r.hasMatches(level))\n                if (evaluatableRules.length === 0) {\n                    return []\n                } else if (evaluatableRules.length === 1) {\n                    const ret = evaluatableRules[0].evaluate(level, true/*only evaluate the 1st match because we are RANDOM and in a loop*/)\n                    return ret\n                } else {\n                    const randomIndex = nextRandom(evaluatableRules.length)\n                    const rule = evaluatableRules[randomIndex]\n                    const ret = rule.evaluate(level, true/*only evaluate the 1st match because we are RANDOM and in a loop*/)\n                    return ret\n                }\n            } else {\n                let evaluatedSomething = false\n                for (const rule of this.rules) {\n                    // Keep evaluating the rule until nothing changes\n                    const ret = rule.evaluate(level, onlyEvaluateFirstMatch)\n                    if (ret.length > 0) {\n                        // filter because a Rule may have caused only command mutations\n                        if (ret.filter((m) => m.hasCell()).length > 0) {\n                            evaluatedSomething = true\n                        }\n                        if (onlyEvaluateFirstMatch) {\n                            return ret\n                        }\n                        allMutations.push(ret)\n                    }\n                }\n                if (!evaluatedSomething) {\n                    break\n                }\n            }\n\n        }\n\n        if (process.env.LOG_LEVEL === 'debug') {\n            if (allMutations.length > 0) {\n                if (start && (Date.now() - start) > 30 /*only show times for rules that took a long time*/) {\n                    console.error(`Rule ${this.__getSourceLineAndColumn().lineNum} applied. ${iteration === 1 ? '' : `(x${iteration})`} [[${Date.now() - start}ms]]`) // tslint:disable-line:no-console\n                } else {\n                    console.error(`Rule ${this.__getSourceLineAndColumn().lineNum} applied. ${iteration === 1 ? '' : `(x${iteration})`}`) // tslint:disable-line:no-console\n                }\n            }\n        }\n        return _flatten(allMutations)\n\n        // let mutations = []\n        // for (const rule of this._rules) {\n        //     const ret = rule.evaluate()\n        //     if (ret.length > 0) {\n        //         mutations = mutations.concat(ret)\n        //     }\n        // }\n        // return mutations\n    }\n\n    public clearCaches() {\n        for (const rule of this.rules) {\n            rule.clearCaches()\n        }\n    }\n\n    public getChildRules() {\n        return this.rules\n    }\n\n    public isLate() {\n        // All rules in a group should be parked as late if any is marked as late\n        return this.rules[0].isLate()\n    }\n\n    public hasRigid() {\n        for (const rule of this.rules) {\n            if (rule.hasRigid()) {\n                return true\n            }\n        }\n        return false\n    }\n    public addCellsToEmptyRules(cells: Iterable<Cell>) {\n        for (const rule of this.rules) {\n            rule.addCellsToEmptyRules(cells)\n        }\n    }\n    public toKey() {\n        return this.rules.map((r) => r.toKey()).join('\\n')\n    }\n}\n\nexport class SimpleRuleLoop extends SimpleRuleGroup {\n}\n\n// This is a rule that has been expanded from `DOWN [ > player < cat RIGHT dog ] -> [ ^ crate ]` to:\n// DOWN [ DOWN player UP cat RIGHT dog ] -> [ RIGHT crate ]\n//\n// And a more complicated example:\n// DOWN [ > player LEFT cat HORIZONTAL dog < crate VERTICAL wall ] -> [ ^ crate  HORIZONTAL dog ]\n//\n// DOWN [ DOWN player LEFT cat LEFT dog UP crate UP wall ] -> [ right crate LEFT dog ]\n// DOWN [ DOWN player LEFT cat LEFT dog UP crate DOWN wall ] -> [ right crate LEFT dog ]\n// DOWN [ DOWN player LEFT cat RIGHT dog UP crate UP wall ] -> [ RIGHT crate RIGHT dog ]\n// DOWN [ DOWN player LEFT cat RIGHT dog UP crate DOWN wall ] -> [ RIGHT crate RIGHT dog ]\nexport class SimpleRule extends BaseForLines implements ICacheable, IRule {\n    private evaluationDirection: RULE_DIRECTION\n    private conditionBrackets: ISimpleBracket[]\n    private actionBrackets: ISimpleBracket[]\n    private commands: AbstractCommand[]\n    private _isLate: boolean\n    private readonly isRigid: boolean\n    private isSubscribedToCellChanges: boolean\n    private debugFlag: Optional<DEBUG_FLAG>\n\n    constructor(source: IGameCode, evaluationDirection: RULE_DIRECTION,\n                conditionBrackets: ISimpleBracket[], actionBrackets: ISimpleBracket[],\n                commands: AbstractCommand[], isLate: boolean, isRigid: boolean, debugFlag: Optional<DEBUG_FLAG>) {\n\n        super(source)\n        this.evaluationDirection = evaluationDirection\n        this.conditionBrackets = conditionBrackets\n        this.actionBrackets = actionBrackets\n        this.commands = commands\n        this._isLate = isLate\n        this.isRigid = isRigid\n        this.debugFlag = debugFlag\n        this.isSubscribedToCellChanges = false\n\n        if (actionBrackets.length > 0) {\n            for (let index = 0; index < conditionBrackets.length; index++) {\n                conditionBrackets[index].prepareAction(actionBrackets[index])\n            }\n        }\n    }\n    public toKey() {\n        const dir = this.dependsOnDirection() ? this.evaluationDirection : ''\n        const conditions = this.conditionBrackets.map((x) => x.toKey())\n        const actions = this.actionBrackets.map((x) => x.toKey())\n        const commands = this.commands.map((c) => c.toKey())\n        return `{Late?${this._isLate}} {Rigid?${this.isRigid}}  ${dir} ${conditions} -> ${actions} ${commands.join(' ')} {debugger?${this.debugFlag}}`\n    }\n    public getChildRules(): IRule[] {\n        return []\n    }\n    public subscribeToCellChanges() {\n        if (!this.isSubscribedToCellChanges) {\n            // Subscribe the bracket and neighbors to cell Changes (only the condition side)\n            for (const bracket of this.conditionBrackets) {\n                bracket.subscribeToNeighborChanges()\n            }\n            this.isSubscribedToCellChanges = true\n        }\n    }\n\n    public clearCaches() {\n        for (const bracket of this.conditionBrackets) {\n            bracket.clearCaches()\n        }\n    }\n\n    public getMatches(level: Level) {\n        const allBracketsToProcess: MatchedCellsForRule[][] = []\n        for (let index = 0; index < this.conditionBrackets.length; index++) {\n            const condition = this.conditionBrackets[index]\n            const action = this.actionBrackets[index]\n            const bracketMatches = condition.getMatches(level, action)\n            if (bracketMatches.length === 0) {\n                return []\n            }\n            allBracketsToProcess.push(bracketMatches)\n        }\n        return allBracketsToProcess\n    }\n\n    public evaluate(level: Level, onlyEvaluateFirstMatch: boolean) {\n        // Verify that each condition bracket has matches\n        // for (const condition of this.conditionBrackets) {\n        //     if (!condition.hasFirstCells()) {\n        //         if (process.env['NODE_ENV'] === 'development' && this.debugFlag === DEBUG_FLAG.BREAKPOINT_REMOVE) {\n        //             // A \"DEBUGGER_REMOVE\" flag was set in the game so we are pausing here\n        //             if (process.stdout) { TerminalUI.debugRenderScreen(); } debugger\n        //         }\n        //         return [] // Rule did not match, so nothing ran\n        //     }\n        // }\n\n        // If a Rule cannot impact itself then the evaluation order does not matter.\n        // We can vastly simplify the evaluation in that case\n        let ret: IMutation[] = []\n        if (process.env.NODE_ENV === 'development') {\n            // A \"DEBUGGER\" flag was set in the game so we are pausing here\n            if (process.env.LOG_LEVEL === 'debug' && process.stdout) { TerminalUI.renderScreen(false) }\n            if (this.debugFlag === DEBUG_FLAG.BREAKPOINT) {\n                debugger // tslint:disable-line:no-debugger\n            }\n        }\n\n        const allBracketsToProcess = this.getMatches(level)\n\n        if (allBracketsToProcess.length === 0) {\n            return []\n        }\n\n        // Some rules only contain commands.\n        // If there are actionBrackets then evaluate them.\n        // Get ready to Evaluate\n        if (this.actionBrackets.length > 0) {\n            const cellPermutations = buildPermutations(allBracketsToProcess)\n\n            const allMutations: IMutation[][] = []\n\n            for (const permutation of cellPermutations) {\n                let didAllBracketsStillMatch = true\n                const magicOrTiles = new Map()\n                // Populate the magicOrTiles. This needs to be done first because of things like:\n                // [ Player ] [ Color ] -> [ Player Color ] [ ]\n\n                // Check that all Cells still match\n                for (const x of permutation) {\n                    if (!x.doesStillMatch()) {\n                        didAllBracketsStillMatch = false\n                        break\n                    }\n                    x.populateMagicOrTiles(magicOrTiles)\n                }\n                // break if the cells no longer match\n                if (!didAllBracketsStillMatch) {\n                    continue\n                }\n\n                for (const x of permutation) {\n                    if (!x.doesStillMatch()) {\n                        // part of the rule not longer matches so stop. (Test if that is the correct behavior)\n                        // E.g. [ Player ] [ Player ] [ ] -> [ ] [ ] [ SeeIfThisIsExecuted ]\n                        continue\n                    }\n                    allMutations.push(x.evaluate(magicOrTiles))\n                    if (process.env.NODE_ENV === 'development') {\n                        this.__incrementCoverage()\n                    }\n                }\n\n                // Only evaluate once. This is a HACK since it always picks the 1st cell that matched rather than a RANDOM cell\n                if (onlyEvaluateFirstMatch) {\n                    break // evaluate the subsequent brackets but do not continue evaluating cells\n                }\n\n            }\n\n            ret = _flatten(allMutations)\n        }\n\n        // Append any Commands that need to be evaluated (only if the rule was evaluated at least once)\n        for (const command of this.commands) {\n            ret.push(new CommandMutation(command))\n        }\n        return ret\n    }\n\n    public hasMatches(level: Level) {\n        for (let index = 0; index < this.conditionBrackets.length; index++) {\n            const condition = this.conditionBrackets[index]\n            const action = this.actionBrackets[index]\n            if (!condition.hasMatches(level, action)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    public isLate() { return this._isLate }\n    public hasRigid() { return this.isRigid }\n\n    public canCollapseBecauseBracketsMatch(rule: SimpleRule) {\n        for (let index = 0; index < this.conditionBrackets.length; index++) {\n            if (this.conditionBrackets[index] !== rule.conditionBrackets[index]) {\n                return false\n            }\n            // also ensure there is only one neighbor.\n            // that way we can de-duplicate the rule\n            if (this.conditionBrackets[index]._getAllNeighbors().length > 1) {\n                return false\n            }\n        }\n        for (let index = 0; index < this.actionBrackets.length; index++) {\n            if (this.actionBrackets[index] !== rule.actionBrackets[index]) {\n                return false\n            }\n        }\n        return true\n    }\n    public addCellsToEmptyRules(cells: Iterable<Cell>) {\n        for (const bracket of this.conditionBrackets) {\n            bracket.addCellsToEmptyRules(cells)\n        }\n    }\n    private dependsOnDirection() {\n        return !!(this.conditionBrackets.find((b) => b.dependsOnDirection()) || this.actionBrackets.find((b) => b.dependsOnDirection()))\n    }\n\n}\n\nexport class SimpleTileWithModifier extends BaseForLines implements ICacheable {\n    public readonly _isNegated: boolean\n    public readonly _isRandom: boolean\n    public readonly _direction: Optional<RULE_DIRECTION>\n    public readonly _tile: IGameTile\n    public readonly _debugFlag: Optional<DEBUG_FLAG>\n    private neighbors: Set<SimpleNeighbor>\n    private trickleCells: Set<Cell>\n\n    constructor(source: IGameCode, isNegated: boolean, isRandom: boolean, direction: Optional<RULE_DIRECTION>, tile: IGameTile, debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this._isNegated = isNegated\n        this._isRandom = isRandom\n        this._direction = direction\n        this._tile = tile\n        this.neighbors = new Set()\n        this._debugFlag = debugFlag\n        this.trickleCells = new Set()\n    }\n\n    public toKey(ignoreDebugFlag?: boolean) {\n        const sprites = this._tile.getSprites().map((sprite) => sprite.getName()).sort()\n        if (ignoreDebugFlag) {\n            return `{-?${this._isNegated}} {#?${this._isRandom}} dir=\"${this._direction}\" [${sprites.join(' ')}]`\n        } else {\n            return `{-?${this._isNegated}} {#?${this._isRandom}} dir=\"${this._direction}\" [${sprites.join(' ')}]{debugging?${!!this._debugFlag}}`\n        }\n    }\n\n    public equals(t: SimpleTileWithModifier) {\n        return this._isNegated === t._isNegated && this._tile.equals(t._tile) && this._direction === t._direction && this._isRandom === t._isRandom\n    }\n\n    public clearCaches() {\n        // this._localCache.clear()\n    }\n\n    public isNo() {\n        return this._isNegated\n    }\n    public isRandom() {\n        return this._isRandom\n    }\n\n    public getCollisionLayers() {\n        const collisionLayers = new Set<CollisionLayer>()\n        for (const sprite of this._tile.getSprites()) {\n            collisionLayers.add(sprite.getCollisionLayer())\n        }\n        return collisionLayers\n    }\n\n    // This should only be called on Condition Brackets\n    public subscribeToCellChanges(neighbor: SimpleNeighbor) {\n        this.neighbors.add(neighbor)\n\n        this._tile.subscribeToCellChanges(this)\n    }\n\n    public addCells(tile: IGameTile, sprite: GameSprite, cells: Cell[], wantsToMove: Optional<RULE_DIRECTION>) {\n        if (process.env.NODE_ENV === 'development' && this._debugFlag === DEBUG_FLAG.BREAKPOINT) {\n            // Pause here because it was marked in the code\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n        // Cells all have the same sprites, so if the 1st matches, they all do.\n        // Also, we only need to check that the direction matches (optimization),\n        // we do not need to re-check that the Tile matches\n        let shouldAdd = true\n        if (!this._direction || wantsToMove === this._direction) {\n            shouldAdd = !this.isNo()\n        } else if (this._tile.isOr() && this.matchesFirstCell(cells, wantsToMove)) {\n            // In OR tiles, one of the sprites may add/remove a direction but\n            // another sprite may still have the direction\n            // so we check by doing the long and expensive comparison above\n            shouldAdd = !this.isNo()\n        } else {\n            shouldAdd = this.isNo()\n        }\n\n        if (shouldAdd) {\n            for (const cell of cells) {\n                this.trickleCells.add(cell)\n            }\n            // const cellsNotInCache = setDifference(new Set(cells), new Set(this._localCache.keys()))\n            for (const neighbor of this.neighbors) {\n                // neighbor.addCells(this, sprite, cellsNotInCache, wantsToMove)\n                neighbor.addCells(this, sprite, cells, wantsToMove)\n            }\n        } else {\n            for (const cell of cells) {\n                this.trickleCells.delete(cell)\n            }\n            // const cellsInCache = setIntersection(new Set(cells), new Set(this._localCache.keys()))\n            for (const neighbor of this.neighbors) {\n                // neighbor.removeCells(this, sprite, cellsInCache)\n                neighbor.removeCells(this, sprite, cells)\n            }\n        }\n    }\n    public updateCells(sprite: GameSprite, cells: Cell[], wantsToMove: Optional<RULE_DIRECTION>) {\n        if (process.env.NODE_ENV === 'development' && this._debugFlag === DEBUG_FLAG.BREAKPOINT) {\n            // Pause here because it was marked in the code\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n        // Cells all have the same sprites, so if the 1st matches, they all do\n        if (this.matchesFirstCell(cells, wantsToMove)) {\n            for (const cell of cells) {\n                this.trickleCells.add(cell)\n            }\n            if (wantsToMove) {\n                for (const neighbor of this.neighbors) {\n                    neighbor.updateCells(this, sprite, cells, wantsToMove)\n                }\n            }\n        } else {\n            for (const cell of cells) {\n                this.trickleCells.delete(cell)\n            }\n            for (const neighbor of this.neighbors) {\n                neighbor.removeCells(this, sprite, cells)\n            }\n        }\n    }\n    public removeCells(tile: IGameTile, sprite: GameSprite, cells: Cell[]) {\n        if (process.env.NODE_ENV === 'development' && this._debugFlag === DEBUG_FLAG.BREAKPOINT_REMOVE) {\n            // Pause here because it was marked in the code\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n        // Cells all have the same sprites, so if the 1st matches, they all do\n        // OR Tiles need to be checked to see if the tile still matches.\n        // Non-OR tiles can be safely removed\n        let shouldAdd = false\n        if (this._tile.isOr()) {\n            shouldAdd = this.matchesFirstCell(cells, null)\n        } else {\n            shouldAdd = this.isNo()\n        }\n        if (shouldAdd) {\n            for (const cell of cells) {\n                this.trickleCells.add(cell)\n            }\n            for (const neighbor of this.neighbors) {\n                neighbor.addCells(this, sprite, cells, RULE_DIRECTION.STATIONARY)\n            }\n        } else {\n            for (const cell of cells) {\n                this.trickleCells.delete(cell)\n            }\n            for (const neighbor of this.neighbors) {\n                neighbor.removeCells(this, sprite, cells)\n            }\n        }\n    }\n    public hasCell(cell: Cell) {\n        return this.trickleCells.has(cell)\n    }\n\n    private matchesCellWantsToMove(cell: Cell, wantsToMove: Optional<RULE_DIRECTION>) {\n        const hasTile = this._tile.hasCell(cell)\n        const didMatch = this._isNegated !== (hasTile && (this._direction === wantsToMove || this._direction === null))\n\n        if (didMatch) {\n            return true\n        } else if (!this._direction) {\n            return false\n        } else {\n            // do the more expensive match\n            for (const sprite of this._tile.getSpritesThatMatch(cell)) {\n                if (this._direction === cell.getWantsToMove(sprite)) {\n                    return true\n                }\n            }\n            return false\n        }\n    }\n\n    private matchesFirstCell(cells: Cell[], wantsToMove: Optional<RULE_DIRECTION>) {\n        return this.matchesCellWantsToMove(cells[0], wantsToMove)\n    }\n}\n\nexport abstract class ISimpleBracket extends BaseForLines implements ICacheable {\n    public readonly debugFlag: Optional<DEBUG_FLAG>\n    public readonly direction: RULE_DIRECTION\n    protected firstCells: Set<Cell>\n    private allNeighbors: SimpleNeighbor[]\n    constructor(source: IGameCode, direction: RULE_DIRECTION, allNeighbors: SimpleNeighbor[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        this.direction = direction\n        this.debugFlag = debugFlag\n        this.allNeighbors = allNeighbors\n        this.firstCells = new Set<Cell>()\n    }\n\n    public abstract subscribeToNeighborChanges(): void\n    public abstract toKey(ignoreDebugFlag?: boolean): string\n    public abstract clearCaches(): void\n    public abstract prepareAction(action: ISimpleBracket): void\n    public abstract getNeighbors(): SimpleNeighbor[]\n    public abstract addCell(index: number, neighbor: SimpleNeighbor, t: SimpleTileWithModifier, sprite: GameSprite, cell: Cell, wantsToMove: Optional<RULE_DIRECTION>): void\n    public abstract removeCell(index: number, neighbor: SimpleNeighbor, t: SimpleTileWithModifier, sprite: GameSprite, cell: Cell): void\n    public abstract addCellsToEmptyRules(cells: Iterable<Cell>): void\n    public abstract getMatches(level: Level, actionBracket: Optional<ISimpleBracket>): MatchedCellsForRule[]\n    public abstract dependsOnDirection(): boolean\n\n    public _getAllNeighbors() {\n        return this.allNeighbors\n    }\n    public hasMatches(level: Level, actionBracket: Optional<ISimpleBracket>) {\n        return this.getMatches(level, actionBracket).length > 0\n    }\n\n}\n\ninterface IMatchedCellAndCorrespondingNeighbors {\n    cell: Cell,\n    condition: SimpleNeighbor,\n    action: Optional<SimpleNeighbor>\n}\n\nclass MatchedCellsForRule {\n    public readonly cellsAndNeighbors: Iterable<IMatchedCellAndCorrespondingNeighbors>\n    constructor(cellsAndNeighbors: Iterable<IMatchedCellAndCorrespondingNeighbors>) {\n        this.cellsAndNeighbors = cellsAndNeighbors\n    }\n\n    public firstCell() {\n        for (const { cell } of this.cellsAndNeighbors) {\n            return cell\n        }\n        throw new Error(`BUG: ? No cells were included in the match`)\n    }\n\n    public lastCell() {\n        let ret\n        for (const { cell } of this.cellsAndNeighbors) {\n            ret = cell\n        }\n        if (ret) {\n            return ret\n        }\n        throw new Error(`BUG: ? No cells were included in the match`)\n    }\n\n    public doesStillMatch() {\n        for (const { cell, condition } of this.cellsAndNeighbors) {\n            if (!condition.matchesCellSimple(cell)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    public populateMagicOrTiles(magicOrTiles: Map<IGameTile, Set<GameSprite>>) {\n        // populate the OR tiles in all neighbors first. Example:\n        // [ | Player ] -> [ Player | ]\n        for (const { cell, condition } of this.cellsAndNeighbors) {\n            condition.populateMagicOrTiles(cell, magicOrTiles)\n        }\n    }\n\n    public evaluate(magicOrTiles: Map<IGameTile, Set<GameSprite>>) {\n        const mutations: CellMutation[] = []\n        for (const { cell, condition, action } of this.cellsAndNeighbors) {\n            if (!action) {\n                throw new Error(`BUG: Should not have tried to evaluate something when there is no action`)\n            }\n            const mutation = condition.evaluate(action, cell, magicOrTiles)\n            if (mutation) {\n                mutations.push(mutation)\n            }\n        }\n        return mutations\n    }\n}\n\nexport class SimpleBracket extends ISimpleBracket {\n    protected actionDebugFlag: Optional<DEBUG_FLAG>\n    private neighbors: SimpleNeighbor[]\n    private ellipsisBracketListeners: Map<SimpleEllipsisBracket, BEFORE_OR_AFTER>\n    private readonly spritesPresentInRowOrColumn: SpriteBitSet\n    private readonly anySpritesPresentInRowOrColumn: SpriteBitSet\n\n    constructor(source: IGameCode, direction: RULE_DIRECTION, neighbors: SimpleNeighbor[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source, direction, neighbors, debugFlag)\n        this.neighbors = neighbors\n        this.ellipsisBracketListeners = new Map()\n\n        // Compute which sprites need to be in the Row/Column to check cells in that row/column (optimization)\n        this.spritesPresentInRowOrColumn = this.neighbors[0].spritesPresent.union(this.neighbors.map((n) => n.spritesPresent))\n        const anySprites = []\n        for (const neighbor of this.neighbors) {\n            for (const a of neighbor.anySpritesPresent) {\n                anySprites.push(a)\n            }\n        }\n        this.anySpritesPresentInRowOrColumn = (new SpriteBitSet()).union(anySprites)\n    }\n    public toKey(ignoreDebugFlag?: boolean) {\n        const dir = this.dependsOnDirection() ? this.direction : ''\n        if (ignoreDebugFlag) {\n            return `{${dir}[${this.neighbors.map((n) => n.toKey(ignoreDebugFlag)).join('|')}]}`\n        } else {\n            return `{${dir}[${this.neighbors.map((n) => n.toKey(ignoreDebugFlag)).join('|')}]{debugging?${!!this.debugFlag}}}`\n        }\n    }\n\n    public dependsOnDirection() {\n        return this.neighbors.length > 1 || !!this.neighbors.find((n) => n.dependsOnDirection())\n    }\n\n    public subscribeToNeighborChanges() {\n        if (this.shouldUseOnDemandMethod()) { return } // Skip. Do not subscribe to changes because we will use .getMatches() to find the matches\n        this.neighbors.forEach((neighbor, index) => {\n            neighbor.subscribeToTileChanges(this, index)\n        })\n    }\n\n    public addEllipsisBracket(bracket: SimpleEllipsisBracket, token: BEFORE_OR_AFTER) {\n        this.ellipsisBracketListeners.set(bracket, token)\n    }\n\n    public clearCaches() {\n        this.firstCells.clear()\n        for (const neighbor of this.neighbors) {\n            neighbor.clearCaches()\n        }\n    }\n\n    public getNeighbors() { return this.neighbors }\n\n    public prepareAction(actionBracket: ISimpleBracket) {\n        const actionBracketSimple = actionBracket as SimpleBracket // since we know the condition and action side need to match\n        this.actionDebugFlag = actionBracketSimple.debugFlag\n        for (let index = 0; index < this.neighbors.length; index++) {\n            const condition = this.neighbors[index]\n            const action = actionBracketSimple.neighbors[index]\n            condition.prepareAction(action)\n        }\n    }\n\n    public addCellsToEmptyRules(cells: Iterable<Cell>) {\n        if (this.neighbors.length === 1) {\n            if (this.neighbors[0]._tilesWithModifier.size === 0) {\n                for (const cell of cells) {\n                    this._addFirstCell(cell)\n                }\n            }\n        }\n    }\n\n    public _addFirstCell(firstCell: Cell) {\n        if (process.env.NODE_ENV === 'development' && this.debugFlag === DEBUG_FLAG.BREAKPOINT) {\n            // Pausing here because it was marked in the code\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n        this.firstCells.add(firstCell)\n        for (const [ellipsisBracket, token] of this.ellipsisBracketListeners) {\n            ellipsisBracket.addFirstCell(this, firstCell, token)\n        }\n    }\n\n    public addCell(index: number, neighbor: SimpleNeighbor, t: SimpleTileWithModifier, sprite: GameSprite, cell: Cell, wantsToMove: Optional<RULE_DIRECTION>) {\n        // check if downstream neighbors match\n        if (!this.matchesDownstream(cell, index)) {\n            // Try to remove the match if there is one\n            const firstCell = this.getUpstream(cell, index)\n            if (firstCell) {\n                this._removeFirstCell(cell)\n            }\n            return\n        }\n        // Loop Upstream\n        // check the neighbors upstream of curCell\n        const firstCellUp = this.matchesUpstream(cell, index)\n        if (!firstCellUp) {\n            // Try to remove the match if there is one\n            const firstCellMatched = this.getUpstream(cell, index)\n            if (firstCellMatched) {\n                this._removeFirstCell(firstCellMatched)\n            }\n            return\n        }\n\n        // Add to the set of firstNeighbors\n        // We have a match. Add to the firstCells set.\n        this._addFirstCell(firstCellUp)\n    }\n    public removeCell(index: number, neighbor: SimpleNeighbor, t: SimpleTileWithModifier, sprite: GameSprite, cell: Cell) {\n        // cell was removed\n        // Loop Upstream\n        const firstCell = this.getFirstCellToRemove(cell, index)\n        // Bracket might not match for all directions (likely not), so we might not find a firstCell to remove\n        // But that's OK.\n        if (firstCell && this.firstCells.has(firstCell)) {\n            this._removeFirstCell(firstCell)\n        }\n    }\n\n    public shouldUseOnDemandMethod() {\n        // return true\n        // return false\n        // return this.neighbors.length === 1\n        // return this.neighbors.length !== 1\n        return process.env.PUZZLESCRIPT_METHOD === 'ondemand'\n    }\n\n    public getMatchesByTrickling(level: Level, actionBracket: Optional<SimpleBracket>) {\n        const matches: MatchedCellsForRule[] = []\n        for (const firstCell of this.firstCells) {\n            this.addToCellMatches(matches, firstCell, actionBracket)\n        }\n        return matches\n    }\n\n    public getMatchesByLooping(level: Level, actionBracket: Optional<SimpleBracket>) {\n        const matches: MatchedCellsForRule[] = []\n        // Naiive version:\n        // for (const row of level.getCells()) {\n        //     for (const cell of row) {\n        //         checkCell(cell)\n        //     }\n        // }\n        const cells = level.getCells()\n        const rowCount = cells.length\n        const colCount = cells[0].length\n        switch (this.direction) {\n            case RULE_DIRECTION.UP:\n            case RULE_DIRECTION.DOWN:\n                for (let colIndex = 0; colIndex < colCount; colIndex++) {\n                    if (level.colContainsSprites(colIndex, this.spritesPresentInRowOrColumn, this.anySpritesPresentInRowOrColumn)) {\n                        for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n                            this.addIfCellMatches(matches, level.getCell(rowIndex, colIndex), actionBracket)\n                        }\n                    }\n                }\n                break\n            case RULE_DIRECTION.LEFT:\n            case RULE_DIRECTION.RIGHT:\n                for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n                    if (level.rowContainsSprites(rowIndex, this.spritesPresentInRowOrColumn, this.anySpritesPresentInRowOrColumn)) {\n                        for (let colIndex = 0; colIndex < colCount; colIndex++) {\n                            this.addIfCellMatches(matches, level.getCell(rowIndex, colIndex), actionBracket)\n                        }\n                    }\n                }\n                break\n            default:\n                throw new Error(`BUG: Unsupported Direction \"${this.direction}\"`)\n        }\n        return matches\n    }\n\n    public getMatches(level: Level, actionBracket: Optional<SimpleBracket>) {\n        if (process.env.NODE_ENV === 'development' && this.debugFlag === DEBUG_FLAG.BREAKPOINT) {\n            // A \"DEBUGGER\" flag was set in the game so we are pausing here\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n\n        let matches\n        if (!this.shouldUseOnDemandMethod()) {\n            matches = this.getMatchesByTrickling(level, actionBracket)\n\n            if (process.env.VERIFY_MATCHES) {\n                const loopingMatches = this.getMatchesByLooping(level, actionBracket)\n                if (matches.length !== loopingMatches.length) {\n                    debugger // tslint:disable-line:no-debugger\n                    this.getMatchesByLooping(level, actionBracket) // run again so we can step through\n                    throw new Error(`Match lengths differ. Expected ${loopingMatches.length} but found ${matches.length}. \\n${this.toString()}`)\n                }\n\n            }\n        } else {\n            matches = this.getMatchesByLooping(level, actionBracket)\n        }\n\n        return matches\n    }\n\n    public getFirstCells() {\n        return this.firstCells\n    }\n\n    protected _removeFirstCell(firstCell: Cell) {\n        if (this.firstCells.has(firstCell)) {\n            if (process.env.NODE_ENV === 'development' && this.debugFlag === DEBUG_FLAG.BREAKPOINT_REMOVE) {\n                // Pausing here because it was marked in the code\n                if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n            }\n            this.firstCells.delete(firstCell)\n            for (const [ellipsisBracket, token] of this.ellipsisBracketListeners) {\n                ellipsisBracket.removeFirstCell(this, firstCell, token)\n            }\n        }\n    }\n\n    private matchesDownstream(cell: Cell, index: number) {\n        // Check all the neighbors and add the firstNeighbor to the set of matches for this direction\n        let matched = true\n        let curCell: Optional<Cell> = cell\n        // Loop Downstream\n        // check the neighbors downstream of curCell\n        for (let x = index + 1; x < this.neighbors.length; x++) {\n            curCell = curCell.getNeighbor(this.direction)\n            // TODO: Convert the neighbor check into a method\n            if (curCell && (this.neighbors[x]._tilesWithModifier.size === 0 || this.neighbors[x].matchesCellSimple(curCell))) {\n                // keep going\n            } else {\n                matched = false\n                break\n            }\n        }\n        return matched\n    }\n\n    private getUpstream(cell: Cell, index: number) {\n        let curCell: Optional<Cell> = cell\n        for (let x = index - 1; x >= 0; x--) {\n            curCell = curCell.getNeighbor(opposite(this.direction))\n            if (curCell) {\n                // keep going\n            } else {\n                return null\n            }\n        }\n        return curCell\n    }\n\n    private matchesUpstream(cell: Cell, index: number) {\n        let matched = true\n        let curCell: Optional<Cell> = cell\n        // check the neighbors upstream of curCell\n        for (let x = index - 1; x >= 0; x--) {\n            curCell = curCell.getNeighbor(opposite(this.direction))\n            if (curCell && (this.neighbors[x]._tilesWithModifier.size === 0 || this.neighbors[x].matchesCellSimple(curCell))) {\n                // keep going\n            } else {\n                matched = false\n                break\n            }\n        }\n        return matched ? curCell : null\n    }\n\n    private getFirstCellToRemove(cell: Cell, index: number) {\n        // Loop Upstream\n        // check the neighbors upstream of curCell\n        let matched = true\n        let curCell: Optional<Cell> = cell\n        // check the neighbors upstream of curCell\n        for (let x = index - 1; x >= 0; x--) {\n            curCell = curCell.getNeighbor(opposite(this.direction))\n            if (curCell) {\n                // keep going\n            } else {\n                matched = false\n                break\n            }\n        }\n        return matched ? curCell : null\n    }\n\n    private addToCellMatches(matches: MatchedCellsForRule[], cell: Cell, actionBracket: Optional<SimpleBracket>) {\n        const cellMatches = []\n        let curCell: Optional<Cell> = cell\n        let didAllNeighborsMatch = true\n        for (let index = 0; index < this.neighbors.length; index++) {\n            if (!curCell) {\n                didAllNeighborsMatch = false\n                break\n            }\n            const condition = this.neighbors[index]\n            let action\n            // Some rules only contain a condition bracket and a command\n            if (actionBracket) {\n                action = actionBracket.neighbors[index]\n            }\n            const x: IMatchedCellAndCorrespondingNeighbors = {\n                cell: curCell,\n                condition,\n                action\n            }\n            cellMatches.push(x)\n            curCell = curCell.getNeighbor(this.direction)\n        }\n        if (didAllNeighborsMatch) {\n            matches.push(new MatchedCellsForRule(cellMatches))\n        }\n    }\n\n    private addIfCellMatches(matches: MatchedCellsForRule[], cell: Cell, actionBracket: Optional<SimpleBracket>) {\n        if (this.neighbors[0].matchesCellSimple(cell) && this.matchesDownstream(cell, 0)) {\n            this.addToCellMatches(matches, cell, actionBracket)\n        }\n    }\n}\n\nenum BEFORE_OR_AFTER {\n    BEFORE,\n    AFTER\n}\n\nclass MultiMap<A, B> {\n    private map: Map<A, Set<B>>\n    constructor() {\n        this.map = new Map()\n    }\n    public clear() {\n        this.map.clear()\n    }\n    public has(a: A, b: B) {\n        const set = this.map.get(a)\n        if (set) {\n            return set.has(b)\n        }\n        return false\n    }\n    public getB(a: A) {\n        return this.map.get(a)\n    }\n    public add(a: A, b: B) {\n        let set = this.map.get(a)\n        if (!set) {\n            set = new Set()\n            this.map.set(a, set)\n        }\n        if (!set.has(b)) {\n            set.add(b)\n            return true\n        }\n        return false\n    }\n    public deleteAllA(a: A) {\n        this.map.delete(a)\n    }\n    public deleteAllB(b: B) {\n        const asRemoved = new Set()\n        for (const [a, set] of this.map) {\n            if (set.has(b)) {\n                set.delete(b)\n                if (set.size === 0) {\n                    this.map.delete(a)\n                    asRemoved.add(a)\n                }\n            }\n        }\n        return asRemoved\n    }\n    public delete(a: A, b: B) {\n        const set = this.map.get(a)\n        if (set) {\n            if (!set.has(b)) {\n                throw new Error(`BUG: Invariant error. Link did not exist so nothing to remove`)\n            }\n            set.delete(b)\n        }\n    }\n    public sizeA() {\n        return this.map.size\n    }\n    protected /*unused*/ hasA(a: A) {\n        return this.map.has(a)\n    }\n    protected /*unused*/ hasB(b: B) {\n        return !!this.getA(b)\n    }\n    protected /*unused*/ getA(b: B) {\n        const ret = new Set()\n        for (const [a, set] of this.map) {\n            if (set.has(b)) {\n                ret.add(a)\n            }\n        }\n        if (ret.size > 0) {\n            return ret\n        }\n        return undefined\n    }\n    protected /*unused*/ size() {\n        let size = 0\n        for (const set of this.map.values()) {\n            size += set.size\n        }\n        return size\n    }\n}\n\nexport class SimpleEllipsisBracket extends ISimpleBracket {\n    private beforeEllipsisBracket: SimpleBracket\n    private afterEllipsisBracket: SimpleBracket\n    private linkages: MultiMap<Cell, Cell> // 1 before may have many afters\n    constructor(source: IGameCode, direction: RULE_DIRECTION, beforeEllipsisNeighbors: SimpleNeighbor[], afterEllipsisNeighbors: SimpleNeighbor[], debugFlag: Optional<DEBUG_FLAG>) {\n        super(source, direction, [...beforeEllipsisNeighbors, ...afterEllipsisNeighbors], debugFlag)\n        this.beforeEllipsisBracket = new SimpleBracket(source, direction, beforeEllipsisNeighbors, debugFlag)\n        this.afterEllipsisBracket = new SimpleBracket(source, direction, afterEllipsisNeighbors, debugFlag)\n        this.linkages = new MultiMap()\n    }\n    public subscribeToNeighborChanges() {\n        this.beforeEllipsisBracket.subscribeToNeighborChanges()\n        this.afterEllipsisBracket.subscribeToNeighborChanges()\n        this.beforeEllipsisBracket.addEllipsisBracket(this, BEFORE_OR_AFTER.BEFORE)\n        this.afterEllipsisBracket.addEllipsisBracket(this, BEFORE_OR_AFTER.AFTER)\n    }\n    public toKey(ignoreDebugFlag?: boolean) {\n        return `[${this.direction} ${this.beforeEllipsisBracket.toKey(ignoreDebugFlag)} ... ${this.afterEllipsisBracket.toKey(ignoreDebugFlag)}]}`\n    }\n    public dependsOnDirection() {\n        return true\n    }\n\n    public getNeighbors() {\n        // throw new Error(`BUG: Should not be calling this method`)\n        return [] // TODO: Implement me\n    }\n\n    public clearCaches() {\n        this.firstCells.clear()\n        this.linkages.clear()\n        this.beforeEllipsisBracket.clearCaches()\n        this.afterEllipsisBracket.clearCaches()\n    }\n    public prepareAction(action: ISimpleBracket) {\n        const actionBracket = action as SimpleEllipsisBracket // since we know the condition and action side need to match\n        this.beforeEllipsisBracket.prepareAction(actionBracket.beforeEllipsisBracket)\n        this.afterEllipsisBracket.prepareAction(actionBracket.afterEllipsisBracket)\n    }\n    public addCellsToEmptyRules(cells: Iterable<Cell>) {\n        this.beforeEllipsisBracket.addCellsToEmptyRules(cells)\n        this.afterEllipsisBracket.addCellsToEmptyRules(cells)\n    }\n\n    public addCell(index: number, neighbor: SimpleNeighbor, t: SimpleTileWithModifier, sprite: GameSprite, cell: Cell, wantsToMove: Optional<RULE_DIRECTION>) {\n        throw new Error(`BUG: We should not be subscribed to these events`)\n    }\n    public removeCell(index: number, neighbor: SimpleNeighbor, t: SimpleTileWithModifier, sprite: GameSprite, cell: Cell) {\n        throw new Error(`BUG: We should not be subscribed to these events`)\n    }\n\n    public addFirstCell(bracket: SimpleBracket, firstCell: Cell, token: BEFORE_OR_AFTER) {\n        // // check to see if the new cell is in line with any firstCells in the other bracket. If so, we have a match!\n        // let firstBeforeCells\n        // let firstAfterCells\n        // if (bracket == this.beforeEllipsisBracket) {\n        //     firstBeforeCells = new Set([firstCell])\n        //     // search for a matching afterCell\n        //     firstAfterCells = this.findMatching(firstCell, this.direction, this.afterEllipsisBracket)\n        // } else if (bracket === this.afterEllipsisBracket) {\n        //     firstAfterCells = new Set([firstCell])\n        //     // search for a matching beforeCell\n        //     firstBeforeCells = this.findMatching(firstCell, opposite(this.direction), this.beforeEllipsisBracket)\n        // } else {\n        //     throw new Error(`BUG: Bracket should only ever be the before-ellipsis or after-ellipsis one`)\n        // }\n\n        // for (const firstBeforeCell of firstBeforeCells) {\n        //     for (const firstAfterCell of firstAfterCells) {\n        //         this.checkInvariants()\n        //         // Check if we need to actually change anything first. Becauase the !doesEvaluationOrderMatter case\n        //         // keeps iterating on the set of firstCells but if they keep flipping then it's a problem because it\n        //         // runs in an infinite loop\n        //         // Delete any mapping that may have existed before\n        //         if (this.linkages.has(firstBeforeCell, firstAfterCell)) {\n        //             // nothing to do. we already have those entries\n        //         } else {\n        //             this.linkages.add(firstBeforeCell, firstAfterCell)\n        //             this.firstCells.add(firstBeforeCell)\n        //         }\n        //         this.checkInvariants()\n        //     }\n        // }\n    }\n    public removeFirstCell(bracket: SimpleBracket, firstCell: Cell, token: BEFORE_OR_AFTER) {\n        // Figure out the 1st cell for us and remove it (by maybe looking at the matching bracket)\n        this.checkInvariants()\n        if (bracket === this.beforeEllipsisBracket) {\n            this.linkages.deleteAllA(firstCell)\n            if (this.firstCells.has(firstCell)) {\n                this.firstCells.delete(firstCell)\n            } else {\n                // console.warn('Removing firstCell but it has already been removed')\n                // console.warn(this.toString())\n            }\n        } else if (bracket === this.afterEllipsisBracket) {\n            const beforeCellsRemoved = this.linkages.deleteAllB(firstCell)\n            for (const b of beforeCellsRemoved) {\n                this.firstCells.delete(b)\n            }\n        } else {\n            throw new Error(`BUG: Bracket should only ever be the before-ellipsis or after-ellipsis one`)\n        }\n        this.checkInvariants()\n    }\n\n    // private findMatching(cell: Cell, direction: RULE_DIRECTION, inBracket: SimpleBracket) {\n    //     const matches = new Set()\n    //     for (const inBracketCell of inBracket.getFirstCells()) {\n    //         switch (direction) {\n    //             case RULE_DIRECTION.UP:\n    //                 if (cell.colIndex === inBracketCell.colIndex && cell.rowIndex > inBracketCell.rowIndex) {\n    //                     matches.add(inBracketCell)\n    //                 }\n    //                 break\n    //             case RULE_DIRECTION.DOWN:\n    //                 if (cell.colIndex === inBracketCell.colIndex && cell.rowIndex < inBracketCell.rowIndex) {\n    //                     matches.add(inBracketCell)\n    //                 }\n    //                 break\n    //             case RULE_DIRECTION.LEFT:\n    //                 if (cell.colIndex > inBracketCell.colIndex && cell.rowIndex === inBracketCell.rowIndex) {\n    //                     matches.add(inBracketCell)\n    //                 }\n    //                 break\n    //             case RULE_DIRECTION.RIGHT:\n    //                 if (cell.colIndex < inBracketCell.colIndex && cell.rowIndex === inBracketCell.rowIndex) {\n    //                     matches.add(inBracketCell)\n    //                 }\n    //                 break\n    //             default:\n    //                 throw new Error(`BUG: Invalid direction`)\n    //         }\n    //     }\n    //     return matches\n    // }\n\n    public getMatches(level: Level, actionBracket: Optional<SimpleEllipsisBracket>): MatchedCellsForRule[] {\n        const ret: MatchedCellsForRule[] = []\n        let beforeMatches\n        let afterMatches\n        if (actionBracket) {\n            beforeMatches = this.beforeEllipsisBracket.getMatches(level, actionBracket.beforeEllipsisBracket)\n            afterMatches = this.afterEllipsisBracket.getMatches(level, actionBracket.afterEllipsisBracket)\n        } else {\n            beforeMatches = this.beforeEllipsisBracket.getMatches(level, null)\n            afterMatches = this.afterEllipsisBracket.getMatches(level, null)\n        }\n\n        const beforeMatchesByIndex = new MultiMap<number, MatchedCellsForRule>()\n\n        if (beforeMatches.length === 0 || afterMatches.length === 0) {\n            return []\n        }\n\n        switch (this.direction) {\n            case RULE_DIRECTION.UP:\n            case RULE_DIRECTION.DOWN:\n                for (const beforeMatch of beforeMatches) {\n                    beforeMatchesByIndex.add(beforeMatch.lastCell().colIndex, beforeMatch)\n                }\n                for (const afterMatch of afterMatches) {\n                    const { colIndex, rowIndex } = afterMatch.firstCell()\n                    for (const beforeMatch of beforeMatchesByIndex.getB(colIndex) || []) {\n                        // check if the afterMatch matches it.\n                        // If so, remove the beforeMatch and include the whole match\n                        const { rowIndex: beforeRowIndex } = beforeMatch.lastCell()\n                        const isAfter = (this.direction === RULE_DIRECTION.DOWN) ? beforeRowIndex < rowIndex : rowIndex < beforeRowIndex\n                        if (isAfter) {\n                            ret.push(new MatchedCellsForRule([...beforeMatch.cellsAndNeighbors].concat([...afterMatch.cellsAndNeighbors])))\n                            // beforeMatchesByIndex.delete(colIndex, beforeMatch)\n                        }\n                    }\n                }\n                break\n            case RULE_DIRECTION.LEFT:\n            case RULE_DIRECTION.RIGHT:\n                for (const beforeMatch of beforeMatches) {\n                    beforeMatchesByIndex.add(beforeMatch.lastCell().rowIndex, beforeMatch)\n                }\n                for (const afterMatch of afterMatches) {\n                    const { rowIndex, colIndex } = afterMatch.firstCell()\n                    for (const beforeMatch of beforeMatchesByIndex.getB(rowIndex) || []) {\n                        // check if the afterMatch matches it.\n                        // If so, remove the beforeMatch and include the whole match\n                        const { colIndex: beforeColIndex } = beforeMatch.lastCell()\n                        const isAfter = (this.direction === RULE_DIRECTION.RIGHT) ? beforeColIndex < colIndex : colIndex < beforeColIndex\n                        if (isAfter) {\n                            ret.push(new MatchedCellsForRule([...beforeMatch.cellsAndNeighbors].concat([...afterMatch.cellsAndNeighbors])))\n                            // beforeMatchesByIndex.delete(rowIndex, beforeMatch)\n                        }\n                    }\n                }\n                break\n            default:\n                throw new Error(`BUG: Invalid direction ${this.direction}`)\n        }\n\n        return ret\n    }\n\n    private checkInvariants() {\n        if (this.firstCells.size !== this.linkages.sizeA()) {\n            throw new Error(`BUG: Invariant violation`)\n        }\n    }\n\n}\n\nclass ReplaceTile {\n    private collisionLayer: CollisionLayer\n    private actionTileWithModifier: Optional<SimpleTileWithModifier>\n    private mightNotFindConditionButThatIsOk: boolean\n    private conditionSpritesToRemove: Optional<SimpleTileWithModifier>\n    private newDirection: Optional<RULE_DIRECTION>\n\n    constructor(collisionLayer: CollisionLayer, actionTileWithModifier: Optional<SimpleTileWithModifier>,\n                mightNotFindConditionButThatIsOk: boolean, conditionSpritesToRemove: Optional<SimpleTileWithModifier>,\n                newDirection: Optional<RULE_DIRECTION>) {\n\n        if (!collisionLayer) {\n            throw new Error('BUG: collisionLayer is not set')\n        }\n        this.collisionLayer = collisionLayer\n        this.actionTileWithModifier = actionTileWithModifier\n        this.mightNotFindConditionButThatIsOk = mightNotFindConditionButThatIsOk\n        this.conditionSpritesToRemove = conditionSpritesToRemove\n        this.newDirection = newDirection\n    }\n    public replace(cell: Cell, magicOrTiles: Map<IGameTile, Set<GameSprite>>, orTilesRemoved: Set<IGameTile>) {\n        let didActuallyChange = false\n        // Check if we are adding or removing....\n        if (this.actionTileWithModifier) {\n            // adding\n\n            let sprites: Iterable<GameSprite>\n            // if RANDOM is set then pick a random sprite to add\n            if (this.actionTileWithModifier.isRandom()) {\n                const spritesToChoose = this.actionTileWithModifier._tile.getSprites()\n                const rnd = nextRandom(spritesToChoose.length)\n                sprites = [spritesToChoose[rnd]]\n            } else if (this.actionTileWithModifier._tile.isOr()) {\n                // There is no sprite of this type already in the cell. It's in the magicOrTiles\n                const s = magicOrTiles.get(this.actionTileWithModifier._tile)\n                if (!s) {\n                    throw new Error(`BUG: Magic OR tile not found\\n${this.actionTileWithModifier.toString()}`)\n                }\n                sprites = s\n            } else {\n                sprites = this.actionTileWithModifier._tile.getSprites()\n            }\n            for (const sprite of sprites) {\n                const c = sprite.getCollisionLayer()\n                const wantsToMove = this.newDirection || cell.getCollisionLayerWantsToMove(c)\n                let added\n                if (cell.hasSprite(sprite)) {\n                    if (!wantsToMove) {\n                        throw new Error(`BUG: Invariant violation. if the sprite exists then wantsToMove must also exist (at least it would be STATIONARY)`)\n                    }\n                    added = cell.updateSprite(sprite, wantsToMove)\n                } else {\n                    // preserve the wantsToMove if the sprite is in the same collision layer\n                    added = cell.addSprite(sprite, wantsToMove)\n                }\n                didActuallyChange = didActuallyChange || added\n            }\n        } else {\n            // removing\n            const tile = cell.getSpriteByCollisionLayer(this.collisionLayer)\n            if (!tile && this.mightNotFindConditionButThatIsOk) {\n                // this occurs when there is just a -> [ NO Color ] on the action side (remove color if it exists)\n                return { actuallyDidChange: false }\n            }\n            if (!tile) {\n                throw new Error(`BUG: No tile found`)\n            }\n            if (this.conditionSpritesToRemove) {\n                // For OR tiles we need to only remove one of the sprites, not ALL of the sprites\n                if (this.conditionSpritesToRemove._tile.isOr()) {\n                    if (! orTilesRemoved.has(this.conditionSpritesToRemove._tile)) {\n                        // only remove the sprites in the cell that match the condition... not all the sprites in a collisionLayer\n                        const cellSprites = tile.getSprites()\n                        for (const conditionSpriteToRemove of this.conditionSpritesToRemove._tile.getSprites()) {\n                            if (cellSprites.indexOf(conditionSpriteToRemove) >= 0) {\n                                const removed = cell.removeSprite(conditionSpriteToRemove)\n                                didActuallyChange = didActuallyChange || removed\n\n                                if (removed) {\n                                    orTilesRemoved.add(this.conditionSpritesToRemove._tile)\n                                }\n                                break\n                            }\n                        }\n                    }\n                } else {\n                    // only remove the sprites in the cell that match the condition... not all the sprites in a collisionLayer\n                    const conditionSpritesToRemove = new Set(this.conditionSpritesToRemove._tile.getSprites())\n                    for (const sprite of tile.getSprites()) {\n                        if (conditionSpritesToRemove.has(sprite)) {\n                            const removed = cell.removeSprite(sprite)\n                            didActuallyChange = didActuallyChange || removed\n                        }\n                    }\n                }\n\n            } else {\n                throw new Error(`BUG: Not implemented (just commented out)`)\n                // // remove all sprites\n                // for (const sprite of tile.getSprites()) {\n                //     const removed = cell.removeSprite(sprite)\n                //     didActuallyChange = didActuallyChange || removed\n                // }\n            }\n        }\n        // return the oldSprite for UNDO\n        return {\n            didActuallyChange\n        }\n    }\n}\n\nclass ReplaceDirection {\n    private collisionLayer: CollisionLayer\n    private direction: RULE_DIRECTION\n    private mightNotFindConditionButThatIsOk: boolean\n    constructor(collisionLayer: CollisionLayer, direction: RULE_DIRECTION, mightNotFindConditionButThatIsOk: boolean) {\n        if (!collisionLayer) {\n            throw new Error('BUG: collisionLayer is not set')\n        }\n        this.collisionLayer = collisionLayer\n        this.direction = direction\n        this.mightNotFindConditionButThatIsOk = mightNotFindConditionButThatIsOk\n    }\n    public replace(cell: Cell) {\n        let direction = this.direction\n        // It's OK if this sprite is not in the condition. This happens when an OR action tile has sprites that are in multiple collision layers\n        if (this.mightNotFindConditionButThatIsOk && !cell.getSpriteByCollisionLayer(this.collisionLayer)) {\n            return false\n        }\n\n        // Pick a random direction\n        if (this.direction === RULE_DIRECTION.RANDOMDIR) {\n            // only set the direction if one has not already been set\n            if (cell.getCollisionLayerWantsToMove(this.collisionLayer) === RULE_DIRECTION.STATIONARY) {\n                switch (nextRandom(4)) {\n                    case 0:\n                        direction = RULE_DIRECTION.UP\n                        break\n                    case 1:\n                        direction = RULE_DIRECTION.DOWN\n                        break\n                    case 2:\n                        direction = RULE_DIRECTION.LEFT\n                        break\n                    case 3:\n                        direction = RULE_DIRECTION.RIGHT\n                        break\n                    default:\n                        throw new Error(`BUG: invalid random number chosen`)\n                }\n            } else {\n                // a direction was already set\n                return false\n            }\n        }\n        return cell.setWantsToMoveCollisionLayer(this.collisionLayer, direction)\n    }\n}\n\nexport class SimpleNeighbor extends BaseForLines implements ICacheable {\n    public readonly _tilesWithModifier: Set<SimpleTileWithModifier>\n\n    public spritesPresent: SpriteBitSet\n    public anySpritesPresent: Set<SpriteBitSet>\n    private brackets: Map<ISimpleBracket, Set<number>>\n    private debugFlag: Optional<DEBUG_FLAG>\n\n    private staticCache: Map<SimpleNeighbor, {replaceTiles: Set<ReplaceTile>, replaceDirections: Set<ReplaceDirection>}>\n    private cacheYesBitSets: Map<CollisionLayer, BitSet>\n    private cacheNoBitSets: Map<CollisionLayer, BitSet>\n    private cacheDirections: Map<CollisionLayer, RULE_DIRECTION>\n    private cacheMultiCollisionLayerTiles: Set<SimpleTileWithModifier>\n    private spritesMissing: SpriteBitSet\n    private spriteMovementsPresent: Map<CollisionLayer, RULE_DIRECTION>\n    private orTileMovementsPresent: Map<IGameTile, RULE_DIRECTION>\n    private lruCache: LruCache<string, boolean>\n    private trickleCells: Set<Cell>\n\n    constructor(source: IGameCode, tilesWithModifier: Set<SimpleTileWithModifier>, debugFlag: Optional<DEBUG_FLAG>) {\n        super(source)\n        // this.alreadyReportedMismatch = false\n        this._tilesWithModifier = tilesWithModifier\n        this.brackets = new Map()\n        // this._localCellCache = new Map()\n        this.debugFlag = debugFlag\n\n        this.staticCache = new Map()\n\n        this.spritesPresent = new SpriteBitSet()\n        this.spritesMissing = new SpriteBitSet()\n        this.anySpritesPresent = new Set<SpriteBitSet>()\n        this.spriteMovementsPresent = new Map()\n        this.orTileMovementsPresent = new Map()\n        this.trickleCells = new Set()\n        this.lruCache = new LruCache<string, boolean>(LRU_CACHE_SIZE)\n\n        // Build up the cache BitSet for each collisionLayer\n        this.cacheYesBitSets = new Map()\n        this.cacheNoBitSets = new Map()\n        this.cacheDirections = new Map()\n        this.cacheMultiCollisionLayerTiles = new Set()\n        const allTiles = [...tilesWithModifier]\n        const noTiles = allTiles.filter((t) => t.isNo())\n        const yesTiles = allTiles.filter((t) => !t.isNo())\n\n        for (const t of yesTiles) {\n            if (t._tile.hasSingleCollisionLayer()) {\n                for (const sprite of t._tile.getSprites()) {\n                    const c = sprite.getCollisionLayer()\n                    if (t._direction) {\n                        this.cacheDirections.set(c, t._direction)\n                    }\n                    let yesBitSet = this.cacheYesBitSets.get(c)\n                    if (!yesBitSet) {\n                        yesBitSet = new BitSet2() as BitSet\n                        this.cacheYesBitSets.set(c, yesBitSet)\n                    }\n                    yesBitSet.set(c.getBitSetIndexOf(sprite))\n                }\n            } else {\n                this.cacheMultiCollisionLayerTiles.add(t)\n            }\n\n            if (t._tile.isOr()) {\n                this.anySpritesPresent.add(new SpriteBitSet(t._tile.getSprites()))\n                if (t._direction) {\n                    this.orTileMovementsPresent.set(t._tile, t._direction)\n                }\n            } else {\n                this.spritesPresent.addAll(t._tile.getSprites())\n                for (const sprite of t._tile.getSprites()) {\n                    if (t._direction) {\n                        const prevDir = this.spriteMovementsPresent.get(sprite.getCollisionLayer())\n                        if (prevDir && prevDir !== t._direction) {\n                            throw new Error(`BUG??? prev=${prevDir} ${t._direction}`)\n                        }\n                        this.spriteMovementsPresent.set(sprite.getCollisionLayer(), t._direction)\n                    }\n                }\n            }\n        }\n\n        for (const t of noTiles) {\n            if (t._tile.hasSingleCollisionLayer()) {\n                for (const sprite of t._tile.getSprites()) {\n                    const c = sprite.getCollisionLayer()\n                    if (t._direction) {\n                        this.cacheDirections.set(c, t._direction)\n                    }\n                    let noBitSet = this.cacheNoBitSets.get(c)\n                    if (!noBitSet) {\n                        noBitSet = new BitSet2() as BitSet\n                        this.cacheNoBitSets.set(c, noBitSet)\n                    }\n                    noBitSet.set(c.getBitSetIndexOf(sprite))\n                }\n            } else {\n                this.cacheMultiCollisionLayerTiles.add(t)\n            }\n\n            if (t._tile.isOr()) {\n                // NO Color === NO Red NO Green NO Blue\n                this.spritesMissing.addAll(t._tile.getSprites())\n            } else {\n                this.spritesMissing.addAll(t._tile.getSprites())\n            }\n        }\n\n    }\n    public toKey(ignoreDebugFlag?: boolean) {\n        if (ignoreDebugFlag) {\n            return `{${[...this._tilesWithModifier].map((t) => t.toKey(ignoreDebugFlag)).sort().join(' ')}}`\n        } else {\n            return `{${[...this._tilesWithModifier].map((t) => t.toKey(ignoreDebugFlag)).sort().join(' ')} debugging?${!!this.debugFlag}}`\n        }\n    }\n\n    public dependsOnDirection() {\n        return !![...this._tilesWithModifier].find((t) => !!t._direction)\n    }\n\n    public prepareAction(actionNeighbor: SimpleNeighbor) {\n        if (process.env.NODE_ENV === 'development' && actionNeighbor.debugFlag === DEBUG_FLAG.BREAKPOINT) {\n            // Pausing here because this breakpoint was marked in the game code\n            debugger // tslint:disable-line:no-debugger\n        }\n\n        if (this.staticCache.has(actionNeighbor)) {\n            return\n        }\n\n        // Compute the Mutators on-the-fly for now....\n        const pairsByCollisionLayer = new Map<CollisionLayer, ExtraPair<SimpleTileWithModifier>>()\n        const orTiles = new Map<IGameTile, SimpleTileWithModifier>()\n        for (const t of this._tilesWithModifier) {\n            if (t._tile.isOr() && !t._tile.hasSingleCollisionLayer()) {\n                if (!t.isNo()) {\n                    orTiles.set(t._tile, t)\n                }\n            } else {\n                // AND Tiles can have multiple collisionLayers too...\n                if (t._tile.hasSingleCollisionLayer()) {\n                    const c = t._tile.getCollisionLayer()\n                    if (!c) {\n                        throw new Error(`BUG: Tile is not assigned to a collision layer\\n${t._tile.toString()}`)\n                    }\n                    // If we have something like `[Player NO PlayerHold] -> ...` then keep the Player, not the PlayerHold\n                    if (pairsByCollisionLayer.has(c)) {\n                        // Determine whether to keep the 1st match or the current one.\n                        // If the current one is a NO tile then definitely do not replace it.\n                        // Maybe the correct thing to do is to always keep the 1st thing put in\n                        // if (!t.isNo()) {\n                        //     pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(t, null/*filled in later if there is an action*/, false/*okToIgnoreNonMatches*/))\n                        // }\n                    } else {\n                        pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(t, null/*filled in later if there is an action*/, false/*okToIgnoreNonMatches*/))\n                    }\n                } else {\n                    // loop over each collisionLayer\n                    for (const sprite of t._tile.getSprites()) {\n                        const c = sprite.getCollisionLayer()\n                        if (!pairsByCollisionLayer.has(c)) {\n                            // TODO: Should we ues the whole tileWithModifier or create a new one out of the sprite?\n                            pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(t, null/*filled in later if there is an action*/, false/*okToIgnoreNonMatches*/))\n                        }\n                    }\n                }\n            }\n        }\n\n        // First just pair up all the conditions and actions (keep the negations)\n        // Then, remove all negations\n        // Then, build the ReplaceTile and ReplaceDirections\n        const unmatchedOrTiles = new Map(orTiles.entries())\n        for (const t of actionNeighbor._tilesWithModifier) {\n            if (t._tile.isOr() && !t._tile.hasSingleCollisionLayer()) {\n                // OR tiles may belong to different collisionlayers so... it's complicated\n                const orTile = orTiles.get(t._tile)\n                if (orTile) {\n                    unmatchedOrTiles.delete(t._tile)\n                    // simple case. at most we just change direction\n                    const conditionT = orTile\n                    if (conditionT._direction !== t._direction) {\n                        for (const sprite of t._tile.getSprites()) {\n                            const c = sprite.getCollisionLayer()\n                            if (!pairsByCollisionLayer.has(c)) {\n                                pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(\n                                    new SimpleTileWithModifier(conditionT.__source, conditionT._isNegated /*since the action side is a NO */,\n                                        conditionT._isRandom/*isRandom*/, conditionT._direction, sprite, conditionT._debugFlag),\n                                    new SimpleTileWithModifier(t.__source, t._isNegated /*since the action side is a NO */, t._isRandom/*isRandom*/, t._direction, sprite, t._debugFlag),\n                                    true/*okToIgnoreNonMatches*/))\n                            }\n                        }\n                    }\n                } else {\n                    if (t.isNo()) {\n                        for (const sprite of t._tile.getSprites()) {\n                            const c = sprite.getCollisionLayer()\n                            if (!pairsByCollisionLayer.has(c)) {\n                                const t2 = new SimpleTileWithModifier(t.__source, false /*since the action side is a NO */, t._isRandom/*isRandom*/, t._direction, t._tile, t._debugFlag)\n                                pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(t2, null, true/*okToIgnoreNonMatches*/))\n                            }\n                        }\n                    } else {\n                        for (const sprite of t._tile.getSprites()) {\n                            const c = sprite.getCollisionLayer()\n                            if (!pairsByCollisionLayer.has(c)) {\n                                const t2 = new SimpleTileWithModifier(t.__source, false /*since the action side is NOT? NO */, t._isRandom/*isRandom*/, t._direction, t._tile, t._debugFlag)\n                                pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(null, t2, true/*okToIgnoreNonMatches*/))\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (const c of t.getCollisionLayers()) {\n                    if (!c) {\n                        throw new Error(`BUG: Tile is not assigned to a collision layer.\\n${t._tile.toString()}`)\n                    }\n                    // if the condition is the same as the action then it's a no-op and we can remove the code\n                    const p = pairsByCollisionLayer.get(c)\n                    const conditionVersion = (p && p.condition) || null\n                    if (conditionVersion && conditionVersion.equals(t)) {\n                        // condition and action are the same. No need to add a Pair\n                        pairsByCollisionLayer.delete(c)\n                    } else {\n                        if (t.isNo()) {\n                            // set it to be null (removed)\n                            if (p) {\n                                // just leave the action side as null (so it's removed)\n                                if (p.condition === t) {\n                                    // remove if both the condition and action are the same\n                                    pairsByCollisionLayer.delete(c)\n                                }\n                            } else {\n                                // we need to set the condition side to be the tile so that it is removed\n                                // (it might not exist in the cell though but that's an optimization for later)\n                                const t2 = new SimpleTileWithModifier(t.__source, false /*since the action side is a NO */, false/*isRandom*/, t._direction, t._tile, t._debugFlag)\n                                pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(t2, null, true/*okToIgnoreNonMatches*/))\n                            }\n                        } else {\n                            if (p) {\n                                p.action = t\n                            } else {\n                                pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(null, t, false/*okToIgnoreNonMatches*/))\n                            }\n                        }\n                    }\n\n                }\n            }\n        }\n\n        // Any unmatched OR tiles need to be removed from the Cell\n        if (unmatchedOrTiles.size > 0) {\n            for (const t of unmatchedOrTiles.values()) {\n                for (const sprite of t._tile.getSprites()) {\n                    const c = sprite.getCollisionLayer()\n                    if (!pairsByCollisionLayer.has(c)) {\n                        const t2 = new SimpleTileWithModifier(t.__source, false /*since the action side is a NO */, false/*isRandom*/, t._direction, t._tile, t._debugFlag)\n                        pairsByCollisionLayer.set(c, new ExtraPair<SimpleTileWithModifier>(t2, null, true/*okToIgnoreNonMatches*/))\n                    }\n                }\n            }\n        }\n\n        const replaceTiles = new Set<ReplaceTile>()\n        const replaceDirections = new Set<ReplaceDirection>()\n\n        for (const [collisionLayer, { condition, action, extra }] of pairsByCollisionLayer.entries()) {\n            if (condition && action) {\n                if (condition !== action) { // Could be `[ TrolleyFull no CleanDishes] -> [TrolleyEmpty no CleanDishes ]`\n                    let newDirection = null\n                    if (condition._direction !== action._direction || condition.isNo()) {\n                        newDirection = action._direction || RULE_DIRECTION.STATIONARY\n                    }\n\n                    if (!condition._tile.equals(action._tile) || condition.isNo()) {\n                        replaceTiles.add(new ReplaceTile(collisionLayer, action, extra, null, newDirection))\n                    } else if (newDirection) {\n                        replaceDirections.add(new ReplaceDirection(collisionLayer, newDirection, extra))\n                    }\n                }\n            } else if (condition) {\n                if (!condition.isNo()) {\n                    replaceTiles.add(new ReplaceTile(collisionLayer, null, extra, condition, null))\n                }\n            } else if (action) {\n                if (!action.isNo()) {\n                    replaceTiles.add(new ReplaceTile(collisionLayer, action, extra, null, action._direction || RULE_DIRECTION.STATIONARY))\n                }\n            }\n        }\n\n        this.staticCache.set(actionNeighbor, { replaceTiles, replaceDirections })\n    }\n\n    public evaluate(actionNeighbor: SimpleNeighbor, cell: Cell, magicOrTiles: Map<IGameTile, Set<GameSprite>>) {\n        if (process.env.NODE_ENV === 'development' && actionNeighbor.debugFlag === DEBUG_FLAG.BREAKPOINT) {\n            // Pausing here because this breakpoint was marked in the game code\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n\n        let r = this.staticCache.get(actionNeighbor)\n        if (!r) {\n            this.prepareAction(actionNeighbor)\n            r = this.staticCache.get(actionNeighbor)\n        }\n        if (!r) {\n            throw new Error('BUG: Missing actionNeighbor. Should have been prepared before')\n        }\n        const { replaceTiles, replaceDirections } = r\n\n        let didChangeSprites = false\n        let didChangeDirection = false\n        const orTilesRemoved = new Set()\n        for (const replaceTile of replaceTiles) {\n            const { didActuallyChange } = replaceTile.replace(cell, magicOrTiles, orTilesRemoved)\n            didChangeSprites = didChangeSprites || didActuallyChange || false\n        }\n        for (const replaceDirection of replaceDirections) {\n            const didActuallyChange = replaceDirection.replace(cell)\n            didChangeDirection = didChangeDirection || didActuallyChange\n        }\n\n        // TODO: Be better about recording when the cell actually updated\n        if (didChangeSprites || didChangeDirection) {\n            return new CellMutation(cell)\n        } else {\n            return null\n        }\n\n    }\n\n    public clearCaches() {\n        // this._localCellCache.clear()\n        for (const t of this._tilesWithModifier) {\n            t.clearCaches()\n        }\n    }\n\n    // set this ahead of time becuase order does not matter when populating the magicOrTiles `[ > Player | Pill ] -> [ Pill OldPos | Player ]`\n    public populateMagicOrTiles(cell: Cell, magicOrTiles: Map<IGameTile, Set<GameSprite>>) {\n        for (const t of this._tilesWithModifier) {\n            if (!t.isNo() && t._tile.isOr()) {\n                const sprites = setIntersection(new Set(t._tile.getSprites()), cell.getSpritesAsSet())\n                magicOrTiles.set(t._tile, sprites)\n            }\n        }\n    }\n\n    public subscribeToTileChanges(bracket: ISimpleBracket, index: number) {\n        // add the bracket and then subscribe the tiles\n        let b = this.brackets.get(bracket)\n        if (!b) {\n            b = new Set()\n            this.brackets.set(bracket, b)\n        }\n        b.add(index)\n\n        this._tilesWithModifier.forEach((t) => {\n            t.subscribeToCellChanges(this)\n        })\n    }\n\n    public matchesCellSimple(cell: Cell) {\n        return this.matchesCell(cell, null, null)\n    }\n\n    public addCells(t: SimpleTileWithModifier, sprite: GameSprite, cells: Iterable<Cell>, wantsToMove: Optional<RULE_DIRECTION>) {\n        if (process.env.NODE_ENV === 'development' && this.debugFlag === DEBUG_FLAG.BREAKPOINT) {\n            // Pausing here because it was marked in the code\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n        for (const cell of cells) {\n            if (this.matchesTiles(cell)) {\n                this.trickleCells.add(cell)\n                for (const [bracket, indexes] of this.brackets.entries()) {\n                    for (const index of indexes) {\n                        bracket.addCell(index, this, t, sprite, cell, wantsToMove)\n                    }\n                }\n            } else if (this.trickleCells.has(cell)) {\n                this.trickleCells.delete(cell)\n                // adding the Cell causes the set of Tiles to no longer match.\n                // If it previously matched, notify the bracket that it no longer matches\n                // (and delete it from our cache)\n                for (const [bracket, indexes] of this.brackets.entries()) {\n                    for (const index of indexes) {\n                        bracket.removeCell(index, this, t, sprite, cell)\n                    }\n                }\n            }\n        }\n    }\n    public updateCells(t: SimpleTileWithModifier, sprite: GameSprite, cells: Iterable<Cell>, wantsToMove: RULE_DIRECTION) {\n        this.addCells(t, sprite, cells, wantsToMove)\n    }\n    public removeCells(t: SimpleTileWithModifier, sprite: GameSprite, cells: Iterable<Cell>) {\n        if (process.env.NODE_ENV === 'development' && this.debugFlag === DEBUG_FLAG.BREAKPOINT_REMOVE) {\n            // Pausing here because it was marked in the code\n            if (process.stdout) { TerminalUI.debugRenderScreen() } debugger // tslint:disable-line:no-debugger\n        }\n        for (const cell of cells) {\n            // Check if the cell still matches. If not, remove it from upstream\n            // It's a little funky if we have a NO tile. I _think_ we need to negate the\n            // result of matchesCellWithout in that case but not completely sure\n            if (!this.matchesTiles(cell)) {\n                this.trickleCells.delete(cell)\n                // remove it from upstream\n                for (const [bracket, indexes] of this.brackets.entries()) {\n                    for (const index of indexes) {\n                        bracket.removeCell(index, this, t, sprite, cell)\n                    }\n                }\n            }\n        }\n    }\n    private matchesCell(cell: Cell, tileWithModifier: Optional<SimpleTileWithModifier>, wantsToMove: Optional<RULE_DIRECTION>) {\n\n        const valueFn = () => {\n            let doesMatch =\n                cell.spriteBitSet.containsAll(this.spritesPresent) &&\n                cell.spriteBitSet.containsNone(this.spritesMissing)\n            if (doesMatch) {\n                for (const anySpritesPresent of this.anySpritesPresent) {\n                    doesMatch = doesMatch && cell.spriteBitSet.containsAny(anySpritesPresent)\n                }\n            }\n            // Check CollisionLayers\n            // TODO: Move this into the Cell definition\n            if (doesMatch) {\n                for (const [collisionLayer, direction] of this.spriteMovementsPresent) {\n                    const cellDir = cell.getCollisionLayerWantsToMove(collisionLayer)\n                    if (direction !== cellDir) {\n                        doesMatch = false\n                    }\n                }\n            }\n\n            if (doesMatch) {\n                for (const [orTile, direction] of this.orTileMovementsPresent) {\n                    if (orTile.hasSingleCollisionLayer()) {\n                        const cellDir = cell.getCollisionLayerWantsToMove(orTile.getCollisionLayer())\n                        if (direction !== cellDir) {\n                            doesMatch = false\n                        }\n                    } else {\n                        // find which sprite in the OR tile matched and get its direction\n                        let foundSprite = false\n                        // the OR tile can match multiple sprites so make sure at least one matched (not all)\n                        // e.g:\n                        // Movable = Player OR Island\n                        // Rule: [ LEFT Movable ]\n                        // Cell: STATIONARY Player LEFT Island\n                        let didMatch = false\n                        for (const sprite of orTile.getSprites()) {\n                            if (cell.spriteBitSet.has(sprite)) {\n                                foundSprite = true\n                                const cellDir = cell.getCollisionLayerWantsToMove(sprite.getCollisionLayer())\n                                if (direction === cellDir) {\n                                    didMatch = true\n                                }\n                            }\n                        }\n                        doesMatch = doesMatch && didMatch\n                        if (!foundSprite) {\n                            throw new Error(`BUG: Could not find sprite. One should have already been matched before`)\n                        }\n                    }\n                }\n            }\n            return doesMatch\n        }\n\n        return this.lruCache.get(`[${cell.toKey()}]`, valueFn)\n    }\n\n    private matchesTiles(cell: Cell) {\n        for (const t of this._tilesWithModifier) {\n            if (!t.hasCell(cell)) {\n                return false\n            }\n        }\n        return true\n    }\n\n}\n","import * as QuickLru from 'quick-lru'\n\nexport default class LruCache<Key, Value> {\n    private lru: QuickLru<Key, Value>\n    constructor(maxSize: number) {\n        this.lru = new QuickLru({ maxSize })\n    }\n\n    public get(key: Key, valueFn: () => Value) {\n        const val = this.lru.get(key)\n        // speed up by combining .has(key) and .get(key)\n        if (val !== undefined) {\n            return val\n        }\n        const value = valueFn()\n        this.lru.set(key, value)\n        return value\n    }\n\n    // has(key: Key) {\n    //     return key\n    // }\n}\n","'use strict';\n\nclass QuickLRU {\n\tconstructor(opts) {\n\t\topts = Object.assign({}, opts);\n\n\t\tif (!(opts.maxSize && opts.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tthis.maxSize = opts.maxSize;\n\t\tthis.cache = new Map();\n\t\tthis.oldCache = new Map();\n\t\tthis._size = 0;\n\t}\n\n\t_set(key, value) {\n\t\tthis.cache.set(key, value);\n\t\tthis._size++;\n\n\t\tif (this._size >= this.maxSize) {\n\t\t\tthis._size = 0;\n\t\t\tthis.oldCache = this.cache;\n\t\t\tthis.cache = new Map();\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this.cache.get(key);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\tconst value = this.oldCache.get(key);\n\t\t\tthis._set(key, value);\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tset(key, value) {\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.cache.set(key, value);\n\t\t} else {\n\t\t\tthis._set(key, value);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\thas(key) {\n\t\treturn this.cache.has(key) || this.oldCache.has(key);\n\t}\n\n\tpeek(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this.cache.get(key);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn this.oldCache.get(key);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tif (this.cache.delete(key)) {\n\t\t\tthis._size--;\n\t\t}\n\n\t\tthis.oldCache.delete(key);\n\t}\n\n\tclear() {\n\t\tthis.cache.clear();\n\t\tthis.oldCache.clear();\n\t\tthis._size = 0;\n\t}\n\n\t* keys() {\n\t\tfor (const el of this) {\n\t\t\tyield el[0];\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const el of this) {\n\t\t\tyield el[1];\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const el of this.cache) {\n\t\t\tyield el;\n\t\t}\n\n\t\tfor (const el of this.oldCache) {\n\t\t\tif (!this.cache.has(el[0])) {\n\t\t\t\tyield el;\n\t\t\t}\n\t\t}\n\t}\n\n\tget size() {\n\t\tlet oldCacheSize = 0;\n\t\tfor (const el of this.oldCache) {\n\t\t\tif (!this.cache.has(el[0])) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn this._size + oldCacheSize;\n\t}\n}\n\nmodule.exports = QuickLRU;\n","// Generated automatically by nearley, version 2.15.1\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\n\n// tslint:disable\n// Disable all linting because the file is autogenerated (& out of our control)\nconst debugBlackList = new Set<string>([])\nconst debugWhiteList = new Set<string>([])\n\nconst toDebug = (name: string, fn?: (fields: any[]) => any) => {\n    if (process.env.NODE_ENV == 'debug' || debugWhiteList.has(name)) {\n        // Skip debug mode for any items on the blacklist\n        if (debugBlackList.has(name)) {\n            return null\n        }\n        // return either the custom function provided, or the default one for debugging\n        return fn || function (args) {\n            return {type: name, args: args}\n        }\n    } else {\n        return null // use the non-debug function\n    }\n}\n\nconst nuller = (a: any) => null\n// const debugRule = (msg) => (a) => { debugger; console.log(msg, a); return a }\nconst concatChars = ([a]: string[][]) => a.join('')\nconst extractFirst = <T>(ary: T[][]) => ary.map(subArray => {\n    if (subArray.length !== 1) {\n        throw new Error(`BUG: Expected items to only have one element (usually used in listOf[...])`)\n    } else {\n        return subArray[0]\n    }\n})\nconst extractSecond = <T>(ary: T[][]) => ary.map(subArray => {\n    if (subArray.length < 2) {\n        throw new Error(`BUG: Expected items to have at least 2 elements (usually used in listOf[...])`)\n    } else {\n        return subArray[1]\n    }\n})\nconst extractThird = <T>(ary: T[][]) => ary.map(subArray => {\n    if (subArray.length < 3) {\n        throw new Error(`BUG: Expected items to have at least 3 elements (usually used in listOf[...])`)\n    } else {\n        return subArray[2]\n    }\n})\n\nfunction nonemptyListOf<T>([first, rest]: any[]/*[T, T[][]]*/) {\n    const f = first as T\n    const r = rest as T[][]\n    return [f].concat(r.map(([_1, child]) => child))\n}\nconst upperId = ([id]: string[]) => id.toUpperCase()\n\nconst TILE_MODIFIERS = new Set([\n    '...', // This one isn't a modifier but we do not allow it so that we match ellipsis rules in a different rule\n    'AGAIN', // This is another hack. Some people write `[]->[AGAIN]` rather than `[]->[]AGAIN`\n    'DEBUGGER', // Another hack. Ensure that this is not accidentally used as a tile name\n    'NO',\n    'LEFT',\n    'RIGHT',\n    'UP',\n    'DOWN',\n    'RANDOMDIR',\n    'RANDOM',\n    'STATIONARY',\n    'MOVING',\n    'ACTION',\n    'VERTICAL',\n    'HORIZONTAL',\n    'PERPENDICULAR',\n    'PARALLEL',\n    'ORTHOGONAL',\n    '^',\n    '<',\n    '>',\n    'V',\n])\n\n\nexport interface Token { value: any; [key: string]: any };\n\nexport interface Lexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => Token | undefined;\n  save: () => any;\n  formatError: (token: Token) => string;\n  has: (tokenType: string) => boolean\n};\n\nexport interface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any\n};\n\nexport type NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\nexport var Lexer: Lexer | undefined = undefined;\n\nexport var ParserRules: NearleyRule[] = [\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$2\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"main$ebnf$2\", \"symbols\": [\"main$ebnf$2\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$3$macrocall$2\", \"symbols\": [\"t_OBJECTS\"]},\n    {\"name\": \"main$ebnf$3$macrocall$3\", \"symbols\": [\"Sprite\"]},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$1\", \"symbols\": [\"main$ebnf$3$macrocall$1$ebnf$1\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$2\", \"symbols\": [\"main$ebnf$3$macrocall$1$ebnf$2\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$3\", \"symbols\": [\"main$ebnf$3$macrocall$1$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$4$subexpression$1\", \"symbols\": [\"main$ebnf$3$macrocall$3\"]},\n    {\"name\": \"main$ebnf$3$macrocall$1$ebnf$4\", \"symbols\": [\"main$ebnf$3$macrocall$1$ebnf$4\", \"main$ebnf$3$macrocall$1$ebnf$4$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$3$macrocall$1\", \"symbols\": [\"_\", \"main$ebnf$3$macrocall$1$ebnf$1\", \"lineTerminator\", \"_\", \"main$ebnf$3$macrocall$2\", \"lineTerminator\", \"_\", \"main$ebnf$3$macrocall$1$ebnf$2\", \"main$ebnf$3$macrocall$1$ebnf$3\", \"main$ebnf$3$macrocall$1$ebnf$4\"], \"postprocess\":  toDebug('Section', function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return {type: 'SECTION', name: name, items: extractFirst(extractFirst(items)) } }) ||\n        function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return extractFirst(extractFirst(items)) } },\n    {\"name\": \"main$ebnf$3\", \"symbols\": [\"main$ebnf$3$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main$ebnf$4$macrocall$2\", \"symbols\": [\"t_LEGEND\"]},\n    {\"name\": \"main$ebnf$4$macrocall$3\", \"symbols\": [\"LegendTile\"]},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$1\", \"symbols\": [\"main$ebnf$4$macrocall$1$ebnf$1\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$2\", \"symbols\": [\"main$ebnf$4$macrocall$1$ebnf$2\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$3\", \"symbols\": [\"main$ebnf$4$macrocall$1$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$4$subexpression$1\", \"symbols\": [\"main$ebnf$4$macrocall$3\"]},\n    {\"name\": \"main$ebnf$4$macrocall$1$ebnf$4\", \"symbols\": [\"main$ebnf$4$macrocall$1$ebnf$4\", \"main$ebnf$4$macrocall$1$ebnf$4$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$4$macrocall$1\", \"symbols\": [\"_\", \"main$ebnf$4$macrocall$1$ebnf$1\", \"lineTerminator\", \"_\", \"main$ebnf$4$macrocall$2\", \"lineTerminator\", \"_\", \"main$ebnf$4$macrocall$1$ebnf$2\", \"main$ebnf$4$macrocall$1$ebnf$3\", \"main$ebnf$4$macrocall$1$ebnf$4\"], \"postprocess\":  toDebug('Section', function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return {type: 'SECTION', name: name, items: extractFirst(extractFirst(items)) } }) ||\n        function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return extractFirst(extractFirst(items)) } },\n    {\"name\": \"main$ebnf$4\", \"symbols\": [\"main$ebnf$4$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main$ebnf$5$macrocall$2\", \"symbols\": [\"t_SOUNDS\"]},\n    {\"name\": \"main$ebnf$5$macrocall$3\", \"symbols\": [\"SoundItem\"]},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$1\", \"symbols\": [\"main$ebnf$5$macrocall$1$ebnf$1\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$2\", \"symbols\": [\"main$ebnf$5$macrocall$1$ebnf$2\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$3\", \"symbols\": [\"main$ebnf$5$macrocall$1$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$4$subexpression$1\", \"symbols\": [\"main$ebnf$5$macrocall$3\"]},\n    {\"name\": \"main$ebnf$5$macrocall$1$ebnf$4\", \"symbols\": [\"main$ebnf$5$macrocall$1$ebnf$4\", \"main$ebnf$5$macrocall$1$ebnf$4$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$5$macrocall$1\", \"symbols\": [\"_\", \"main$ebnf$5$macrocall$1$ebnf$1\", \"lineTerminator\", \"_\", \"main$ebnf$5$macrocall$2\", \"lineTerminator\", \"_\", \"main$ebnf$5$macrocall$1$ebnf$2\", \"main$ebnf$5$macrocall$1$ebnf$3\", \"main$ebnf$5$macrocall$1$ebnf$4\"], \"postprocess\":  toDebug('Section', function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return {type: 'SECTION', name: name, items: extractFirst(extractFirst(items)) } }) ||\n        function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return extractFirst(extractFirst(items)) } },\n    {\"name\": \"main$ebnf$5\", \"symbols\": [\"main$ebnf$5$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main$ebnf$6$macrocall$2\", \"symbols\": [\"t_COLLISIONLAYERS\"]},\n    {\"name\": \"main$ebnf$6$macrocall$3\", \"symbols\": [\"CollisionLayerItem\"]},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$1\", \"symbols\": [\"main$ebnf$6$macrocall$1$ebnf$1\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$2\", \"symbols\": [\"main$ebnf$6$macrocall$1$ebnf$2\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$3\", \"symbols\": [\"main$ebnf$6$macrocall$1$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$4$subexpression$1\", \"symbols\": [\"main$ebnf$6$macrocall$3\"]},\n    {\"name\": \"main$ebnf$6$macrocall$1$ebnf$4\", \"symbols\": [\"main$ebnf$6$macrocall$1$ebnf$4\", \"main$ebnf$6$macrocall$1$ebnf$4$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$6$macrocall$1\", \"symbols\": [\"_\", \"main$ebnf$6$macrocall$1$ebnf$1\", \"lineTerminator\", \"_\", \"main$ebnf$6$macrocall$2\", \"lineTerminator\", \"_\", \"main$ebnf$6$macrocall$1$ebnf$2\", \"main$ebnf$6$macrocall$1$ebnf$3\", \"main$ebnf$6$macrocall$1$ebnf$4\"], \"postprocess\":  toDebug('Section', function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return {type: 'SECTION', name: name, items: extractFirst(extractFirst(items)) } }) ||\n        function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return extractFirst(extractFirst(items)) } },\n    {\"name\": \"main$ebnf$6\", \"symbols\": [\"main$ebnf$6$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$6\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main$ebnf$7$macrocall$2\", \"symbols\": [\"t_RULES\"]},\n    {\"name\": \"main$ebnf$7$macrocall$3\", \"symbols\": [\"RuleItem\"]},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$1\", \"symbols\": [\"main$ebnf$7$macrocall$1$ebnf$1\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$2\", \"symbols\": [\"main$ebnf$7$macrocall$1$ebnf$2\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$3\", \"symbols\": [\"main$ebnf$7$macrocall$1$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$4$subexpression$1\", \"symbols\": [\"main$ebnf$7$macrocall$3\"]},\n    {\"name\": \"main$ebnf$7$macrocall$1$ebnf$4\", \"symbols\": [\"main$ebnf$7$macrocall$1$ebnf$4\", \"main$ebnf$7$macrocall$1$ebnf$4$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$7$macrocall$1\", \"symbols\": [\"_\", \"main$ebnf$7$macrocall$1$ebnf$1\", \"lineTerminator\", \"_\", \"main$ebnf$7$macrocall$2\", \"lineTerminator\", \"_\", \"main$ebnf$7$macrocall$1$ebnf$2\", \"main$ebnf$7$macrocall$1$ebnf$3\", \"main$ebnf$7$macrocall$1$ebnf$4\"], \"postprocess\":  toDebug('Section', function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return {type: 'SECTION', name: name, items: extractFirst(extractFirst(items)) } }) ||\n        function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return extractFirst(extractFirst(items)) } },\n    {\"name\": \"main$ebnf$7\", \"symbols\": [\"main$ebnf$7$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$7\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main$ebnf$8$macrocall$2\", \"symbols\": [\"t_WINCONDITIONS\"]},\n    {\"name\": \"main$ebnf$8$macrocall$3\", \"symbols\": [\"WinConditionItem\"]},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$1\", \"symbols\": [\"main$ebnf$8$macrocall$1$ebnf$1\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$2\", \"symbols\": [\"main$ebnf$8$macrocall$1$ebnf$2\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$3\", \"symbols\": [\"main$ebnf$8$macrocall$1$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$4\", \"symbols\": []},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$4$subexpression$1\", \"symbols\": [\"main$ebnf$8$macrocall$3\"]},\n    {\"name\": \"main$ebnf$8$macrocall$1$ebnf$4\", \"symbols\": [\"main$ebnf$8$macrocall$1$ebnf$4\", \"main$ebnf$8$macrocall$1$ebnf$4$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$8$macrocall$1\", \"symbols\": [\"_\", \"main$ebnf$8$macrocall$1$ebnf$1\", \"lineTerminator\", \"_\", \"main$ebnf$8$macrocall$2\", \"lineTerminator\", \"_\", \"main$ebnf$8$macrocall$1$ebnf$2\", \"main$ebnf$8$macrocall$1$ebnf$3\", \"main$ebnf$8$macrocall$1$ebnf$4\"], \"postprocess\":  toDebug('Section', function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return {type: 'SECTION', name: name, items: extractFirst(extractFirst(items)) } }) ||\n        function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return extractFirst(extractFirst(items)) } },\n    {\"name\": \"main$ebnf$8\", \"symbols\": [\"main$ebnf$8$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$8\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main$ebnf$9$macrocall$2\", \"symbols\": [\"t_LEVELS\"]},\n    {\"name\": \"main$ebnf$9$macrocall$3\", \"symbols\": [\"LevelItem\"]},\n    {\"name\": \"main$ebnf$9$macrocall$1$ebnf$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$9$macrocall$1$ebnf$1\", \"symbols\": [\"main$ebnf$9$macrocall$1$ebnf$1\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$9$macrocall$1$ebnf$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"main$ebnf$9$macrocall$1$ebnf$2\", \"symbols\": [\"main$ebnf$9$macrocall$1$ebnf$2\", {\"literal\":\"=\"}], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$9$macrocall$1$ebnf$3\", \"symbols\": []},\n    {\"name\": \"main$ebnf$9$macrocall$1$ebnf$3$subexpression$1\", \"symbols\": [\"main$ebnf$9$macrocall$3\"]},\n    {\"name\": \"main$ebnf$9$macrocall$1$ebnf$3\", \"symbols\": [\"main$ebnf$9$macrocall$1$ebnf$3\", \"main$ebnf$9$macrocall$1$ebnf$3$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$9$macrocall$1\", \"symbols\": [\"_\", \"main$ebnf$9$macrocall$1$ebnf$1\", \"lineTerminator\", \"_\", \"main$ebnf$9$macrocall$2\", \"lineTerminator\", \"_\", \"main$ebnf$9$macrocall$1$ebnf$2\", \"lineTerminator\", \"main$ebnf$9$macrocall$1$ebnf$3\"], \"postprocess\":  toDebug('Section', function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return {type: 'SECTION', name: name, items: extractFirst(extractFirst(items)) } }) ||\n        function ([_0, _1, _2, _3, name, _5, _6, _7, _8, items]) { return extractFirst(extractFirst(items)) } },\n    {\"name\": \"main$ebnf$9\", \"symbols\": [\"main$ebnf$9$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$9\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main\", \"symbols\": [\"main$ebnf$1\", \"_\", \"Title\", \"main$ebnf$2\", \"OptionalMetaData\", \"main$ebnf$3\", \"main$ebnf$4\", \"main$ebnf$5\", \"main$ebnf$6\", \"main$ebnf$7\", \"main$ebnf$8\", \"main$ebnf$9\"], \"postprocess\":  toDebug('Section') ||\n        function([_0, _1, title, _2, metadata, sprites, legendItems, sounds, collisionLayers, rules, winConditions, levelsAsSingleArray]) {\n            const levels = []\n            let currentMapLevel = null\n            for (const levelRowItem of levelsAsSingleArray || []) {\n                switch (levelRowItem.type) {\n                    case 'LEVEL_ROW':\n                        if (currentMapLevel) {\n                            currentMapLevel.push(levelRowItem)\n                        } else {\n                            currentMapLevel = [levelRowItem]\n                        }\n                        break\n                    case 'LEVEL_MESSAGE':\n                        if (currentMapLevel) {\n                            levels.push({type: 'LEVEL_MAP', rowData: currentMapLevel.map(row => row.rowData), sourceOffset: currentMapLevel[0].sourceOffset})\n                            currentMapLevel = null\n                        }\n                        levels.push(levelRowItem)\n                        break\n                    case 'LEVEL_SEPARATOR':\n                        if (currentMapLevel) {\n                            levels.push({type: 'LEVEL_MAP', rowData: currentMapLevel.map(row => row.rowData), sourceOffset: currentMapLevel[0].sourceOffset})\n                            currentMapLevel = null\n                        }\n                        break\n                    default:\n                        throw new Error(`BUG: Unsupported level row type \"${levelRowItem.type}\"`)\n                }\n            }\n            // add the last level\n            if (currentMapLevel) {\n                levels.push({type: 'LEVEL_MAP', rowData: currentMapLevel.map(row => row.rowData), sourceOffset: currentMapLevel[0].sourceOffset})\n                currentMapLevel = null\n            }\n            return {\n                title: title.value,\n                metadata: metadata.value,\n                sprites: sprites || [],\n                legendItems: legendItems || [],\n                sounds: sounds || [],\n                collisionLayers: collisionLayers || [],\n                rules: rules || [],\n                winConditions: winConditions || [],\n                levels: levels\n            }\n        }\n            },\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"whitespaceChar\"]},\n    {\"name\": \"_$ebnf$1$subexpression$1\", \"symbols\": [\"multiLineComment\"]},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"_$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": toDebug('whitespace') || nuller},\n    {\"name\": \"__$ebnf$1$subexpression$1\", \"symbols\": [\"whitespaceChar\"]},\n    {\"name\": \"__$ebnf$1$subexpression$1\", \"symbols\": [\"multiLineComment\"]},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"__$ebnf$1$subexpression$1\"]},\n    {\"name\": \"__$ebnf$1$subexpression$2\", \"symbols\": [\"whitespaceChar\"]},\n    {\"name\": \"__$ebnf$1$subexpression$2\", \"symbols\": [\"multiLineComment\"]},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"__$ebnf$1\", \"__$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"__\", \"symbols\": [\"__$ebnf$1\"], \"postprocess\": toDebug('whitespace') || nuller},\n    {\"name\": \"multiLineComment$ebnf$1\", \"symbols\": []},\n    {\"name\": \"multiLineComment$ebnf$1\", \"symbols\": [\"multiLineComment$ebnf$1\", \"textOrComment\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"multiLineComment\", \"symbols\": [{\"literal\":\"(\"}, \"multiLineComment$ebnf$1\", {\"literal\":\")\"}], \"postprocess\": toDebug('multiLineComment') || nuller},\n    {\"name\": \"textOrComment\", \"symbols\": [\"multiLineComment\"], \"postprocess\": nuller},\n    {\"name\": \"textOrComment\", \"symbols\": [/[^\\(\\)]/], \"postprocess\": nuller},\n    {\"name\": \"whitespaceChar\", \"symbols\": [{\"literal\":\" \"}]},\n    {\"name\": \"whitespaceChar\", \"symbols\": [{\"literal\":\"\\t\"}]},\n    {\"name\": \"newline\", \"symbols\": [{\"literal\":\"\\n\"}]},\n    {\"name\": \"digit\", \"symbols\": [/[0-9]/], \"postprocess\": id},\n    {\"name\": \"hexDigit\", \"symbols\": [/[0-9a-fA-F]/], \"postprocess\": id},\n    {\"name\": \"letter\", \"symbols\": [/[^\\n \\(\\)]/], \"postprocess\": id},\n    {\"name\": \"integer$ebnf$1\", \"symbols\": [\"digit\"]},\n    {\"name\": \"integer$ebnf$1\", \"symbols\": [\"integer$ebnf$1\", \"digit\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"integer\", \"symbols\": [\"integer$ebnf$1\"], \"postprocess\": ([chars]) => parseInt(chars.join(''), 10)},\n    {\"name\": \"word$ebnf$1\", \"symbols\": [/[^\\n \\(]/]},\n    {\"name\": \"word$ebnf$1\", \"symbols\": [\"word$ebnf$1\", /[^\\n \\(]/], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"word\", \"symbols\": [\"word$ebnf$1\"], \"postprocess\": toDebug('WORD') || concatChars},\n    {\"name\": \"words$macrocall$2\", \"symbols\": [\"word\"]},\n    {\"name\": \"words$macrocall$3$ebnf$1\", \"symbols\": [\"whitespaceChar\"]},\n    {\"name\": \"words$macrocall$3$ebnf$1\", \"symbols\": [\"words$macrocall$3$ebnf$1\", \"whitespaceChar\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"words$macrocall$3\", \"symbols\": [\"words$macrocall$3$ebnf$1\"]},\n    {\"name\": \"words$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"words$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"words$macrocall$3\", \"words$macrocall$2\"]},\n    {\"name\": \"words$macrocall$1$ebnf$1\", \"symbols\": [\"words$macrocall$1$ebnf$1\", \"words$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"words$macrocall$1\", \"symbols\": [\"words$macrocall$2\", \"words$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"words\", \"symbols\": [\"words$macrocall$1\"], \"postprocess\": toDebug('WORDS') || function ([a]) { return extractFirst(a).join(' ') }},\n    {\"name\": \"lineTerminator\", \"symbols\": [\"_\", \"newline\"], \"postprocess\": toDebug('lineTerminator') || nuller},\n    {\"name\": \"sourceCharacter\", \"symbols\": [/[^\\n ]/]},\n    {\"name\": \"nonVarChar\", \"symbols\": [\"whitespaceChar\"]},\n    {\"name\": \"nonVarChar\", \"symbols\": [\"newline\"]},\n    {\"name\": \"nonVarChar\", \"symbols\": [{\"literal\":\"[\"}]},\n    {\"name\": \"nonVarChar\", \"symbols\": [{\"literal\":\"]\"}]},\n    {\"name\": \"nonVarChar\", \"symbols\": [{\"literal\":\"(\"}]},\n    {\"name\": \"nonVarChar\", \"symbols\": [{\"literal\":\")\"}]},\n    {\"name\": \"nonVarChar\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"nonVarChar\", \"symbols\": [{\"literal\":\".\"}]},\n    {\"name\": \"decimal\", \"symbols\": [\"decimalWithLeadingNumber\"]},\n    {\"name\": \"decimal\", \"symbols\": [\"decimalWithLeadingPeriod\"]},\n    {\"name\": \"decimalWithLeadingNumber$ebnf$1\", \"symbols\": [\"digit\"]},\n    {\"name\": \"decimalWithLeadingNumber$ebnf$1\", \"symbols\": [\"decimalWithLeadingNumber$ebnf$1\", \"digit\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"decimalWithLeadingNumber$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"digit\"]},\n    {\"name\": \"decimalWithLeadingNumber$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"decimalWithLeadingNumber$ebnf$2$subexpression$1$ebnf$1\", \"digit\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"decimalWithLeadingNumber$ebnf$2$subexpression$1\", \"symbols\": [{\"literal\":\".\"}, \"decimalWithLeadingNumber$ebnf$2$subexpression$1$ebnf$1\"]},\n    {\"name\": \"decimalWithLeadingNumber$ebnf$2\", \"symbols\": [\"decimalWithLeadingNumber$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"decimalWithLeadingNumber$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"decimalWithLeadingNumber\", \"symbols\": [\"decimalWithLeadingNumber$ebnf$1\", \"decimalWithLeadingNumber$ebnf$2\"]},\n    {\"name\": \"decimalWithLeadingPeriod$ebnf$1\", \"symbols\": [\"digit\"]},\n    {\"name\": \"decimalWithLeadingPeriod$ebnf$1\", \"symbols\": [\"decimalWithLeadingPeriod$ebnf$1\", \"digit\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"decimalWithLeadingPeriod\", \"symbols\": [{\"literal\":\".\"}, \"decimalWithLeadingPeriod$ebnf$1\"]},\n    {\"name\": \"colorHex6\", \"symbols\": [{\"literal\":\"#\"}, \"hexDigit\", \"hexDigit\", \"hexDigit\", \"hexDigit\", \"hexDigit\", \"hexDigit\"], \"postprocess\": (a, sourceOffset) => { return {type:'COLOR_HEX6', value: a.join(''), sourceOffset} }},\n    {\"name\": \"colorHex3\", \"symbols\": [{\"literal\":\"#\"}, \"hexDigit\", \"hexDigit\", \"hexDigit\"], \"postprocess\": (a, sourceOffset) => { return {type:'COLOR_HEX3', value: a.join(''), sourceOffset} }},\n    {\"name\": \"colorNameOrHex\", \"symbols\": [\"colorHex6\"], \"postprocess\": id},\n    {\"name\": \"colorNameOrHex\", \"symbols\": [\"colorHex3\"], \"postprocess\": id},\n    {\"name\": \"colorNameOrHex\", \"symbols\": [\"colorName\"], \"postprocess\": id},\n    {\"name\": \"colorName\", \"symbols\": [/[^\\n #\\(0-9\\.]/, \"word\"], \"postprocess\": toDebug('COLOR_NAME') || function ([first, rest], sourceOffset) { return {type:'COLOR_NAME', value: [first].concat(rest).join(''), sourceOffset} }},\n    {\"name\": \"legendVariableChar\", \"symbols\": [/[^\\n\\ \\=]/]},\n    {\"name\": \"ruleVariableChar\", \"symbols\": [/[^(?=\\.\\.\\.)\\n \\=\\[\\]\\|]/]},\n    {\"name\": \"ruleVariableName$ebnf$1\", \"symbols\": [\"ruleVariableChar\"]},\n    {\"name\": \"ruleVariableName$ebnf$1\", \"symbols\": [\"ruleVariableName$ebnf$1\", \"ruleVariableChar\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"ruleVariableName\", \"symbols\": [\"ruleVariableName$ebnf$1\"], \"postprocess\": concatChars},\n    {\"name\": \"lookupRuleVariableName$ebnf$1\", \"symbols\": [/[^\\n \\=\\[\\]\\|]/]},\n    {\"name\": \"lookupRuleVariableName$ebnf$1\", \"symbols\": [\"lookupRuleVariableName$ebnf$1\", /[^\\n \\=\\[\\]\\|]/], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"lookupRuleVariableName\", \"symbols\": [\"lookupRuleVariableName$ebnf$1\"], \"postprocess\":  ([a], offset, reject) => {\n          const str = a.join('')\n          if (TILE_MODIFIERS.has(str.toUpperCase())) {\n            return reject\n          } else {\n            return str\n          }\n        } },\n    {\"name\": \"collisionVariableChar\", \"symbols\": [/[^(?=\\.\\.\\.)\\ \\n\\=\\[\\]\\|\\,]/]},\n    {\"name\": \"collisionVariableName$ebnf$1\", \"symbols\": [\"collisionVariableChar\"]},\n    {\"name\": \"collisionVariableName$ebnf$1\", \"symbols\": [\"collisionVariableName$ebnf$1\", \"collisionVariableChar\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"collisionVariableName\", \"symbols\": [\"collisionVariableName$ebnf$1\"], \"postprocess\": concatChars},\n    {\"name\": \"lookupCollisionVariableName\", \"symbols\": [\"collisionVariableName\"], \"postprocess\": id},\n    {\"name\": \"t_DEBUGGER\", \"symbols\": [\"t_DEBUGGER_ADD\"], \"postprocess\": id},\n    {\"name\": \"t_DEBUGGER\", \"symbols\": [\"t_DEBUGGER_REMOVE\"], \"postprocess\": id},\n    {\"name\": \"t_DEBUGGER\", \"symbols\": [\"t_DEBUGGER_DEFAULT\"], \"postprocess\": id},\n    {\"name\": \"t_DEBUGGER_DEFAULT$subexpression$1\", \"symbols\": [/[dD]/, /[eE]/, /[bB]/, /[uU]/, /[gG]/, /[gG]/, /[eE]/, /[rR]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_DEBUGGER_DEFAULT\", \"symbols\": [\"t_DEBUGGER_DEFAULT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_DEBUGGER_ADD$subexpression$1\", \"symbols\": [/[dD]/, /[eE]/, /[bB]/, /[uU]/, /[gG]/, /[gG]/, /[eE]/, /[rR]/, {\"literal\":\"_\"}, /[aA]/, /[dD]/, /[dD]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_DEBUGGER_ADD\", \"symbols\": [\"t_DEBUGGER_ADD$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_DEBUGGER_REMOVE$subexpression$1\", \"symbols\": [/[dD]/, /[eE]/, /[bB]/, /[uU]/, /[gG]/, /[gG]/, /[eE]/, /[rR]/, {\"literal\":\"_\"}, /[rR]/, /[eE]/, /[mM]/, /[oO]/, /[vV]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_DEBUGGER_REMOVE\", \"symbols\": [\"t_DEBUGGER_REMOVE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_OBJECTS$subexpression$1\", \"symbols\": [/[oO]/, /[bB]/, /[jJ]/, /[eE]/, /[cC]/, /[tT]/, /[sS]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_OBJECTS\", \"symbols\": [\"t_OBJECTS$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_LEGEND$subexpression$1\", \"symbols\": [/[lL]/, /[eE]/, /[gG]/, /[eE]/, /[nN]/, /[dD]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_LEGEND\", \"symbols\": [\"t_LEGEND$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SOUNDS$subexpression$1\", \"symbols\": [/[sS]/, /[oO]/, /[uU]/, /[nN]/, /[dD]/, /[sS]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SOUNDS\", \"symbols\": [\"t_SOUNDS$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_COLLISIONLAYERS$subexpression$1\", \"symbols\": [/[cC]/, /[oO]/, /[lL]/, /[lL]/, /[iI]/, /[sS]/, /[iI]/, /[oO]/, /[nN]/, /[lL]/, /[aA]/, /[yY]/, /[eE]/, /[rR]/, /[sS]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_COLLISIONLAYERS\", \"symbols\": [\"t_COLLISIONLAYERS$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_RULES$subexpression$1\", \"symbols\": [/[rR]/, /[uU]/, /[lL]/, /[eE]/, /[sS]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_RULES\", \"symbols\": [\"t_RULES$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_WINCONDITIONS$subexpression$1\", \"symbols\": [/[wW]/, /[iI]/, /[nN]/, /[cC]/, /[oO]/, /[nN]/, /[dD]/, /[iI]/, /[tT]/, /[iI]/, /[oO]/, /[nN]/, /[sS]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_WINCONDITIONS\", \"symbols\": [\"t_WINCONDITIONS$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_LEVELS$subexpression$1\", \"symbols\": [/[lL]/, /[eE]/, /[vV]/, /[eE]/, /[lL]/, /[sS]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_LEVELS\", \"symbols\": [\"t_LEVELS$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_RIGID$subexpression$1\", \"symbols\": [/[rR]/, /[iI]/, /[gG]/, /[iI]/, /[dD]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_RIGID\", \"symbols\": [\"t_RIGID$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_LATE$subexpression$1\", \"symbols\": [/[lL]/, /[aA]/, /[tT]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_LATE\", \"symbols\": [\"t_LATE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_RANDOM$subexpression$1\", \"symbols\": [/[rR]/, /[aA]/, /[nN]/, /[dD]/, /[oO]/, /[mM]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_RANDOM\", \"symbols\": [\"t_RANDOM$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_RANDOMDIR$subexpression$1\", \"symbols\": [/[rR]/, /[aA]/, /[nN]/, /[dD]/, /[oO]/, /[mM]/, /[dD]/, /[iI]/, /[rR]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_RANDOMDIR\", \"symbols\": [\"t_RANDOMDIR$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ACTION$subexpression$1\", \"symbols\": [/[aA]/, /[cC]/, /[tT]/, /[iI]/, /[oO]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ACTION\", \"symbols\": [\"t_ACTION$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_STARTLOOP$subexpression$1\", \"symbols\": [/[sS]/, /[tT]/, /[aA]/, /[rR]/, /[tT]/, /[lL]/, /[oO]/, /[oO]/, /[pP]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_STARTLOOP\", \"symbols\": [\"t_STARTLOOP$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ENDLOOP$subexpression$1\", \"symbols\": [/[eE]/, /[nN]/, /[dD]/, /[lL]/, /[oO]/, /[oO]/, /[pP]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ENDLOOP\", \"symbols\": [\"t_ENDLOOP$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_UP$subexpression$1\", \"symbols\": [/[uU]/, /[pP]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_UP\", \"symbols\": [\"t_UP$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_DOWN$subexpression$1\", \"symbols\": [/[dD]/, /[oO]/, /[wW]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_DOWN\", \"symbols\": [\"t_DOWN$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_LEFT$subexpression$1\", \"symbols\": [/[lL]/, /[eE]/, /[fF]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_LEFT\", \"symbols\": [\"t_LEFT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_RIGHT$subexpression$1\", \"symbols\": [/[rR]/, /[iI]/, /[gG]/, /[hH]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_RIGHT\", \"symbols\": [\"t_RIGHT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_UP$subexpression$1\", \"symbols\": [{\"literal\":\"^\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ARROW_UP\", \"symbols\": [\"t_ARROW_UP$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_DOWN$subexpression$1\", \"symbols\": [/[vV]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ARROW_DOWN\", \"symbols\": [\"t_ARROW_DOWN$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_LEFT$subexpression$1\", \"symbols\": [{\"literal\":\"<\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ARROW_LEFT\", \"symbols\": [\"t_ARROW_LEFT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_RIGHT$subexpression$1\", \"symbols\": [{\"literal\":\">\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ARROW_RIGHT\", \"symbols\": [\"t_ARROW_RIGHT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_MOVING$subexpression$1\", \"symbols\": [/[mM]/, /[oO]/, /[vV]/, /[iI]/, /[nN]/, /[gG]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_MOVING\", \"symbols\": [\"t_MOVING$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ORTHOGONAL$subexpression$1\", \"symbols\": [/[oO]/, /[rR]/, /[tT]/, /[hH]/, /[oO]/, /[gG]/, /[oO]/, /[nN]/, /[aA]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ORTHOGONAL\", \"symbols\": [\"t_ORTHOGONAL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_PERPENDICULAR$subexpression$1\", \"symbols\": [/[pP]/, /[eE]/, /[rR]/, /[pP]/, /[eE]/, /[nN]/, /[dD]/, /[iI]/, /[cC]/, /[uU]/, /[lL]/, /[aA]/, /[rR]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_PERPENDICULAR\", \"symbols\": [\"t_PERPENDICULAR$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_PARALLEL$subexpression$1\", \"symbols\": [/[pP]/, /[aA]/, /[rR]/, /[aA]/, /[lL]/, /[lL]/, /[eE]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_PARALLEL\", \"symbols\": [\"t_PARALLEL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_STATIONARY$subexpression$1\", \"symbols\": [/[sS]/, /[tT]/, /[aA]/, /[tT]/, /[iI]/, /[oO]/, /[nN]/, /[aA]/, /[rR]/, /[yY]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_STATIONARY\", \"symbols\": [\"t_STATIONARY$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_HORIZONTAL$subexpression$1\", \"symbols\": [/[hH]/, /[oO]/, /[rR]/, /[iI]/, /[zZ]/, /[oO]/, /[nN]/, /[tT]/, /[aA]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_HORIZONTAL\", \"symbols\": [\"t_HORIZONTAL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_VERTICAL$subexpression$1\", \"symbols\": [/[vV]/, /[eE]/, /[rR]/, /[tT]/, /[iI]/, /[cC]/, /[aA]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_VERTICAL\", \"symbols\": [\"t_VERTICAL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_ANY\", \"symbols\": [\"t_ARROW_UP\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_ANY\", \"symbols\": [\"t_ARROW_DOWN\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_ANY\", \"symbols\": [\"t_ARROW_LEFT\"], \"postprocess\": upperId},\n    {\"name\": \"t_ARROW_ANY\", \"symbols\": [\"t_ARROW_RIGHT\"], \"postprocess\": upperId},\n    {\"name\": \"t_AGAIN$subexpression$1\", \"symbols\": [/[aA]/, /[gG]/, /[aA]/, /[iI]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_AGAIN\", \"symbols\": [\"t_AGAIN$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_CANCEL$subexpression$1\", \"symbols\": [/[cC]/, /[aA]/, /[nN]/, /[cC]/, /[eE]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_CANCEL\", \"symbols\": [\"t_CANCEL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_CHECKPOINT$subexpression$1\", \"symbols\": [/[cC]/, /[hH]/, /[eE]/, /[cC]/, /[kK]/, /[pP]/, /[oO]/, /[iI]/, /[nN]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_CHECKPOINT\", \"symbols\": [\"t_CHECKPOINT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_RESTART$subexpression$1\", \"symbols\": [/[rR]/, /[eE]/, /[sS]/, /[tT]/, /[aA]/, /[rR]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_RESTART\", \"symbols\": [\"t_RESTART$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_UNDO$subexpression$1\", \"symbols\": [/[uU]/, /[nN]/, /[dD]/, /[oO]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_UNDO\", \"symbols\": [\"t_UNDO$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_WIN$subexpression$1\", \"symbols\": [/[wW]/, /[iI]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_WIN\", \"symbols\": [\"t_WIN$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_MESSAGE$subexpression$1\", \"symbols\": [/[mM]/, /[eE]/, /[sS]/, /[sS]/, /[aA]/, /[gG]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_MESSAGE\", \"symbols\": [\"t_MESSAGE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ELLIPSIS$subexpression$1\", \"symbols\": [{\"literal\":\".\"}, {\"literal\":\".\"}, {\"literal\":\".\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ELLIPSIS\", \"symbols\": [\"t_ELLIPSIS$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_AND$subexpression$1\", \"symbols\": [/[aA]/, /[nN]/, /[dD]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_AND\", \"symbols\": [\"t_AND$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_OR$subexpression$1\", \"symbols\": [/[oO]/, /[rR]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_OR\", \"symbols\": [\"t_OR$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX0$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"0\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX0\", \"symbols\": [\"t_SFX0$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX1$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"1\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX1\", \"symbols\": [\"t_SFX1$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX2$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"2\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX2\", \"symbols\": [\"t_SFX2$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX3$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"3\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX3\", \"symbols\": [\"t_SFX3$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX4$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"4\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX4\", \"symbols\": [\"t_SFX4$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX5$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"5\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX5\", \"symbols\": [\"t_SFX5$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX6$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"6\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX6\", \"symbols\": [\"t_SFX6$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX7$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"7\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX7\", \"symbols\": [\"t_SFX7$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX8$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"8\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX8\", \"symbols\": [\"t_SFX8$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX9$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"9\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX9\", \"symbols\": [\"t_SFX9$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX10$subexpression$1\", \"symbols\": [/[sS]/, /[fF]/, /[xX]/, {\"literal\":\"1\"}, {\"literal\":\"0\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SFX10\", \"symbols\": [\"t_SFX10$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX10\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX0\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX2\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX3\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX4\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX5\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX6\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX7\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX8\"], \"postprocess\": upperId},\n    {\"name\": \"t_SFX\", \"symbols\": [\"t_SFX9\"], \"postprocess\": upperId},\n    {\"name\": \"t_TITLE$subexpression$1\", \"symbols\": [/[tT]/, /[iI]/, /[tT]/, /[lL]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_TITLE\", \"symbols\": [\"t_TITLE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_AUTHOR$subexpression$1\", \"symbols\": [/[aA]/, /[uU]/, /[tT]/, /[hH]/, /[oO]/, /[rR]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_AUTHOR\", \"symbols\": [\"t_AUTHOR$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_HOMEPAGE$subexpression$1\", \"symbols\": [/[hH]/, /[oO]/, /[mM]/, /[eE]/, /[pP]/, /[aA]/, /[gG]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_HOMEPAGE\", \"symbols\": [\"t_HOMEPAGE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_YOUTUBE$subexpression$1\", \"symbols\": [/[yY]/, /[oO]/, /[uU]/, /[tT]/, /[uU]/, /[bB]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_YOUTUBE\", \"symbols\": [\"t_YOUTUBE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ZOOMSCREEN$subexpression$1\", \"symbols\": [/[zZ]/, /[oO]/, /[oO]/, /[mM]/, /[sS]/, /[cC]/, /[rR]/, /[eE]/, /[eE]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ZOOMSCREEN\", \"symbols\": [\"t_ZOOMSCREEN$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_FLICKSCREEN$subexpression$1\", \"symbols\": [/[fF]/, /[lL]/, /[iI]/, /[cC]/, /[kK]/, /[sS]/, /[cC]/, /[rR]/, /[eE]/, /[eE]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_FLICKSCREEN\", \"symbols\": [\"t_FLICKSCREEN$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_REQUIRE_PLAYER_MOVEMENT$subexpression$1\", \"symbols\": [/[rR]/, /[eE]/, /[qQ]/, /[uU]/, /[iI]/, /[rR]/, /[eE]/, {\"literal\":\"_\"}, /[pP]/, /[lL]/, /[aA]/, /[yY]/, /[eE]/, /[rR]/, {\"literal\":\"_\"}, /[mM]/, /[oO]/, /[vV]/, /[eE]/, /[mM]/, /[eE]/, /[nN]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_REQUIRE_PLAYER_MOVEMENT\", \"symbols\": [\"t_REQUIRE_PLAYER_MOVEMENT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_RUN_RULES_ON_LEVEL_START$subexpression$1\", \"symbols\": [/[rR]/, /[uU]/, /[nN]/, {\"literal\":\"_\"}, /[rR]/, /[uU]/, /[lL]/, /[eE]/, /[sS]/, {\"literal\":\"_\"}, /[oO]/, /[nN]/, {\"literal\":\"_\"}, /[lL]/, /[eE]/, /[vV]/, /[eE]/, /[lL]/, {\"literal\":\"_\"}, /[sS]/, /[tT]/, /[aA]/, /[rR]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_RUN_RULES_ON_LEVEL_START\", \"symbols\": [\"t_RUN_RULES_ON_LEVEL_START$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_COLOR_PALETTE$subexpression$1\", \"symbols\": [/[cC]/, /[oO]/, /[lL]/, /[oO]/, /[rR]/, {\"literal\":\"_\"}, /[pP]/, /[aA]/, /[lL]/, /[eE]/, /[tT]/, /[tT]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_COLOR_PALETTE\", \"symbols\": [\"t_COLOR_PALETTE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_BACKGROUND_COLOR$subexpression$1\", \"symbols\": [/[bB]/, /[aA]/, /[cC]/, /[kK]/, /[gG]/, /[rR]/, /[oO]/, /[uU]/, /[nN]/, /[dD]/, {\"literal\":\"_\"}, /[cC]/, /[oO]/, /[lL]/, /[oO]/, /[rR]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_BACKGROUND_COLOR\", \"symbols\": [\"t_BACKGROUND_COLOR$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_TEXT_COLOR$subexpression$1\", \"symbols\": [/[tT]/, /[eE]/, /[xX]/, /[tT]/, {\"literal\":\"_\"}, /[cC]/, /[oO]/, /[lL]/, /[oO]/, /[rR]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_TEXT_COLOR\", \"symbols\": [\"t_TEXT_COLOR$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_REALTIME_INTERVAL$subexpression$1\", \"symbols\": [/[rR]/, /[eE]/, /[aA]/, /[lL]/, /[tT]/, /[iI]/, /[mM]/, /[eE]/, {\"literal\":\"_\"}, /[iI]/, /[nN]/, /[tT]/, /[eE]/, /[rR]/, /[vV]/, /[aA]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_REALTIME_INTERVAL\", \"symbols\": [\"t_REALTIME_INTERVAL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_KEY_REPEAT_INTERVAL$subexpression$1\", \"symbols\": [/[kK]/, /[eE]/, /[yY]/, {\"literal\":\"_\"}, /[rR]/, /[eE]/, /[pP]/, /[eE]/, /[aA]/, /[tT]/, {\"literal\":\"_\"}, /[iI]/, /[nN]/, /[tT]/, /[eE]/, /[rR]/, /[vV]/, /[aA]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_KEY_REPEAT_INTERVAL\", \"symbols\": [\"t_KEY_REPEAT_INTERVAL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_AGAIN_INTERVAL$subexpression$1\", \"symbols\": [/[aA]/, /[gG]/, /[aA]/, /[iI]/, /[nN]/, {\"literal\":\"_\"}, /[iI]/, /[nN]/, /[tT]/, /[eE]/, /[rR]/, /[vV]/, /[aA]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_AGAIN_INTERVAL\", \"symbols\": [\"t_AGAIN_INTERVAL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_NOACTION$subexpression$1\", \"symbols\": [/[nN]/, /[oO]/, /[aA]/, /[cC]/, /[tT]/, /[iI]/, /[oO]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_NOACTION\", \"symbols\": [\"t_NOACTION$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_NOUNDO$subexpression$1\", \"symbols\": [/[nN]/, /[oO]/, /[uU]/, /[nN]/, /[dD]/, /[oO]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_NOUNDO\", \"symbols\": [\"t_NOUNDO$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_NORESTART$subexpression$1\", \"symbols\": [/[nN]/, /[oO]/, /[rR]/, /[eE]/, /[sS]/, /[tT]/, /[aA]/, /[rR]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_NORESTART\", \"symbols\": [\"t_NORESTART$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_THROTTLE_MOVEMENT$subexpression$1\", \"symbols\": [/[tT]/, /[hH]/, /[rR]/, /[oO]/, /[tT]/, /[tT]/, /[lL]/, /[eE]/, {\"literal\":\"_\"}, /[mM]/, /[oO]/, /[vV]/, /[eE]/, /[mM]/, /[eE]/, /[nN]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_THROTTLE_MOVEMENT\", \"symbols\": [\"t_THROTTLE_MOVEMENT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_NOREPEAT_ACTION$subexpression$1\", \"symbols\": [/[nN]/, /[oO]/, /[rR]/, /[eE]/, /[pP]/, /[eE]/, /[aA]/, /[tT]/, {\"literal\":\"_\"}, /[aA]/, /[cC]/, /[tT]/, /[iI]/, /[oO]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_NOREPEAT_ACTION\", \"symbols\": [\"t_NOREPEAT_ACTION$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_VERBOSE_LOGGING$subexpression$1\", \"symbols\": [/[vV]/, /[eE]/, /[rR]/, /[bB]/, /[oO]/, /[sS]/, /[eE]/, {\"literal\":\"_\"}, /[lL]/, /[oO]/, /[gG]/, /[gG]/, /[iI]/, /[nN]/, /[gG]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_VERBOSE_LOGGING\", \"symbols\": [\"t_VERBOSE_LOGGING$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_TRANSPARENT$subexpression$1\", \"symbols\": [/[tT]/, /[rR]/, /[aA]/, /[nN]/, /[sS]/, /[pP]/, /[aA]/, /[rR]/, /[eE]/, /[nN]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_TRANSPARENT\", \"symbols\": [\"t_TRANSPARENT$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_MOVE$subexpression$1\", \"symbols\": [/[mM]/, /[oO]/, /[vV]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_MOVE\", \"symbols\": [\"t_MOVE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_DESTROY$subexpression$1\", \"symbols\": [/[dD]/, /[eE]/, /[sS]/, /[tT]/, /[rR]/, /[oO]/, /[yY]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_DESTROY\", \"symbols\": [\"t_DESTROY$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_CREATE$subexpression$1\", \"symbols\": [/[cC]/, /[rR]/, /[eE]/, /[aA]/, /[tT]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_CREATE\", \"symbols\": [\"t_CREATE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_CANTMOVE$subexpression$1\", \"symbols\": [/[cC]/, /[aA]/, /[nN]/, /[tT]/, /[mM]/, /[oO]/, /[vV]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_CANTMOVE\", \"symbols\": [\"t_CANTMOVE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_TITLESCREEN$subexpression$1\", \"symbols\": [/[tT]/, /[iI]/, /[tT]/, /[lL]/, /[eE]/, /[sS]/, /[cC]/, /[rR]/, /[eE]/, /[eE]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_TITLESCREEN\", \"symbols\": [\"t_TITLESCREEN$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_STARTGAME$subexpression$1\", \"symbols\": [/[sS]/, /[tT]/, /[aA]/, /[rR]/, /[tT]/, /[gG]/, /[aA]/, /[mM]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_STARTGAME\", \"symbols\": [\"t_STARTGAME$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_STARTLEVEL$subexpression$1\", \"symbols\": [/[sS]/, /[tT]/, /[aA]/, /[rR]/, /[tT]/, /[lL]/, /[eE]/, /[vV]/, /[eE]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_STARTLEVEL\", \"symbols\": [\"t_STARTLEVEL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ENDLEVEL$subexpression$1\", \"symbols\": [/[eE]/, /[nN]/, /[dD]/, /[lL]/, /[eE]/, /[vV]/, /[eE]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ENDLEVEL\", \"symbols\": [\"t_ENDLEVEL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ENDGAME$subexpression$1\", \"symbols\": [/[eE]/, /[nN]/, /[dD]/, /[gG]/, /[aA]/, /[mM]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ENDGAME\", \"symbols\": [\"t_ENDGAME$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SHOWMESSAGE$subexpression$1\", \"symbols\": [/[sS]/, /[hH]/, /[oO]/, /[wW]/, /[mM]/, /[eE]/, /[sS]/, /[sS]/, /[aA]/, /[gG]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SHOWMESSAGE\", \"symbols\": [\"t_SHOWMESSAGE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_CLOSEMESSAGE$subexpression$1\", \"symbols\": [/[cC]/, /[lL]/, /[oO]/, /[sS]/, /[eE]/, /[mM]/, /[eE]/, /[sS]/, /[sS]/, /[aA]/, /[gG]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_CLOSEMESSAGE\", \"symbols\": [\"t_CLOSEMESSAGE$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_GROUP_RULE_PLUS$subexpression$1\", \"symbols\": [{\"literal\":\"+\"}], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_GROUP_RULE_PLUS\", \"symbols\": [\"t_GROUP_RULE_PLUS$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ON$subexpression$1\", \"symbols\": [/[oO]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ON\", \"symbols\": [\"t_ON$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_NO$subexpression$1\", \"symbols\": [/[nN]/, /[oO]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_NO\", \"symbols\": [\"t_NO$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ALL$subexpression$1\", \"symbols\": [/[aA]/, /[lL]/, /[lL]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ALL\", \"symbols\": [\"t_ALL$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_ANY$subexpression$1\", \"symbols\": [/[aA]/, /[nN]/, /[yY]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_ANY\", \"symbols\": [\"t_ANY$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"t_SOME$subexpression$1\", \"symbols\": [/[sS]/, /[oO]/, /[mM]/, /[eE]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"t_SOME\", \"symbols\": [\"t_SOME$subexpression$1\"], \"postprocess\": upperId},\n    {\"name\": \"Title\", \"symbols\": [\"t_TITLE\", \"__\", \"words\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'TITLE', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaData$ebnf$1\", \"symbols\": []},\n    {\"name\": \"OptionalMetaData$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"OptionalMetaData$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [\"OptionalMetaData$ebnf$1$subexpression$1$ebnf$1\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"OptionalMetaData$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"OptionalMetaDataItem\", \"OptionalMetaData$ebnf$1$subexpression$1$ebnf$1\"]},\n    {\"name\": \"OptionalMetaData$ebnf$1\", \"symbols\": [\"OptionalMetaData$ebnf$1\", \"OptionalMetaData$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"OptionalMetaData\", \"symbols\": [\"OptionalMetaData$ebnf$1\"], \"postprocess\": ([vals]) => { return {type: 'METADATA', value: extractSecond(vals)} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_AUTHOR\", \"__\", \"words\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'AUTHOR', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_HOMEPAGE\", \"__\", \"word\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'HOMEPAGE', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_YOUTUBE\", \"__\", \"word\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'YOUTUBE', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_ZOOMSCREEN\", \"__\", \"widthAndHeight\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'ZOOMSCREEN', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_FLICKSCREEN\", \"__\", \"widthAndHeight\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'FLICKSCREEN', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem$ebnf$1$subexpression$1$string$1\", \"symbols\": [{\"literal\":\"o\"}, {\"literal\":\"f\"}, {\"literal\":\"f\"}], \"postprocess\": (d) => d.join('')},\n    {\"name\": \"OptionalMetaDataItem$ebnf$1$subexpression$1\", \"symbols\": [\"__\", \"OptionalMetaDataItem$ebnf$1$subexpression$1$string$1\"]},\n    {\"name\": \"OptionalMetaDataItem$ebnf$1\", \"symbols\": [\"OptionalMetaDataItem$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"OptionalMetaDataItem$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_REQUIRE_PLAYER_MOVEMENT\", \"OptionalMetaDataItem$ebnf$1\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'REQUIRE_PLAYER_MOVEMENT', value: !!value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem$ebnf$2$subexpression$1$string$1\", \"symbols\": [{\"literal\":\"t\"}, {\"literal\":\"r\"}, {\"literal\":\"u\"}, {\"literal\":\"e\"}], \"postprocess\": (d) => d.join('')},\n    {\"name\": \"OptionalMetaDataItem$ebnf$2$subexpression$1\", \"symbols\": [\"__\", \"OptionalMetaDataItem$ebnf$2$subexpression$1$string$1\"]},\n    {\"name\": \"OptionalMetaDataItem$ebnf$2\", \"symbols\": [\"OptionalMetaDataItem$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"OptionalMetaDataItem$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_RUN_RULES_ON_LEVEL_START\", \"OptionalMetaDataItem$ebnf$2\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'RUN_RULES_ON_LEVEL_START', value: true, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_COLOR_PALETTE\", \"__\", \"word\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'COLOR_PALETTE', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_BACKGROUND_COLOR\", \"__\", \"colorNameOrHex\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'BACKGROUND_COLOR', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_TEXT_COLOR\", \"__\", \"colorNameOrHex\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'TEXT_COLOR', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_REALTIME_INTERVAL\", \"__\", \"decimal\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'REALTIME_INTERVAL', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_KEY_REPEAT_INTERVAL\", \"__\", \"decimal\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'KEY_REPEAT_INTERVAL', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_AGAIN_INTERVAL\", \"__\", \"decimal\"], \"postprocess\": ([_1, _2, value], sourceOffset) => { return {type:'AGAIN_INTERVAL', value, sourceOffset} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_NOACTION\"], \"postprocess\": () => { return {type:'NOACTION', value: true} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_NOUNDO\"], \"postprocess\": () => { return {type:'NOUNDO', value: true} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_NOREPEAT_ACTION\"], \"postprocess\": () => { return {type:'NOREPEAT_ACTION', value: true} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_THROTTLE_MOVEMENT\"], \"postprocess\": () => { return {type:'THROTTLE_MOVEMENT', value: true} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_NORESTART\"], \"postprocess\": () => { return {type:'NORESTART', value: true} }},\n    {\"name\": \"OptionalMetaDataItem\", \"symbols\": [\"t_VERBOSE_LOGGING\"], \"postprocess\": () => { return {type:'VERBOSE_LOGGING', value: true} }},\n    {\"name\": \"widthAndHeight\", \"symbols\": [\"integer\", {\"literal\":\"x\"}, \"integer\"], \"postprocess\": ([width, _1, height]) => { return {type: 'WIDTH_AND_HEIGHT', width, height} }},\n    {\"name\": \"Sprite\", \"symbols\": [\"SpritePixels\"], \"postprocess\": id},\n    {\"name\": \"Sprite\", \"symbols\": [\"SpriteNoPixels\"], \"postprocess\": id},\n    {\"name\": \"SpriteNoPixels$ebnf$1$subexpression$1\", \"symbols\": [\"__\", \"legendShortcutChar\"]},\n    {\"name\": \"SpriteNoPixels$ebnf$1\", \"symbols\": [\"SpriteNoPixels$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"SpriteNoPixels$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"SpriteNoPixels$ebnf$2\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"SpriteNoPixels$ebnf$2\", \"symbols\": [\"SpriteNoPixels$ebnf$2\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"SpriteNoPixels$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"SpriteNoPixels$ebnf$3\", \"symbols\": [\"SpriteNoPixels$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"SpriteNoPixels\", \"symbols\": [\"_\", \"spriteName\", \"SpriteNoPixels$ebnf$1\", \"SpriteNoPixels$ebnf$2\", \"_\", \"colorDefinitions\", \"SpriteNoPixels$ebnf$3\"], \"postprocess\": toDebug('SpriteNoPixels') || function ([_0, name, mapCharOpt, _2, _3, colors, _5], sourceOffset) { return {type: 'SPRITE_NO_PIXELS', name: name, mapChar: mapCharOpt ? mapCharOpt[1] : null, colors, sourceOffset} }},\n    {\"name\": \"SpritePixels$ebnf$1$subexpression$1\", \"symbols\": [\"__\", \"legendShortcutChar\"]},\n    {\"name\": \"SpritePixels$ebnf$1\", \"symbols\": [\"SpritePixels$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"SpritePixels$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"SpritePixels$ebnf$2\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"SpritePixels$ebnf$2\", \"symbols\": [\"SpritePixels$ebnf$2\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"SpritePixels$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"SpritePixels$ebnf$3\", \"symbols\": [\"SpritePixels$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"SpritePixels$ebnf$4\", \"symbols\": []},\n    {\"name\": \"SpritePixels$ebnf$4\", \"symbols\": [\"SpritePixels$ebnf$4\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"SpritePixels\", \"symbols\": [\"_\", \"spriteName\", \"SpritePixels$ebnf$1\", \"SpritePixels$ebnf$2\", \"_\", \"colorDefinitions\", \"SpritePixels$ebnf$3\", \"PixelRows\", \"SpritePixels$ebnf$4\"], \"postprocess\": toDebug('SpritePixels') || function ([_0, name, mapCharOpt, _2, _3, colors, _5, pixels, _7], sourceOffset) { return {type: 'SPRITE_WITH_PIXELS', name: name, mapChar: mapCharOpt ? mapCharOpt[1] : null, colors, pixels, sourceOffset} }},\n    {\"name\": \"colorDefinitions$macrocall$2\", \"symbols\": [\"colorNameOrHex\"]},\n    {\"name\": \"colorDefinitions$macrocall$3\", \"symbols\": [\"__\"]},\n    {\"name\": \"colorDefinitions$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"colorDefinitions$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"colorDefinitions$macrocall$3\", \"colorDefinitions$macrocall$2\"]},\n    {\"name\": \"colorDefinitions$macrocall$1$ebnf$1\", \"symbols\": [\"colorDefinitions$macrocall$1$ebnf$1\", \"colorDefinitions$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"colorDefinitions$macrocall$1\", \"symbols\": [\"colorDefinitions$macrocall$2\", \"colorDefinitions$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"colorDefinitions\", \"symbols\": [\"colorDefinitions$macrocall$1\"], \"postprocess\": ([a]) => extractFirst(a)},\n    {\"name\": \"colorDefinitions$macrocall$5\", \"symbols\": [\"colorHex6\"]},\n    {\"name\": \"colorDefinitions$macrocall$6\", \"symbols\": [\"__\"]},\n    {\"name\": \"colorDefinitions$macrocall$4$ebnf$1\", \"symbols\": []},\n    {\"name\": \"colorDefinitions$macrocall$4$ebnf$1$subexpression$1\", \"symbols\": [\"colorDefinitions$macrocall$6\", \"colorDefinitions$macrocall$5\"]},\n    {\"name\": \"colorDefinitions$macrocall$4$ebnf$1\", \"symbols\": [\"colorDefinitions$macrocall$4$ebnf$1\", \"colorDefinitions$macrocall$4$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"colorDefinitions$macrocall$4\", \"symbols\": [\"colorDefinitions$macrocall$5\", \"colorDefinitions$macrocall$4$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"colorDefinitions$macrocall$8\", \"symbols\": [\"colorHex6\"]},\n    {\"name\": \"colorDefinitions$macrocall$9\", \"symbols\": [\"__\"]},\n    {\"name\": \"colorDefinitions$macrocall$7$ebnf$1\", \"symbols\": []},\n    {\"name\": \"colorDefinitions$macrocall$7$ebnf$1$subexpression$1\", \"symbols\": [\"colorDefinitions$macrocall$9\", \"colorDefinitions$macrocall$8\"]},\n    {\"name\": \"colorDefinitions$macrocall$7$ebnf$1\", \"symbols\": [\"colorDefinitions$macrocall$7$ebnf$1\", \"colorDefinitions$macrocall$7$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"colorDefinitions$macrocall$7\", \"symbols\": [\"colorDefinitions$macrocall$8\", \"colorDefinitions$macrocall$7$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"colorDefinitions\", \"symbols\": [\"colorDefinitions$macrocall$4\", \"colorDefinitions$macrocall$7\"], \"postprocess\": ([a, b]) => extractFirst(a.concat(b))},\n    {\"name\": \"spriteName\", \"symbols\": [\"ruleVariableName\"], \"postprocess\": id},\n    {\"name\": \"pixelRow$ebnf$1\", \"symbols\": [\"pixelDigit\"]},\n    {\"name\": \"pixelRow$ebnf$1\", \"symbols\": [\"pixelRow$ebnf$1\", \"pixelDigit\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"pixelRow\", \"symbols\": [\"_\", \"pixelRow$ebnf$1\", \"lineTerminator\"], \"postprocess\": toDebug('pixelRow', function ([_0, entries, _2]) { return {type: 'PIXEL_ROW', entries: entries} }) || function ([_0, entries, _2]) { return entries }},\n    {\"name\": \"pixelDigit\", \"symbols\": [\"digit\"], \"postprocess\": id},\n    {\"name\": \"pixelDigit\", \"symbols\": [{\"literal\":\".\"}], \"postprocess\": id},\n    {\"name\": \"legendShortcutChar\", \"symbols\": [/[^\\n ]/], \"postprocess\": id},\n    {\"name\": \"PixelRows$ebnf$1\", \"symbols\": [\"pixelRow\"]},\n    {\"name\": \"PixelRows$ebnf$1\", \"symbols\": [\"PixelRows$ebnf$1\", \"pixelRow\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"PixelRows\", \"symbols\": [\"pixelRow\", \"pixelRow\", \"pixelRow\", \"pixelRow\", \"PixelRows$ebnf$1\"], \"postprocess\": ([r1, r2, r3, r4, rest]) => [r1, r2, r3, r4].concat(rest)},\n    {\"name\": \"LegendTile\", \"symbols\": [\"LegendTileSimple\"], \"postprocess\": id},\n    {\"name\": \"LegendTile\", \"symbols\": [\"LegendTileAnd\"], \"postprocess\": id},\n    {\"name\": \"LegendTile\", \"symbols\": [\"LegendTileOr\"], \"postprocess\": id},\n    {\"name\": \"LegendTileSimple$ebnf$1\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"LegendTileSimple$ebnf$1\", \"symbols\": [\"LegendTileSimple$ebnf$1\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"LegendTileSimple\", \"symbols\": [\"_\", \"LegendVarNameDefn\", \"_\", {\"literal\":\"=\"}, \"_\", \"LookupLegendVarName\", \"LegendTileSimple$ebnf$1\"], \"postprocess\": toDebug('LegendTileSimple') || function([_0, name, _2, _3, _4, value, _6, _7], sourceOffset) { return {type: 'LEGEND_ITEM_SIMPLE', name, value, sourceOffset} }},\n    {\"name\": \"LegendTileAnd$macrocall$2\", \"symbols\": [\"LookupLegendVarName\"]},\n    {\"name\": \"LegendTileAnd$macrocall$3\", \"symbols\": [\"__\", \"t_AND\", \"__\"]},\n    {\"name\": \"LegendTileAnd$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"LegendTileAnd$macrocall$3\", \"LegendTileAnd$macrocall$2\"]},\n    {\"name\": \"LegendTileAnd$macrocall$1$ebnf$1\", \"symbols\": [\"LegendTileAnd$macrocall$1$ebnf$1$subexpression$1\"]},\n    {\"name\": \"LegendTileAnd$macrocall$1$ebnf$1$subexpression$2\", \"symbols\": [\"LegendTileAnd$macrocall$3\", \"LegendTileAnd$macrocall$2\"]},\n    {\"name\": \"LegendTileAnd$macrocall$1$ebnf$1\", \"symbols\": [\"LegendTileAnd$macrocall$1$ebnf$1\", \"LegendTileAnd$macrocall$1$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"LegendTileAnd$macrocall$1\", \"symbols\": [\"LegendTileAnd$macrocall$2\", \"LegendTileAnd$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('atLeast2ListOf') || nonemptyListOf},\n    {\"name\": \"LegendTileAnd$ebnf$1\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"LegendTileAnd$ebnf$1\", \"symbols\": [\"LegendTileAnd$ebnf$1\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"LegendTileAnd\", \"symbols\": [\"_\", \"LegendVarNameDefn\", \"_\", {\"literal\":\"=\"}, \"_\", \"LegendTileAnd$macrocall$1\", \"LegendTileAnd$ebnf$1\"], \"postprocess\": toDebug('LegendTileAnd') || function([_0, name, _2, _3, _4, values, _6, _7], sourceOffset) { return {type: 'LEGEND_ITEM_AND', name, values: extractFirst(values), sourceOffset} }},\n    {\"name\": \"LegendTileOr$macrocall$2\", \"symbols\": [\"LookupLegendVarName\"]},\n    {\"name\": \"LegendTileOr$macrocall$3\", \"symbols\": [\"__\", \"t_OR\", \"__\"]},\n    {\"name\": \"LegendTileOr$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"LegendTileOr$macrocall$3\", \"LegendTileOr$macrocall$2\"]},\n    {\"name\": \"LegendTileOr$macrocall$1$ebnf$1\", \"symbols\": [\"LegendTileOr$macrocall$1$ebnf$1$subexpression$1\"]},\n    {\"name\": \"LegendTileOr$macrocall$1$ebnf$1$subexpression$2\", \"symbols\": [\"LegendTileOr$macrocall$3\", \"LegendTileOr$macrocall$2\"]},\n    {\"name\": \"LegendTileOr$macrocall$1$ebnf$1\", \"symbols\": [\"LegendTileOr$macrocall$1$ebnf$1\", \"LegendTileOr$macrocall$1$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"LegendTileOr$macrocall$1\", \"symbols\": [\"LegendTileOr$macrocall$2\", \"LegendTileOr$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('atLeast2ListOf') || nonemptyListOf},\n    {\"name\": \"LegendTileOr$ebnf$1\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"LegendTileOr$ebnf$1\", \"symbols\": [\"LegendTileOr$ebnf$1\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"LegendTileOr\", \"symbols\": [\"_\", \"LegendVarNameDefn\", \"_\", {\"literal\":\"=\"}, \"_\", \"LegendTileOr$macrocall$1\", \"LegendTileOr$ebnf$1\"], \"postprocess\": toDebug('LegendTileOr')  || function([_0, name, _2, _3, _4, values, _6, _7], sourceOffset) { return {type: 'LEGEND_ITEM_OR', name, values: extractFirst(values), sourceOffset} }},\n    {\"name\": \"LegendVarNameDefn\", \"symbols\": [\"word\"], \"postprocess\": toDebug('LegendVarNameDefn') || id},\n    {\"name\": \"LookupLegendVarName\", \"symbols\": [\"LegendVarNameDefn\"], \"postprocess\": toDebug('LookupLegendVarName') || id},\n    {\"name\": \"SoundItem$ebnf$1\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"SoundItem$ebnf$1\", \"symbols\": [\"SoundItem$ebnf$1\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"SoundItem\", \"symbols\": [\"_\", \"SoundItemInner\", \"SoundItem$ebnf$1\"], \"postprocess\": ([_0, sound, _2]) => sound},\n    {\"name\": \"SoundItemInner\", \"symbols\": [\"SoundItemEnum\"], \"postprocess\": id},\n    {\"name\": \"SoundItemInner\", \"symbols\": [\"SoundItemSfx\"], \"postprocess\": id},\n    {\"name\": \"SoundItemInner\", \"symbols\": [\"SoundItemMoveDirection\"], \"postprocess\": id},\n    {\"name\": \"SoundItemInner\", \"symbols\": [\"SoundItemMoveSimple\"], \"postprocess\": id},\n    {\"name\": \"SoundItemInner\", \"symbols\": [\"SoundItemNormal\"], \"postprocess\": id},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_RESTART\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_UNDO\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_TITLESCREEN\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_STARTGAME\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_STARTLEVEL\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_ENDLEVEL\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_ENDGAME\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_SHOWMESSAGE\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemSimpleOptions\", \"symbols\": [\"t_CLOSEMESSAGE\"], \"postprocess\": upperId},\n    {\"name\": \"SoundItemEnum\", \"symbols\": [\"soundItemSimpleOptions\", \"__\", \"integer\"], \"postprocess\": ([when, _1, soundCode], sourceOffset) => { return {type: 'SOUND_WHEN', when, soundCode, sourceOffset} }},\n    {\"name\": \"SoundItemSfx\", \"symbols\": [\"t_SFX\", \"__\", \"integer\"], \"postprocess\": ([sfx, _1, soundCode], sourceOffset) => { return {type: 'SOUND_SFX', sfx, soundCode, sourceOffset} }},\n    {\"name\": \"SoundItemMoveDirection\", \"symbols\": [\"lookupRuleVariableName\", \"__\", \"t_MOVE\", \"__\", \"soundItemActionMoveArg\", \"__\", \"integer\"], \"postprocess\": ([sprite, _1, _2, _3, direction, _5, soundCode], sourceOffset) => { return {type: 'SOUND_SPRITE_DIRECTION', sprite, direction, soundCode, sourceOffset} }},\n    {\"name\": \"SoundItemMoveSimple\", \"symbols\": [\"lookupRuleVariableName\", \"__\", \"t_MOVE\", \"__\", \"integer\"], \"postprocess\": ([sprite, _1, _2, _3, soundCode], sourceOffset) => { return {type: 'SOUND_SPRITE_MOVE', sprite, soundCode, sourceOffset} }},\n    {\"name\": \"SoundItemNormal\", \"symbols\": [\"lookupRuleVariableName\", \"__\", \"SoundItemAction\", \"__\", \"integer\"], \"postprocess\": ([sprite, _1, eventEnum, _3, soundCode], sourceOffset) => { return {type: 'SOUND_SPRITE_EVENT', sprite, eventEnum, soundCode, sourceOffset} }},\n    {\"name\": \"SoundItemAction\", \"symbols\": [\"t_CREATE\"], \"postprocess\": upperId},\n    {\"name\": \"SoundItemAction\", \"symbols\": [\"t_DESTROY\"], \"postprocess\": upperId},\n    {\"name\": \"SoundItemAction\", \"symbols\": [\"t_CANTMOVE\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemActionMoveArg\", \"symbols\": [\"t_UP\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemActionMoveArg\", \"symbols\": [\"t_DOWN\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemActionMoveArg\", \"symbols\": [\"t_LEFT\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemActionMoveArg\", \"symbols\": [\"t_RIGHT\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemActionMoveArg\", \"symbols\": [\"t_HORIZONTAL\"], \"postprocess\": upperId},\n    {\"name\": \"soundItemActionMoveArg\", \"symbols\": [\"t_VERTICAL\"], \"postprocess\": upperId},\n    {\"name\": \"CollisionLayerItem$macrocall$2\", \"symbols\": [\"lookupCollisionVariableName\"]},\n    {\"name\": \"CollisionLayerItem$macrocall$3$subexpression$1\", \"symbols\": [\"_\", {\"literal\":\",\"}, \"_\"]},\n    {\"name\": \"CollisionLayerItem$macrocall$3$subexpression$1\", \"symbols\": [\"__\"]},\n    {\"name\": \"CollisionLayerItem$macrocall$3\", \"symbols\": [\"CollisionLayerItem$macrocall$3$subexpression$1\"]},\n    {\"name\": \"CollisionLayerItem$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"CollisionLayerItem$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"CollisionLayerItem$macrocall$3\", \"CollisionLayerItem$macrocall$2\"]},\n    {\"name\": \"CollisionLayerItem$macrocall$1$ebnf$1\", \"symbols\": [\"CollisionLayerItem$macrocall$1$ebnf$1\", \"CollisionLayerItem$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"CollisionLayerItem$macrocall$1\", \"symbols\": [\"CollisionLayerItem$macrocall$2\", \"CollisionLayerItem$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"CollisionLayerItem$ebnf$1\", \"symbols\": [{\"literal\":\",\"}], \"postprocess\": id},\n    {\"name\": \"CollisionLayerItem$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"CollisionLayerItem$ebnf$2\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"CollisionLayerItem$ebnf$2\", \"symbols\": [\"CollisionLayerItem$ebnf$2\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"CollisionLayerItem\", \"symbols\": [\"_\", \"CollisionLayerItem$macrocall$1\", \"CollisionLayerItem$ebnf$1\", \"CollisionLayerItem$ebnf$2\"], \"postprocess\": toDebug('CollisionLayerItem') || function ([_0, spriteNames, _2], sourceOffset) { return {type: 'COLLISION_LAYER', tiles: extractFirst(spriteNames), sourceOffset} }},\n    {\"name\": \"RuleItem\", \"symbols\": [\"RuleLoop\"], \"postprocess\": id},\n    {\"name\": \"RuleItem\", \"symbols\": [\"RuleGroup\"], \"postprocess\": id},\n    {\"name\": \"RuleItem\", \"symbols\": [\"Rule\"], \"postprocess\": id},\n    {\"name\": \"Rule\", \"symbols\": [\"RuleWithoutMessage\"], \"postprocess\": id},\n    {\"name\": \"Rule\", \"symbols\": [\"RuleWithMessage\"], \"postprocess\": id},\n    {\"name\": \"RuleWithoutMessage$macrocall$2\", \"symbols\": [\"ConditionBracket\"]},\n    {\"name\": \"RuleWithoutMessage$macrocall$3$ebnf$1$subexpression$1\", \"symbols\": [\"RuleModifier\", \"_\"]},\n    {\"name\": \"RuleWithoutMessage$macrocall$3$ebnf$1\", \"symbols\": [\"RuleWithoutMessage$macrocall$3$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"RuleWithoutMessage$macrocall$3$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"RuleWithoutMessage$macrocall$3\", \"symbols\": [\"_\", \"RuleWithoutMessage$macrocall$3$ebnf$1\"]},\n    {\"name\": \"RuleWithoutMessage$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"RuleWithoutMessage$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"RuleWithoutMessage$macrocall$3\", \"RuleWithoutMessage$macrocall$2\"]},\n    {\"name\": \"RuleWithoutMessage$macrocall$1$ebnf$1\", \"symbols\": [\"RuleWithoutMessage$macrocall$1$ebnf$1\", \"RuleWithoutMessage$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithoutMessage$macrocall$1\", \"symbols\": [\"RuleWithoutMessage$macrocall$2\", \"RuleWithoutMessage$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"RuleWithoutMessage$string$1\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\">\"}], \"postprocess\": (d) => d.join('')},\n    {\"name\": \"RuleWithoutMessage$ebnf$1\", \"symbols\": []},\n    {\"name\": \"RuleWithoutMessage$ebnf$1$subexpression$1\", \"symbols\": [\"ActionBracket\"]},\n    {\"name\": \"RuleWithoutMessage$ebnf$1\", \"symbols\": [\"RuleWithoutMessage$ebnf$1\", \"RuleWithoutMessage$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithoutMessage$ebnf$2\", \"symbols\": []},\n    {\"name\": \"RuleWithoutMessage$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"RuleCommand\"]},\n    {\"name\": \"RuleWithoutMessage$ebnf$2\", \"symbols\": [\"RuleWithoutMessage$ebnf$2\", \"RuleWithoutMessage$ebnf$2$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithoutMessage$ebnf$3\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"RuleWithoutMessage$ebnf$3\", \"symbols\": [\"RuleWithoutMessage$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithoutMessage\", \"symbols\": [\"_\", \"LeftModifiers\", \"RuleWithoutMessage$macrocall$1\", \"_\", \"RuleWithoutMessage$string$1\", \"RuleWithoutMessage$ebnf$1\", \"RuleWithoutMessage$ebnf$2\", \"RuleWithoutMessage$ebnf$3\"], \"postprocess\": toDebug('RuleWithoutMessage') || function([_0, modifiers, conditionBrackets, _2, _3, actionBrackets, commands, _6], sourceOffset)                 { return {type: 'RULE', modifiers, conditions: extractFirst(conditionBrackets), actions: extractFirst(actionBrackets), commands: extractSecond(commands), sourceOffset} }},\n    {\"name\": \"RuleWithMessage$macrocall$2\", \"symbols\": [\"ConditionBracket\"]},\n    {\"name\": \"RuleWithMessage$macrocall$3$ebnf$1$subexpression$1\", \"symbols\": [\"RuleModifier\", \"_\"]},\n    {\"name\": \"RuleWithMessage$macrocall$3$ebnf$1\", \"symbols\": [\"RuleWithMessage$macrocall$3$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"RuleWithMessage$macrocall$3$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"RuleWithMessage$macrocall$3\", \"symbols\": [\"_\", \"RuleWithMessage$macrocall$3$ebnf$1\"]},\n    {\"name\": \"RuleWithMessage$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"RuleWithMessage$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"RuleWithMessage$macrocall$3\", \"RuleWithMessage$macrocall$2\"]},\n    {\"name\": \"RuleWithMessage$macrocall$1$ebnf$1\", \"symbols\": [\"RuleWithMessage$macrocall$1$ebnf$1\", \"RuleWithMessage$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithMessage$macrocall$1\", \"symbols\": [\"RuleWithMessage$macrocall$2\", \"RuleWithMessage$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"RuleWithMessage$string$1\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\">\"}], \"postprocess\": (d) => d.join('')},\n    {\"name\": \"RuleWithMessage$ebnf$1\", \"symbols\": []},\n    {\"name\": \"RuleWithMessage$ebnf$1$subexpression$1\", \"symbols\": [\"ActionBracket\"]},\n    {\"name\": \"RuleWithMessage$ebnf$1\", \"symbols\": [\"RuleWithMessage$ebnf$1\", \"RuleWithMessage$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithMessage$ebnf$2\", \"symbols\": []},\n    {\"name\": \"RuleWithMessage$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"RuleCommand\"]},\n    {\"name\": \"RuleWithMessage$ebnf$2\", \"symbols\": [\"RuleWithMessage$ebnf$2\", \"RuleWithMessage$ebnf$2$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithMessage$ebnf$3\", \"symbols\": []},\n    {\"name\": \"RuleWithMessage$ebnf$3\", \"symbols\": [\"RuleWithMessage$ebnf$3\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleWithMessage\", \"symbols\": [\"_\", \"LeftModifiers\", \"RuleWithMessage$macrocall$1\", \"_\", \"RuleWithMessage$string$1\", \"RuleWithMessage$ebnf$1\", \"RuleWithMessage$ebnf$2\", \"_\", \"MessageCommand\", \"RuleWithMessage$ebnf$3\"], \"postprocess\": toDebug('RuleWithoutMessage') || function([_0, modifiers, conditionBrackets, _2, _3, actionBrackets, commands, _6, message, _7], sourceOffset)    { return {type: 'RULE', modifiers, conditions: extractFirst(conditionBrackets), actions: extractFirst(actionBrackets), commands: extractSecond(commands), message, sourceOffset} }},\n    {\"name\": \"ConditionBracket\", \"symbols\": [\"NormalRuleBracket\"], \"postprocess\": ([{neighbors, againHack, debugFlag}], sourceOffset) => { return {type:'BRACKET', neighbors, againHack, debugFlag, sourceOffset} }},\n    {\"name\": \"ConditionBracket\", \"symbols\": [\"EllipsisRuleBracket\"], \"postprocess\": ([{beforeNeighbors, afterNeighbors, debugFlag}], sourceOffset) => { return {type:'ELLIPSIS_BRACKET', beforeNeighbors, afterNeighbors, debugFlag, sourceOffset} }},\n    {\"name\": \"ActionBracket$ebnf$1\", \"symbols\": []},\n    {\"name\": \"ActionBracket$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"RuleModifier\"]},\n    {\"name\": \"ActionBracket$ebnf$1\", \"symbols\": [\"ActionBracket$ebnf$1\", \"ActionBracket$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"ActionBracket\", \"symbols\": [\"ActionBracket$ebnf$1\", \"_\", \"NormalRuleBracket\"], \"postprocess\": ([modifiers, _1, {neighbors, againHack, debugFlag}], sourceOffset) => { return {type:'BRACKET', neighbors, againHack, debugFlag, sourceOffset} }},\n    {\"name\": \"ActionBracket$ebnf$2\", \"symbols\": []},\n    {\"name\": \"ActionBracket$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"RuleModifier\"]},\n    {\"name\": \"ActionBracket$ebnf$2\", \"symbols\": [\"ActionBracket$ebnf$2\", \"ActionBracket$ebnf$2$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"ActionBracket\", \"symbols\": [\"ActionBracket$ebnf$2\", \"_\", \"EllipsisRuleBracket\"], \"postprocess\": ([modifiers, _1, {beforeNeighbors, afterNeighbors, debugFlag}], sourceOffset) => { return {type:'ELLIPSIS_BRACKET', beforeNeighbors, afterNeighbors, debugFlag, sourceOffset} }},\n    {\"name\": \"LeftModifiers$macrocall$2\", \"symbols\": [\"RuleModifierLeft\"]},\n    {\"name\": \"LeftModifiers$macrocall$3\", \"symbols\": [\"__\"]},\n    {\"name\": \"LeftModifiers$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"LeftModifiers$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"LeftModifiers$macrocall$3\", \"LeftModifiers$macrocall$2\"]},\n    {\"name\": \"LeftModifiers$macrocall$1$ebnf$1\", \"symbols\": [\"LeftModifiers$macrocall$1$ebnf$1\", \"LeftModifiers$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"LeftModifiers$macrocall$1\", \"symbols\": [\"LeftModifiers$macrocall$2\", \"LeftModifiers$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"LeftModifiers\", \"symbols\": [\"LeftModifiers$macrocall$1\", \"_\"], \"postprocess\": ([a]) => extractFirst(a)},\n    {\"name\": \"LeftModifiers\", \"symbols\": [], \"postprocess\": () => [] /* No modifiers */},\n    {\"name\": \"RuleBracket\", \"symbols\": [\"EllipsisRuleBracket\"], \"postprocess\": id},\n    {\"name\": \"RuleBracket\", \"symbols\": [\"NormalRuleBracket\"], \"postprocess\": id},\n    {\"name\": \"NormalRuleBracket$macrocall$2\", \"symbols\": [\"RuleBracketNeighbor\"]},\n    {\"name\": \"NormalRuleBracket$macrocall$3\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"NormalRuleBracket$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"NormalRuleBracket$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"NormalRuleBracket$macrocall$3\", \"NormalRuleBracket$macrocall$2\"]},\n    {\"name\": \"NormalRuleBracket$macrocall$1$ebnf$1\", \"symbols\": [\"NormalRuleBracket$macrocall$1$ebnf$1\", \"NormalRuleBracket$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"NormalRuleBracket$macrocall$1\", \"symbols\": [\"NormalRuleBracket$macrocall$2\", \"NormalRuleBracket$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"NormalRuleBracket$ebnf$1$subexpression$1\", \"symbols\": [\"t_AGAIN\", \"_\"]},\n    {\"name\": \"NormalRuleBracket$ebnf$1\", \"symbols\": [\"NormalRuleBracket$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NormalRuleBracket$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"NormalRuleBracket$ebnf$2$subexpression$1\", \"symbols\": [\"_\", \"t_DEBUGGER\"]},\n    {\"name\": \"NormalRuleBracket$ebnf$2\", \"symbols\": [\"NormalRuleBracket$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"NormalRuleBracket$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"NormalRuleBracket\", \"symbols\": [{\"literal\":\"[\"}, \"NormalRuleBracket$macrocall$1\", \"NormalRuleBracket$ebnf$1\", {\"literal\":\"]\"}, \"NormalRuleBracket$ebnf$2\"], \"postprocess\": toDebug('NormalRuleBracket') || function([_0, neighbors, againHack, _3, debugFlag], sourceOffset) { return {type: '_INNER_BRACKET', neighbors: extractFirst(neighbors), againHack: againHack ? true : false, debugFlag: debugFlag ? debugFlag[1] : null, sourceOffset} }},\n    {\"name\": \"EllipsisRuleBracket$macrocall$2\", \"symbols\": [\"RuleBracketNeighbor\"]},\n    {\"name\": \"EllipsisRuleBracket$macrocall$3\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"EllipsisRuleBracket$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"EllipsisRuleBracket$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"EllipsisRuleBracket$macrocall$3\", \"EllipsisRuleBracket$macrocall$2\"]},\n    {\"name\": \"EllipsisRuleBracket$macrocall$1$ebnf$1\", \"symbols\": [\"EllipsisRuleBracket$macrocall$1$ebnf$1\", \"EllipsisRuleBracket$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"EllipsisRuleBracket$macrocall$1\", \"symbols\": [\"EllipsisRuleBracket$macrocall$2\", \"EllipsisRuleBracket$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"EllipsisRuleBracket$macrocall$5\", \"symbols\": [\"RuleBracketNeighbor\"]},\n    {\"name\": \"EllipsisRuleBracket$macrocall$6\", \"symbols\": [{\"literal\":\"|\"}]},\n    {\"name\": \"EllipsisRuleBracket$macrocall$4$ebnf$1\", \"symbols\": []},\n    {\"name\": \"EllipsisRuleBracket$macrocall$4$ebnf$1$subexpression$1\", \"symbols\": [\"EllipsisRuleBracket$macrocall$6\", \"EllipsisRuleBracket$macrocall$5\"]},\n    {\"name\": \"EllipsisRuleBracket$macrocall$4$ebnf$1\", \"symbols\": [\"EllipsisRuleBracket$macrocall$4$ebnf$1\", \"EllipsisRuleBracket$macrocall$4$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"EllipsisRuleBracket$macrocall$4\", \"symbols\": [\"EllipsisRuleBracket$macrocall$5\", \"EllipsisRuleBracket$macrocall$4$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"EllipsisRuleBracket$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"t_DEBUGGER\"]},\n    {\"name\": \"EllipsisRuleBracket$ebnf$1\", \"symbols\": [\"EllipsisRuleBracket$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"EllipsisRuleBracket$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"EllipsisRuleBracket\", \"symbols\": [{\"literal\":\"[\"}, \"EllipsisRuleBracket$macrocall$1\", {\"literal\":\"|\"}, \"_\", \"t_ELLIPSIS\", \"_\", {\"literal\":\"|\"}, \"EllipsisRuleBracket$macrocall$4\", {\"literal\":\"]\"}, \"EllipsisRuleBracket$ebnf$1\"], \"postprocess\": toDebug('EllipsisRuleBracket') || function([_0, beforeNeighbors, _2, _3, _4, _5, _6, afterNeighbors, _8, debugFlag], sourceOffset) { return {type: '_INNER_ELLIPSIS_BRACKET', beforeNeighbors: extractFirst(beforeNeighbors), afterNeighbors: extractFirst(afterNeighbors), debugFlag: debugFlag ? debugFlag[1] : null, sourceOffset} }},\n    {\"name\": \"RuleBracketNeighbor\", \"symbols\": [\"RuleBracketNoEllipsisNeighbor\"], \"postprocess\": id},\n    {\"name\": \"RuleBracketNeighbor\", \"symbols\": [\"RuleBracketEmptyNeighbor\"], \"postprocess\": id},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$macrocall$2\", \"symbols\": [\"TileWithModifier\"]},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$macrocall$3\", \"symbols\": [\"__\"]},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [\"RuleBracketNoEllipsisNeighbor$macrocall$3\", \"RuleBracketNoEllipsisNeighbor$macrocall$2\"]},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$macrocall$1$ebnf$1\", \"symbols\": [\"RuleBracketNoEllipsisNeighbor$macrocall$1$ebnf$1\", \"RuleBracketNoEllipsisNeighbor$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$macrocall$1\", \"symbols\": [\"RuleBracketNoEllipsisNeighbor$macrocall$2\", \"RuleBracketNoEllipsisNeighbor$macrocall$1$ebnf$1\"], \"postprocess\": toDebug('nonemptyListOf') || nonemptyListOf},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"t_DEBUGGER\"]},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$ebnf$1\", \"symbols\": [\"RuleBracketNoEllipsisNeighbor$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"RuleBracketNoEllipsisNeighbor\", \"symbols\": [\"_\", \"RuleBracketNoEllipsisNeighbor$macrocall$1\", \"RuleBracketNoEllipsisNeighbor$ebnf$1\", \"_\"], \"postprocess\": toDebug('RuleBracketNoEllipsisNeighbor') || function([_0, tilesWithModifier, debugFlag, _3], sourceOffset) { return {type: 'NEIGHBOR', tilesWithModifier: extractFirst(tilesWithModifier), debugFlag: debugFlag ? debugFlag[1] : null, sourceOffset} }},\n    {\"name\": \"RuleBracketEmptyNeighbor\", \"symbols\": [\"_\"], \"postprocess\": toDebug('RuleBracketEmptyNeighbor') || function([_0], sourceOffset) { return {type: 'NEIGHBOR', tilesWithModifier: [], sourceOffset} }},\n    {\"name\": \"TileWithModifier$ebnf$1$subexpression$1\", \"symbols\": [\"tileModifier\", \"__\"]},\n    {\"name\": \"TileWithModifier$ebnf$1\", \"symbols\": [\"TileWithModifier$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"TileWithModifier$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"TileWithModifier\", \"symbols\": [\"TileWithModifier$ebnf$1\", \"lookupRuleVariableName\"], \"postprocess\": toDebug('TileWithModifier') || function([modifier, tile], sourceOffset) { return {type: 'TILE_WITH_MODIFIER', modifier: modifier ? modifier[0] : null, tile, sourceOffset} }},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_NO\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_LEFT\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_RIGHT\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_UP\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_DOWN\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_RANDOMDIR\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_RANDOM\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_STATIONARY\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_MOVING\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_ACTION\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_VERTICAL\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_HORIZONTAL\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_PERPENDICULAR\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_PARALLEL\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_ORTHOGONAL\"], \"postprocess\": upperId},\n    {\"name\": \"tileModifier\", \"symbols\": [\"t_ARROW_ANY\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_RANDOM\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_UP\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_DOWN\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_LEFT\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_RIGHT\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_VERTICAL\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_HORIZONTAL\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifier\", \"symbols\": [\"t_ORTHOGONAL\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifierLeft\", \"symbols\": [\"RuleModifier\"], \"postprocess\": id},\n    {\"name\": \"RuleModifierLeft\", \"symbols\": [\"t_LATE\"], \"postprocess\": upperId},\n    {\"name\": \"RuleModifierLeft\", \"symbols\": [\"t_RIGID\"], \"postprocess\": upperId},\n    {\"name\": \"RuleCommand\", \"symbols\": [\"t_AGAIN\"], \"postprocess\": (_0, sourceOffset) => { return {type: 'COMMAND_AGAIN', sourceOffset} }},\n    {\"name\": \"RuleCommand\", \"symbols\": [\"t_CANCEL\"], \"postprocess\": (_0, sourceOffset) => { return {type: 'COMMAND_CANCEL', sourceOffset} }},\n    {\"name\": \"RuleCommand\", \"symbols\": [\"t_CHECKPOINT\"], \"postprocess\": (_0, sourceOffset) => { return {type: 'COMMAND_CHECKPOINT', sourceOffset} }},\n    {\"name\": \"RuleCommand\", \"symbols\": [\"t_RESTART\"], \"postprocess\": (_0, sourceOffset) => { return {type: 'COMMAND_RESTART', sourceOffset} }},\n    {\"name\": \"RuleCommand\", \"symbols\": [\"t_WIN\"], \"postprocess\": (_0, sourceOffset) => { return {type: 'COMMAND_WIN', sourceOffset} }},\n    {\"name\": \"RuleCommand\", \"symbols\": [\"t_SFX\"], \"postprocess\": ([sfx], sourceOffset) => { return {type: 'COMMAND_SFX', sfx, sourceOffset} }},\n    {\"name\": \"MessageCommand\", \"symbols\": [\"t_MESSAGE\", \"messageLine\"], \"postprocess\": ([_1, message], sourceOffset) => { return {type:'COMMAND_MESSAGE', message, sourceOffset} }},\n    {\"name\": \"RuleLoop$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"t_DEBUGGER\"]},\n    {\"name\": \"RuleLoop$ebnf$1\", \"symbols\": [\"RuleLoop$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"RuleLoop$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"RuleLoop$ebnf$2\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"RuleLoop$ebnf$2\", \"symbols\": [\"RuleLoop$ebnf$2\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleLoop$ebnf$3$subexpression$1\", \"symbols\": [\"RuleItem\"]},\n    {\"name\": \"RuleLoop$ebnf$3\", \"symbols\": [\"RuleLoop$ebnf$3$subexpression$1\"]},\n    {\"name\": \"RuleLoop$ebnf$3$subexpression$2\", \"symbols\": [\"RuleItem\"]},\n    {\"name\": \"RuleLoop$ebnf$3\", \"symbols\": [\"RuleLoop$ebnf$3\", \"RuleLoop$ebnf$3$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleLoop$ebnf$4\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"RuleLoop$ebnf$4\", \"symbols\": [\"RuleLoop$ebnf$4\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleLoop\", \"symbols\": [\"RuleLoop$ebnf$1\", \"_\", \"t_STARTLOOP\", \"RuleLoop$ebnf$2\", \"RuleLoop$ebnf$3\", \"_\", \"t_ENDLOOP\", \"RuleLoop$ebnf$4\"], \"postprocess\": ([_0, _1, _2, _3, rules, _4, _5, _6]) => { return {type:'RULE_LOOP', rules: extractFirst(rules)} }},\n    {\"name\": \"RuleGroup$ebnf$1$subexpression$1\", \"symbols\": [\"_\", \"t_GROUP_RULE_PLUS\", \"Rule\"]},\n    {\"name\": \"RuleGroup$ebnf$1\", \"symbols\": [\"RuleGroup$ebnf$1$subexpression$1\"]},\n    {\"name\": \"RuleGroup$ebnf$1$subexpression$2\", \"symbols\": [\"_\", \"t_GROUP_RULE_PLUS\", \"Rule\"]},\n    {\"name\": \"RuleGroup$ebnf$1\", \"symbols\": [\"RuleGroup$ebnf$1\", \"RuleGroup$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"RuleGroup\", \"symbols\": [\"Rule\", \"RuleGroup$ebnf$1\"], \"postprocess\": ([firstRule, otherRules], sourceOffset) => { return {type:'RULE_GROUP', rules: [firstRule].concat(extractThird(otherRules)), sourceOffset} }},\n    {\"name\": \"WinConditionItem$ebnf$1\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"WinConditionItem$ebnf$1\", \"symbols\": [\"WinConditionItem$ebnf$1\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"WinConditionItem\", \"symbols\": [\"_\", \"winConditionItemPrefix\", \"__\", \"lookupRuleVariableName\", \"WinConditionItem$ebnf$1\"], \"postprocess\": toDebug('WinConditionItem') || function([_0, qualifier, _1, sprite, _2], sourceOffset) { return {type: 'WINCONDITION_SIMPLE', qualifier, sprite, sourceOffset} }},\n    {\"name\": \"WinConditionItem$ebnf$2\", \"symbols\": [\"lineTerminator\"]},\n    {\"name\": \"WinConditionItem$ebnf$2\", \"symbols\": [\"WinConditionItem$ebnf$2\", \"lineTerminator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"WinConditionItem\", \"symbols\": [\"_\", \"winConditionItemPrefix\", \"__\", \"lookupRuleVariableName\", \"__\", \"t_ON\", \"__\", \"lookupRuleVariableName\", \"WinConditionItem$ebnf$2\"], \"postprocess\": toDebug('WinConditionItem') || function([_0, qualifier, _1, sprite, _2, _3, _4, onSprite, _5], sourceOffset) { return {type: 'WINCONDITION_ON', qualifier, sprite, onSprite, sourceOffset} }},\n    {\"name\": \"winConditionItemPrefix\", \"symbols\": [\"t_NO\"], \"postprocess\": id},\n    {\"name\": \"winConditionItemPrefix\", \"symbols\": [\"t_ALL\"], \"postprocess\": id},\n    {\"name\": \"winConditionItemPrefix\", \"symbols\": [\"t_ANY\"], \"postprocess\": id},\n    {\"name\": \"winConditionItemPrefix\", \"symbols\": [\"t_SOME\"], \"postprocess\": id},\n    {\"name\": \"LevelItem\", \"symbols\": [\"GameMessageLevel\"], \"postprocess\": id},\n    {\"name\": \"LevelItem\", \"symbols\": [\"levelMapRow\"], \"postprocess\": id},\n    {\"name\": \"LevelItem\", \"symbols\": [\"SeparatorLine\"], \"postprocess\": id},\n    {\"name\": \"GameMessageLevel\", \"symbols\": [\"_\", \"t_MESSAGE\", \"messageLine\"], \"postprocess\": ([_0, _1, message], sourceOffset) => { return {type: 'LEVEL_MESSAGE', message, sourceOffset} }},\n    {\"name\": \"messageLine$ebnf$1\", \"symbols\": []},\n    {\"name\": \"messageLine$ebnf$1\", \"symbols\": [\"messageLine$ebnf$1\", /[^\\n]/], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"messageLine\", \"symbols\": [\"messageLine$ebnf$1\", /[\\n]/], \"postprocess\": toDebug('messageLine') || function([message, _2]) { return message.join('').trim() }},\n    {\"name\": \"levelMapRow$ebnf$1\", \"symbols\": [/[^\\n \\t\\(]/]},\n    {\"name\": \"levelMapRow$ebnf$1\", \"symbols\": [\"levelMapRow$ebnf$1\", /[^\\n \\t\\(]/], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"levelMapRow\", \"symbols\": [\"_\", \"levelMapRow$ebnf$1\", \"lineTerminator\"], \"postprocess\":  ([_0, cols]: string[][], sourceOffset, reject) => {\n          const str = cols.join('')\n          if (str.toUpperCase().startsWith('MESSAGE')) {\n            return reject\n          } else {\n            return {type: 'LEVEL_ROW', rowData: cols.map(([char]) => char[0]), sourceOffset}\n          }\n        }\n        },\n    {\"name\": \"SeparatorLine\", \"symbols\": [\"lineTerminator\"], \"postprocess\": (_0, sourceOffset) => { return {type:'LEVEL_SEPARATOR', sourceOffset} }}\n];\n\nexport var ParserStart: string = \"main\";\n","import { GameSound } from './models/sound'\nimport { closeSounds, playSound as playSoundCode } from './sound/sfxr'\n\nasync function playSound(sound: GameSound) {\n    return playSoundCode(sound.soundCode)\n}\n\nexport { playSound, closeSounds }\n","const {RNG} = require('./rng')\nconst {MakeRiff} = require('./riffwave')\nvar SOUND_VOL = 0.25;\nvar SAMPLE_RATE = 5512;\nvar BIT_DEPTH = 8;\n\nvar SQUARE = 0;\nvar SAWTOOTH = 1;\nvar SINE = 2;\nvar NOISE = 3;\nvar TRIANGLE = 4;\nvar BREAKER = 5;\n\nvar SHAPES = [\n  'square', 'sawtooth', 'sine', 'noise', 'triangle', 'breaker'\n];\n\nvar AUDIO_CONTEXT;\n\nfunction checkAudioContextExists(){\n  try{\n    if (AUDIO_CONTEXT==null){\n      if (typeof AudioContext != 'undefined') {\n        AUDIO_CONTEXT = new AudioContext();\n      } else if (typeof webkitAudioContext != 'undefined') {\n        AUDIO_CONTEXT = new webkitAudioContext();\n      }\n    }\n  }\n  catch (ex){\n    window.console.log(ex)\n  }\n}\n\ncheckAudioContextExists();\n\n// Playback volume\nvar masterVolume = 1.0;\n\n// Sound generation parameters are on [0,1] unless noted SIGNED, & thus [-1,1]\nfunction Params() {\n  var result={};\n  // Wave shape\n  result.wave_type = SQUARE;\n\n  // Envelope\n  result.p_env_attack = 0.0;   // Attack time\n  result.p_env_sustain = 0.3;  // Sustain time\n  result.p_env_punch = 0.0;    // Sustain punch\n  result.p_env_decay = 0.4;    // Decay time\n\n  // Tone\n  result.p_base_freq = 0.3;    // Start frequency\n  result.p_freq_limit = 0.0;   // Min frequency cutoff\n  result.p_freq_ramp = 0.0;    // Slide (SIGNED)\n  result.p_freq_dramp = 0.0;   // Delta slide (SIGNED)\n  // Vibrato\n  result.p_vib_strength = 0.0; // Vibrato depth\n  result.p_vib_speed = 0.0;    // Vibrato speed\n\n  // Tonal change\n  result.p_arp_mod = 0.0;      // Change amount (SIGNED)\n  result.p_arp_speed = 0.0;    // Change speed\n\n  // Duty (wat's that?)\n  result.p_duty = 0.0;         // Square duty\n  result.p_duty_ramp = 0.0;    // Duty sweep (SIGNED)\n\n  // Repeat\n  result.p_repeat_speed = 0.0; // Repeat speed\n\n  // Phaser\n  result.p_pha_offset = 0.0;   // Phaser offset (SIGNED)\n  result.p_pha_ramp = 0.0;     // Phaser sweep (SIGNED)\n\n  // Low-pass filter\n  result.p_lpf_freq = 1.0;     // Low-pass filter cutoff\n  result.p_lpf_ramp = 0.0;     // Low-pass filter cutoff sweep (SIGNED)\n  result.p_lpf_resonance = 0.0;// Low-pass filter resonance\n  // High-pass filter\n  result.p_hpf_freq = 0.0;     // High-pass filter cutoff\n  result.p_hpf_ramp = 0.0;     // High-pass filter cutoff sweep (SIGNED)\n\n  // Sample parameters\n  result.sound_vol = 0.5;\n  result.sample_rate = 44100;\n  result.bit_depth = 8;\n  return result;\n}\n\nvar rng;\nvar seeded = false;\nfunction frnd(range) {\n  if (seeded) {\n    return rng.uniform() * range;\n  } else {\n    return Math.random() * range;\n  }\n}\n\n\nfunction rnd(max) {\n  if (seeded) {\n  return Math.floor(rng.uniform() * (max + 1));\n  } else {\n    return Math.floor(Math.random() * (max + 1));\n  }\n}\n\n\npickupCoin = function() {\n  var result=Params();\n  result.wave_type = Math.floor(frnd(SHAPES.length));\n  if (result.wave_type === 3) {\n    result.wave_type = 0;\n  }\n  result.p_base_freq = 0.4 + frnd(0.5);\n  result.p_env_attack = 0.0;\n  result.p_env_sustain = frnd(0.1);\n  result.p_env_decay = 0.1 + frnd(0.4);\n  result.p_env_punch = 0.3 + frnd(0.3);\n  if (rnd(1)) {\n    result.p_arp_speed = 0.5 + frnd(0.2);\n    var num = (frnd(7) | 1) + 1;\n    var den = num + (frnd(7) | 1) + 2;\n    result.p_arp_mod = (+num) / (+den); //0.2 + frnd(0.4);\n  }\n  return result;\n};\n\n\nlaserShoot = function() {\n  var result=Params();\n  result.wave_type = rnd(2);\n  if (result.wave_type === SINE && rnd(1))\n    result.wave_type = rnd(1);\n  result.wave_type = Math.floor(frnd(SHAPES.length));\n\n  if (result.wave_type === 3) {\n    result.wave_type = SQUARE;\n  }\n\n  result.p_base_freq = 0.5 + frnd(0.5);\n  result.p_freq_limit = result.p_base_freq - 0.2 - frnd(0.6);\n  if (result.p_freq_limit < 0.2) result.p_freq_limit = 0.2;\n  result.p_freq_ramp = -0.15 - frnd(0.2);\n  if (rnd(2) === 0)\n  {\n    result.p_base_freq = 0.3 + frnd(0.6);\n    result.p_freq_limit = frnd(0.1);\n    result.p_freq_ramp = -0.35 - frnd(0.3);\n  }\n  if (rnd(1))\n  {\n    result.p_duty = frnd(0.5);\n    result.p_duty_ramp = frnd(0.2);\n  }\n  else\n  {\n    result.p_duty = 0.4 + frnd(0.5);\n    result.p_duty_ramp = -frnd(0.7);\n  }\n  result.p_env_attack = 0.0;\n  result.p_env_sustain = 0.1 + frnd(0.2);\n  result.p_env_decay = frnd(0.4);\n  if (rnd(1))\n    result.p_env_punch = frnd(0.3);\n  if (rnd(2) === 0)\n  {\n    result.p_pha_offset = frnd(0.2);\n    result.p_pha_ramp = -frnd(0.2);\n  }\n  if (rnd(1))\n    result.p_hpf_freq = frnd(0.3);\n\n  return result;\n};\n\nexplosion = function() {\n  var result=Params();\n\n  if (rnd(1)) {\n    result.p_base_freq = 0.1 + frnd(0.4);\n    result.p_freq_ramp = -0.1 + frnd(0.4);\n  } else {\n    result.p_base_freq = 0.2 + frnd(0.7);\n    result.p_freq_ramp = -0.2 - frnd(0.2);\n  }\n  result.p_base_freq *= result.p_base_freq;\n  if (rnd(4) === 0)\n    result.p_freq_ramp = 0.0;\n  if (rnd(2) === 0)\n    result.p_repeat_speed = 0.3 + frnd(0.5);\n  result.p_env_attack = 0.0;\n  result.p_env_sustain = 0.1 + frnd(0.3);\n  result.p_env_decay = frnd(0.5);\n  if (rnd(1) === 0) {\n    result.p_pha_offset = -0.3 + frnd(0.9);\n    result.p_pha_ramp = -frnd(0.3);\n  }\n  result.p_env_punch = 0.2 + frnd(0.6);\n  if (rnd(1)) {\n    result.p_vib_strength = frnd(0.7);\n    result.p_vib_speed = frnd(0.6);\n  }\n  if (rnd(2) === 0) {\n    result.p_arp_speed = 0.6 + frnd(0.3);\n    result.p_arp_mod = 0.8 - frnd(1.6);\n  }\n\n  return result;\n};\n//9675111\nbirdSound = function() {\n  var result=Params();\n\nif (frnd(10) < 1) {\n    result.wave_type = Math.floor(frnd(SHAPES.length));\n    if (result.wave_type === 3) {\n      result.wave_type = SQUARE;\n    }\nresult.p_env_attack = 0.4304400932967592 + frnd(0.2) - 0.1;\nresult.p_env_sustain = 0.15739346034252394 + frnd(0.2) - 0.1;\nresult.p_env_punch = 0.004488201744871758 + frnd(0.2) - 0.1;\nresult.p_env_decay = 0.07478075528212291 + frnd(0.2) - 0.1;\nresult.p_base_freq = 0.9865265720147687 + frnd(0.2) - 0.1;\nresult.p_freq_limit = 0 + frnd(0.2) - 0.1;\nresult.p_freq_ramp = -0.2995018224359539 + frnd(0.2) - 0.1;\nif (frnd(1.0) < 0.5) {\n  result.p_freq_ramp = 0.1 + frnd(0.15);\n}\nresult.p_freq_dramp = 0.004598608156964473 + frnd(0.1) - 0.05;\nresult.p_vib_strength = -0.2202799497929496 + frnd(0.2) - 0.1;\nresult.p_vib_speed = 0.8084998703158364 + frnd(0.2) - 0.1;\nresult.p_arp_mod = 0;//-0.46410459213693644+frnd(0.2)-0.1;\nresult.p_arp_speed = 0;//-0.10955361249587248+frnd(0.2)-0.1;\nresult.p_duty = -0.9031808754347107 + frnd(0.2) - 0.1;\nresult.p_duty_ramp = -0.8128699999808343 + frnd(0.2) - 0.1;\nresult.p_repeat_speed = 0.6014860189319991 + frnd(0.2) - 0.1;\nresult.p_pha_offset = -0.9424902314367765 + frnd(0.2) - 0.1;\nresult.p_pha_ramp = -0.1055482222272056 + frnd(0.2) - 0.1;\nresult.p_lpf_freq = 0.9989765717851521 + frnd(0.2) - 0.1;\nresult.p_lpf_ramp = -0.25051720626043017 + frnd(0.2) - 0.1;\nresult.p_lpf_resonance = 0.32777871505494693 + frnd(0.2) - 0.1;\nresult.p_hpf_freq = 0.0023548750981756753 + frnd(0.2) - 0.1;\nresult.p_hpf_ramp = -0.002375673204842568 + frnd(0.2) - 0.1;\nreturn result;\n}\n\nif (frnd(10) < 1) {\n    result.wave_type = Math.floor(frnd(SHAPES.length));\n    if (result.wave_type === 3) {\n      result.wave_type = SQUARE;\n    }\nresult.p_env_attack = 0.5277795946672003 + frnd(0.2) - 0.1;\nresult.p_env_sustain = 0.18243733568468432 + frnd(0.2) - 0.1;\nresult.p_env_punch = -0.020159754546840117 + frnd(0.2) - 0.1;\nresult.p_env_decay = 0.1561353422051903 + frnd(0.2) - 0.1;\nresult.p_base_freq = 0.9028855606533718 + frnd(0.2) - 0.1;\nresult.p_freq_limit = -0.008842787837148716;\nresult.p_freq_ramp = -0.1;\nresult.p_freq_dramp = -0.012891241489551925;\nresult.p_vib_strength = -0.17923136138403065 + frnd(0.2) - 0.1;\nresult.p_vib_speed = 0.908263385610142 + frnd(0.2) - 0.1;\nresult.p_arp_mod = 0.41690153355414894 + frnd(0.2) - 0.1;\nresult.p_arp_speed = 0.0010766233195860703 + frnd(0.2) - 0.1;\nresult.p_duty = -0.8735363011184684 + frnd(0.2) - 0.1;\nresult.p_duty_ramp = -0.7397985366747507 + frnd(0.2) - 0.1;\nresult.p_repeat_speed = 0.0591789344172107 + frnd(0.2) - 0.1;\nresult.p_pha_offset = -0.9961184222777699 + frnd(0.2) - 0.1;\nresult.p_pha_ramp = -0.08234769395850523 + frnd(0.2) - 0.1;\nresult.p_lpf_freq = 0.9412475115697335 + frnd(0.2) - 0.1;\nresult.p_lpf_ramp = -0.18261358925834958 + frnd(0.2) - 0.1;\nresult.p_lpf_resonance = 0.24541438107389477 + frnd(0.2) - 0.1;\nresult.p_hpf_freq = -0.01831940280978611 + frnd(0.2) - 0.1;\nresult.p_hpf_ramp = -0.03857383633171346 + frnd(0.2) - 0.1;\nreturn result;\n\n}\n  if (frnd(10) < 1) {\n//result.wave_type = 4;\n    result.wave_type = Math.floor(frnd(SHAPES.length));\n\n    if (result.wave_type === 3) {\n      result.wave_type = SQUARE;\n    }\nresult.p_env_attack = 0.4304400932967592 + frnd(0.2) - 0.1;\nresult.p_env_sustain = 0.15739346034252394 + frnd(0.2) - 0.1;\nresult.p_env_punch = 0.004488201744871758 + frnd(0.2) - 0.1;\nresult.p_env_decay = 0.07478075528212291 + frnd(0.2) - 0.1;\nresult.p_base_freq = 0.9865265720147687 + frnd(0.2) - 0.1;\nresult.p_freq_limit = 0 + frnd(0.2) - 0.1;\nresult.p_freq_ramp = -0.2995018224359539 + frnd(0.2) - 0.1;\nresult.p_freq_dramp = 0.004598608156964473 + frnd(0.2) - 0.1;\nresult.p_vib_strength = -0.2202799497929496 + frnd(0.2) - 0.1;\nresult.p_vib_speed = 0.8084998703158364 + frnd(0.2) - 0.1;\nresult.p_arp_mod = -0.46410459213693644 + frnd(0.2) - 0.1;\nresult.p_arp_speed = -0.10955361249587248 + frnd(0.2) - 0.1;\nresult.p_duty = -0.9031808754347107 + frnd(0.2) - 0.1;\nresult.p_duty_ramp = -0.8128699999808343 + frnd(0.2) - 0.1;\nresult.p_repeat_speed = 0.7014860189319991 + frnd(0.2) - 0.1;\nresult.p_pha_offset = -0.9424902314367765 + frnd(0.2) - 0.1;\nresult.p_pha_ramp = -0.1055482222272056 + frnd(0.2) - 0.1;\nresult.p_lpf_freq = 0.9989765717851521 + frnd(0.2) - 0.1;\nresult.p_lpf_ramp = -0.25051720626043017 + frnd(0.2) - 0.1;\nresult.p_lpf_resonance = 0.32777871505494693 + frnd(0.2) - 0.1;\nresult.p_hpf_freq = 0.0023548750981756753 + frnd(0.2) - 0.1;\nresult.p_hpf_ramp = -0.002375673204842568 + frnd(0.2) - 0.1;\nreturn result;\n}\n  if (frnd(5) > 1) {\n    result.wave_type = Math.floor(frnd(SHAPES.length));\n\n    if (result.wave_type === 3) {\n      result.wave_type = SQUARE;\n    }\n    if (rnd(1)) {\n      result.p_arp_mod = 0.2697849293151393 + frnd(0.2) - 0.1;\n      result.p_arp_speed = -0.3131172257760948 + frnd(0.2) - 0.1;\n      result.p_base_freq = 0.8090588299313949 + frnd(0.2) - 0.1;\n      result.p_duty = -0.6210022920964955 + frnd(0.2) - 0.1;\n      result.p_duty_ramp = -0.00043441813553182567 + frnd(0.2) - 0.1;\n      result.p_env_attack = 0.004321877246874195 + frnd(0.2) - 0.1;\n      result.p_env_decay = 0.1 + frnd(0.2) - 0.1;\n      result.p_env_punch = 0.061737781504416146 + frnd(0.2) - 0.1;\n      result.p_env_sustain = 0.4987252564798832 + frnd(0.2) - 0.1;\n      result.p_freq_dramp = 0.31700340314222614 + frnd(0.2) - 0.1;\n      result.p_freq_limit = 0 + frnd(0.2) - 0.1;\n      result.p_freq_ramp = -0.163380391341416 + frnd(0.2) - 0.1;\n      result.p_hpf_freq = 0.4709005021145149 + frnd(0.2) - 0.1;\n      result.p_hpf_ramp = 0.6924667290539194 + frnd(0.2) - 0.1;\n      result.p_lpf_freq = 0.8351398631384511 + frnd(0.2) - 0.1;\n      result.p_lpf_ramp = 0.36616557192873134 + frnd(0.2) - 0.1;\n      result.p_lpf_resonance = -0.08685777111664439 + frnd(0.2) - 0.1;\n      result.p_pha_offset = -0.036084571580025544 + frnd(0.2) - 0.1;\n      result.p_pha_ramp = -0.014806445085568108 + frnd(0.2) - 0.1;\n      result.p_repeat_speed = -0.8094368475518489 + frnd(0.2) - 0.1;\n      result.p_vib_speed = 0.4496665457171294 + frnd(0.2) - 0.1;\n      result.p_vib_strength = 0.23413762515532424 + frnd(0.2) - 0.1;\n    } else {\n      result.p_arp_mod = -0.35697118026766184 + frnd(0.2) - 0.1;\n      result.p_arp_speed = 0.3581140690559588 + frnd(0.2) - 0.1;\n      result.p_base_freq = 1.3260897696157528 + frnd(0.2) - 0.1;\n      result.p_duty = -0.30984900436710694 + frnd(0.2) - 0.1;\n      result.p_duty_ramp = -0.0014374759133411626 + frnd(0.2) - 0.1;\n      result.p_env_attack = 0.3160357835682254 + frnd(0.2) - 0.1;\n      result.p_env_decay = 0.1 + frnd(0.2) - 0.1;\n      result.p_env_punch = 0.24323114016870148 + frnd(0.2) - 0.1;\n      result.p_env_sustain = 0.4 + frnd(0.2) - 0.1;\n      result.p_freq_dramp = 0.2866475886237244 + frnd(0.2) - 0.1;\n      result.p_freq_limit = 0 + frnd(0.2) - 0.1;\n      result.p_freq_ramp = -0.10956352368742976 + frnd(0.2) - 0.1;\n      result.p_hpf_freq = 0.20772718017889846 + frnd(0.2) - 0.1;\n      result.p_hpf_ramp = 0.1564090637378835 + frnd(0.2) - 0.1;\n      result.p_lpf_freq = 0.6021372770637031 + frnd(0.2) - 0.1;\n      result.p_lpf_ramp = 0.24016227139979027 + frnd(0.2) - 0.1;\n      result.p_lpf_resonance = -0.08787383821160144 + frnd(0.2) - 0.1;\n      result.p_pha_offset = -0.381597686151701 + frnd(0.2) - 0.1;\n      result.p_pha_ramp = -0.0002481687661373495 + frnd(0.2) - 0.1;\n      result.p_repeat_speed = 0.07812112809425686 + frnd(0.2) - 0.1;\n      result.p_vib_speed = -0.13648848579133943 + frnd(0.2) - 0.1;\n      result.p_vib_strength = 0.0018874158972302657 + frnd(0.2) - 0.1;\n    }\n    return result;\n\n  }\n\n  result.wave_type = Math.floor(frnd(SHAPES.length));//TRIANGLE;\n  if (result.wave_type === 1 || result.wave_type === 3) {\n    result.wave_type = 2;\n  }\n  //new\n  result.p_base_freq = 0.85 + frnd(0.15);\n  result.p_freq_ramp = 0.3 + frnd(0.15);\n//  result.p_freq_dramp = 0.3+frnd(2.0);\n\n  result.p_env_attack = 0 + frnd(0.09);\n  result.p_env_sustain = 0.2 + frnd(0.3);\n  result.p_env_decay = 0 + frnd(0.1);\n\n  result.p_duty = frnd(2.0) - 1.0;\n  result.p_duty_ramp = Math.pow(frnd(2.0) - 1.0, 3.0);\n\n\n  result.p_repeat_speed = 0.5 + frnd(0.1);\n\n  result.p_pha_offset = -0.3 + frnd(0.9);\n  result.p_pha_ramp = -frnd(0.3);\n\n  result.p_arp_speed = 0.4 + frnd(0.6);\n  result.p_arp_mod = 0.8 + frnd(0.1);\n\n\n  result.p_lpf_resonance = frnd(2.0) - 1.0;\n  result.p_lpf_freq = 1.0 - Math.pow(frnd(1.0), 3.0);\n  result.p_lpf_ramp = Math.pow(frnd(2.0) - 1.0, 3.0);\n  if (result.p_lpf_freq < 0.1 && result.p_lpf_ramp < -0.05)\n    result.p_lpf_ramp = -result.p_lpf_ramp;\n  result.p_hpf_freq = Math.pow(frnd(1.0), 5.0);\n  result.p_hpf_ramp = Math.pow(frnd(2.0) - 1.0, 5.0);\n\n  return result;\n};\n\n\npushSound = function() {\n  var result=Params();\n  result.wave_type = Math.floor(frnd(SHAPES.length));//TRIANGLE;\n  if (result.wave_type === 2) {\n    result.wave_type++;\n  }\n  if (result.wave_type === 0) {\n    result.wave_type = NOISE;\n  }\n  //new\n  result.p_base_freq = 0.1 + frnd(0.4);\n  result.p_freq_ramp = 0.05 + frnd(0.2);\n\n  result.p_env_attack = 0.01 + frnd(0.09);\n  result.p_env_sustain = 0.01 + frnd(0.09);\n  result.p_env_decay = 0.01 + frnd(0.09);\n\n  result.p_repeat_speed = 0.3 + frnd(0.5);\n  result.p_pha_offset = -0.3 + frnd(0.9);\n  result.p_pha_ramp = -frnd(0.3);\n  result.p_arp_speed = 0.6 + frnd(0.3);\n  result.p_arp_mod = 0.8 - frnd(1.6);\n\n  return result;\n};\n\n\n\npowerUp = function() {\n  var result=Params();\n  if (rnd(1))\n    result.wave_type = SAWTOOTH;\n  else\n    result.p_duty = frnd(0.6);\n  result.wave_type = Math.floor(frnd(SHAPES.length));\n  if (result.wave_type === 3) {\n    result.wave_type = SQUARE;\n  }\n  if (rnd(1))\n  {\n    result.p_base_freq = 0.2 + frnd(0.3);\n    result.p_freq_ramp = 0.1 + frnd(0.4);\n    result.p_repeat_speed = 0.4 + frnd(0.4);\n  }\n  else\n  {\n    result.p_base_freq = 0.2 + frnd(0.3);\n    result.p_freq_ramp = 0.05 + frnd(0.2);\n    if (rnd(1))\n    {\n      result.p_vib_strength = frnd(0.7);\n      result.p_vib_speed = frnd(0.6);\n    }\n  }\n  result.p_env_attack = 0.0;\n  result.p_env_sustain = frnd(0.4);\n  result.p_env_decay = 0.1 + frnd(0.4);\n\n  return result;\n};\n\nhitHurt = function() {\n  result = Params();\n  result.wave_type = rnd(2);\n  if (result.wave_type === SINE)\n    result.wave_type = NOISE;\n  if (result.wave_type === SQUARE)\n    result.p_duty = frnd(0.6);\n  result.wave_type = Math.floor(frnd(SHAPES.length));\n  result.p_base_freq = 0.2 + frnd(0.6);\n  result.p_freq_ramp = -0.3 - frnd(0.4);\n  result.p_env_attack = 0.0;\n  result.p_env_sustain = frnd(0.1);\n  result.p_env_decay = 0.1 + frnd(0.2);\n  if (rnd(1))\n    result.p_hpf_freq = frnd(0.3);\n  return result;\n};\n\n\njump = function() {\n  result = Params();\n  result.wave_type = SQUARE;\n  result.wave_type = Math.floor(frnd(SHAPES.length));\n  if (result.wave_type === 3) {\n    result.wave_type = SQUARE;\n  }\n  result.p_duty = frnd(0.6);\n  result.p_base_freq = 0.3 + frnd(0.3);\n  result.p_freq_ramp = 0.1 + frnd(0.2);\n  result.p_env_attack = 0.0;\n  result.p_env_sustain = 0.1 + frnd(0.3);\n  result.p_env_decay = 0.1 + frnd(0.2);\n  if (rnd(1))\n    result.p_hpf_freq = frnd(0.3);\n  if (rnd(1))\n    result.p_lpf_freq = 1.0 - frnd(0.6);\n  return result;\n};\n\nblipSelect = function() {\n  result = Params();\n  result.wave_type = rnd(1);\n  result.wave_type = Math.floor(frnd(SHAPES.length));\n  if (result.wave_type === 3) {\n    result.wave_type = rnd(1);\n  }\n  if (result.wave_type === SQUARE)\n    result.p_duty = frnd(0.6);\n  result.p_base_freq = 0.2 + frnd(0.4);\n  result.p_env_attack = 0.0;\n  result.p_env_sustain = 0.1 + frnd(0.1);\n  result.p_env_decay = frnd(0.2);\n  result.p_hpf_freq = 0.1;\n  return result;\n};\n\nrandom = function() {\n  result = Params();\n  result.wave_type = Math.floor(frnd(SHAPES.length));\n  result.p_base_freq = Math.pow(frnd(2.0) - 1.0, 2.0);\n  if (rnd(1))\n    result.p_base_freq = Math.pow(frnd(2.0) - 1.0, 3.0) + 0.5;\n  result.p_freq_limit = 0.0;\n  result.p_freq_ramp = Math.pow(frnd(2.0) - 1.0, 5.0);\n  if (result.p_base_freq > 0.7 && result.p_freq_ramp > 0.2)\n    result.p_freq_ramp = -result.p_freq_ramp;\n  if (result.p_base_freq < 0.2 && result.p_freq_ramp < -0.05)\n    result.p_freq_ramp = -result.p_freq_ramp;\n  result.p_freq_dramp = Math.pow(frnd(2.0) - 1.0, 3.0);\n  result.p_duty = frnd(2.0) - 1.0;\n  result.p_duty_ramp = Math.pow(frnd(2.0) - 1.0, 3.0);\n  result.p_vib_strength = Math.pow(frnd(2.0) - 1.0, 3.0);\n  result.p_vib_speed = frnd(2.0) - 1.0;\n  result.p_env_attack = Math.pow(frnd(2.0) - 1.0, 3.0);\n  result.p_env_sustain = Math.pow(frnd(2.0) - 1.0, 2.0);\n  result.p_env_decay = frnd(2.0) - 1.0;\n  result.p_env_punch = Math.pow(frnd(0.8), 2.0);\n  if (result.p_env_attack + result.p_env_sustain + result.p_env_decay < 0.2) {\n    result.p_env_sustain += 0.2 + frnd(0.3);\n    result.p_env_decay += 0.2 + frnd(0.3);\n  }\n  result.p_lpf_resonance = frnd(2.0) - 1.0;\n  result.p_lpf_freq = 1.0 - Math.pow(frnd(1.0), 3.0);\n  result.p_lpf_ramp = Math.pow(frnd(2.0) - 1.0, 3.0);\n  if (result.p_lpf_freq < 0.1 && result.p_lpf_ramp < -0.05)\n    result.p_lpf_ramp = -result.p_lpf_ramp;\n  result.p_hpf_freq = Math.pow(frnd(1.0), 5.0);\n  result.p_hpf_ramp = Math.pow(frnd(2.0) - 1.0, 5.0);\n  result.p_pha_offset = Math.pow(frnd(2.0) - 1.0, 3.0);\n  result.p_pha_ramp = Math.pow(frnd(2.0) - 1.0, 3.0);\n  result.p_repeat_speed = frnd(2.0) - 1.0;\n  result.p_arp_speed = frnd(2.0) - 1.0;\n  result.p_arp_mod = frnd(2.0) - 1.0;\n  return result;\n};\n\nvar generators = [\npickupCoin,\nlaserShoot,\nexplosion,\npowerUp,\nhitHurt,\njump,\nblipSelect,\npushSound,\nrandom,\nbirdSound\n];\n\nvar generatorNames = [\n'pickupCoin',\n'laserShoot',\n'explosion',\n'powerUp',\n'hitHurt',\n'jump',\n'blipSelect',\n'pushSound',\n'random',\n'birdSound'\n];\n\n/*\ni like 9675111\n*/\ngenerateFromSeed = function(seed) {\n  rng = new RNG((seed / 100) | 0);\n  var generatorindex = seed % 100;\n  var soundGenerator = generators[generatorindex % generators.length];\n  seeded = true;\n  var result = soundGenerator();\n  result.seed = seed;\n  seeded = false;\n  return result;\n};\n\nfunction SoundEffect(length, sample_rate) {\n  this._buffer = AUDIO_CONTEXT.createBuffer(1, length, sample_rate);\n}\n\nSoundEffect.prototype.getBuffer = function() {\n  return this._buffer.getChannelData(0);\n};\n\n\nSoundEffect.prototype.play = function() {\n  var source = AUDIO_CONTEXT.createBufferSource();\n  var filter1 = AUDIO_CONTEXT.createBiquadFilter();\n  var filter2 = AUDIO_CONTEXT.createBiquadFilter();\n  var filter3 = AUDIO_CONTEXT.createBiquadFilter();\n\n  source.buffer = this._buffer;\n  source.connect(filter1);\n\n  filter1.frequency.value = 1600;\n  filter2.frequency.value = 1600;\n  filter3.frequency.value = 1600;\n\n  filter1.connect(filter2);\n  filter2.connect(filter3);\n  filter3.connect(AUDIO_CONTEXT.destination);\n  var t = AUDIO_CONTEXT.currentTime;\n  if (typeof source.start != 'undefined') {\n    return source.start(t);\n  } else {\n    return source.noteOn(t);\n  }\n  source.onended = function() {\n    filter3.disconnect()\n  }\n};\n\nSoundEffect.MIN_SAMPLE_RATE = 22050;\n\nif (typeof AUDIO_CONTEXT == 'undefined') {\n  SoundEffect = function SoundEffect(length, sample_rate) {\n    this._sample_rate = sample_rate;\n    this._buffer = new Array(length);\n    this._audioElement = null;\n  };\n\n  SoundEffect.prototype.getBuffer = function() {\n    this._audioElement = null;\n    return this._buffer;\n  };\n\n  SoundEffect.prototype.play = function() {\n    if (this._audioElement) {\n      this._audioElement.cloneNode(false).play();\n    } else {\n      for (var i = 0; i < this._buffer.length; i++) {\n        // bit_depth is always 8, rescale [-1.0, 1.0) to [0, 256)\n        this._buffer[i] = 255 & Math.floor(128 * Math.max(0, Math.min(this._buffer[i] + 1, 2)));\n      }\n      var wav = MakeRiff(this._sample_rate, BIT_DEPTH, this._buffer);\n      this._audioElement = new Audio();\n      this._audioElement.src = wav.dataURI;\n      return this._audioElement.play();\n    }\n  };\n\n  SoundEffect.MIN_SAMPLE_RATE = 1;\n}\n\nSoundEffect.generate = function(ps) {\n/*  window.console.log(ps.wave_type + \"\\t\" + ps.seed);\n  var psstring=\"\";\n  for (var n in ps) {\n    if (ps.hasOwnProperty(n)) {\n      psstring = psstring +\"result.\" + n+\" = \" + ps[n] + \";\\n\";\n    }\n  }\nwindow.console.log(ps);\nwindow.console.log(psstring);*/\n  function repeat() {\n    rep_time = 0;\n\n    fperiod = 100.0 / (ps.p_base_freq * ps.p_base_freq + 0.001);\n    period = Math.floor(fperiod);\n    fmaxperiod = 100.0 / (ps.p_freq_limit * ps.p_freq_limit + 0.001);\n\n    fslide = 1.0 - Math.pow(ps.p_freq_ramp, 3.0) * 0.01;\n    fdslide = -Math.pow(ps.p_freq_dramp, 3.0) * 0.000001;\n\n    square_duty = 0.5 - ps.p_duty * 0.5;\n    square_slide = -ps.p_duty_ramp * 0.00005;\n\n    if (ps.p_arp_mod >= 0.0)\n      arp_mod = 1.0 - Math.pow(ps.p_arp_mod, 2.0) * 0.9;\n    else\n      arp_mod = 1.0 + Math.pow(ps.p_arp_mod, 2.0) * 10.0;\n    arp_time = 0;\n    arp_limit = Math.floor(Math.pow(1.0 - ps.p_arp_speed, 2.0) * 20000 + 32);\n    if (ps.p_arp_speed == 1.0)\n      arp_limit = 0;\n  };\n\n  var rep_time;\n  var fperiod, period, fmaxperiod;\n  var fslide, fdslide;\n  var square_duty, square_slide;\n  var arp_mod, arp_time, arp_limit;\n  repeat();  // First time through, this is a bit of a misnomer\n\n  // Filter\n  var fltp = 0.0;\n  var fltdp = 0.0;\n  var fltw = Math.pow(ps.p_lpf_freq, 3.0) * 0.1;\n  var fltw_d = 1.0 + ps.p_lpf_ramp * 0.0001;\n  var fltdmp = 5.0 / (1.0 + Math.pow(ps.p_lpf_resonance, 2.0) * 20.0) *\n    (0.01 + fltw);\n  if (fltdmp > 0.8) fltdmp = 0.8;\n  var fltphp = 0.0;\n  var flthp = Math.pow(ps.p_hpf_freq, 2.0) * 0.1;\n  var flthp_d = 1.0 + ps.p_hpf_ramp * 0.0003;\n\n  // Vibrato\n  var vib_phase = 0.0;\n  var vib_speed = Math.pow(ps.p_vib_speed, 2.0) * 0.01;\n  var vib_amp = ps.p_vib_strength * 0.5;\n\n  // Envelope\n  var env_vol = 0.0;\n  var env_stage = 0;\n  var env_time = 0;\n  var env_length = [\n    Math.floor(ps.p_env_attack * ps.p_env_attack * 100000.0),\n    Math.floor(ps.p_env_sustain * ps.p_env_sustain * 100000.0),\n    Math.floor(ps.p_env_decay * ps.p_env_decay * 100000.0)\n  ];\n  var env_total_length = env_length[0] + env_length[1] + env_length[2];\n\n  // Phaser\n  var phase = 0;\n  var fphase = Math.pow(ps.p_pha_offset, 2.0) * 1020.0;\n  if (ps.p_pha_offset < 0.0) fphase = -fphase;\n  var fdphase = Math.pow(ps.p_pha_ramp, 2.0) * 1.0;\n  if (ps.p_pha_ramp < 0.0) fdphase = -fdphase;\n  var iphase = Math.abs(Math.floor(fphase));\n  var ipp = 0;\n  var phaser_buffer = [];\n  for (var i = 0; i < 1024; ++i)\n    phaser_buffer[i] = 0.0;\n\n  // Noise\n  var noise_buffer = [];\n  for (var i = 0; i < 32; ++i)\n    noise_buffer[i] = Math.random() * 2.0 - 1.0;\n\n  // Repeat\n  var rep_limit = Math.floor(Math.pow(1.0 - ps.p_repeat_speed, 2.0) * 20000\n                             + 32);\n  if (ps.p_repeat_speed == 0.0)\n    rep_limit = 0;\n\n  //var gain = 2.0 * Math.log(1 + (Math.E - 1) * ps.sound_vol);\n  var gain = 2.0 * ps.sound_vol;\n  var gain = Math.exp(ps.sound_vol) - 1;\n\n  var num_clipped = 0;\n\n  // ...end of initialization. Generate samples.\n\n  var sample_sum = 0;\n  var num_summed = 0;\n  var summands = Math.floor(44100 / ps.sample_rate);\n\n  var buffer_i = 0;\n  var buffer_length = Math.ceil(env_total_length / summands);\n  var buffer_complete = false;\n\n  var sound;\n  if (ps.sample_rate < SoundEffect.MIN_SAMPLE_RATE) {\n    // Assume 4x gets close enough to MIN_SAMPLE_RATE\n    sound = new SoundEffect(4 * buffer_length, SoundEffect.MIN_SAMPLE_RATE);\n  } else {\n    sound = new SoundEffect(buffer_length, ps.sample_rate)\n  }\n  var buffer = sound.getBuffer();\n\n  for (var t = 0;; ++t) {\n\n    // Repeats\n    if (rep_limit != 0 && ++rep_time >= rep_limit)\n      repeat();\n\n    // Arpeggio (single)\n    if (arp_limit != 0 && t >= arp_limit) {\n      arp_limit = 0;\n      fperiod *= arp_mod;\n    }\n\n    // Frequency slide, and frequency slide slide!\n    fslide += fdslide;\n    fperiod *= fslide;\n    if (fperiod > fmaxperiod) {\n      fperiod = fmaxperiod;\n      if (ps.p_freq_limit > 0.0)\n        buffer_complete = true;\n    }\n\n    // Vibrato\n    var rfperiod = fperiod;\n    if (vib_amp > 0.0) {\n      vib_phase += vib_speed;\n      rfperiod = fperiod * (1.0 + Math.sin(vib_phase) * vib_amp);\n    }\n    period = Math.floor(rfperiod);\n    if (period < 8) period = 8;\n\n    square_duty += square_slide;\n    if (square_duty < 0.0) square_duty = 0.0;\n    if (square_duty > 0.5) square_duty = 0.5;\n\n    // Volume envelope\n    env_time++;\n    if (env_time > env_length[env_stage]) {\n      env_time = 1;\n      env_stage++;\n      while (env_stage < 3 && env_length[env_stage] === 0)\n\tenv_stage++;\n      if (env_stage === 3)\n        break;\n    }\n    if (env_stage === 0)\n      env_vol = env_time / env_length[0];\n    else if (env_stage === 1)\n      env_vol = 1.0 + Math.pow(1.0 - env_time / env_length[1],\n                               1.0) * 2.0 * ps.p_env_punch;\n    else  // env_stage == 2\n      env_vol = 1.0 - env_time / env_length[2];\n\n    // Phaser step\n    fphase += fdphase;\n    iphase = Math.abs(Math.floor(fphase));\n    if (iphase > 1023) iphase = 1023;\n\n    if (flthp_d != 0.0) {\n      flthp *= flthp_d;\n      if (flthp < 0.00001)\n        flthp = 0.00001;\n      if (flthp > 0.1)\n        flthp = 0.1;\n    }\n\n    // 8x supersampling\n    var sample = 0.0;\n    for (var si = 0; si < 8; ++si) {\n      var sub_sample = 0.0;\n      phase++;\n      if (phase >= period) {\n        phase %= period;\n        if (ps.wave_type === NOISE)\n          for (var i = 0; i < 32; ++i)\n            noise_buffer[i] = Math.random() * 2.0 - 1.0;\n      }\n\n      // Base waveform\n      var fp = phase / period;\n      if (ps.wave_type === SQUARE) {\n        if (fp < square_duty)\n          sub_sample = 0.5;\n        else\n          sub_sample = -0.5;\n      } else if (ps.wave_type === SAWTOOTH) {\n        sub_sample = 1.0 - fp * 2;\n      } else if (ps.wave_type === SINE) {\n        sub_sample = Math.sin(fp * 2 * Math.PI);\n      } else if (ps.wave_type === NOISE) {\n        sub_sample = noise_buffer[Math.floor(phase * 32 / period)];\n      } else if (ps.wave_type === TRIANGLE) {\n        sub_sample = Math.abs(1 - fp * 2) - 1;\n      } else if (ps.wave_type === BREAKER) {\n        sub_sample = Math.abs(1 - fp * fp * 2) - 1;\n      } else {\n        throw new Exception('bad wave type! ' + ps.wave_type);\n      }\n\n      // Low-pass filter\n      var pp = fltp;\n      fltw *= fltw_d;\n      if (fltw < 0.0) fltw = 0.0;\n      if (fltw > 0.1) fltw = 0.1;\n      if (ps.p_lpf_freq != 1.0) {\n        fltdp += (sub_sample - fltp) * fltw;\n        fltdp -= fltdp * fltdmp;\n      } else {\n        fltp = sub_sample;\n        fltdp = 0.0;\n      }\n      fltp += fltdp;\n\n      // High-pass filter\n      fltphp += fltp - pp;\n      fltphp -= fltphp * flthp;\n      sub_sample = fltphp;\n\n      // Phaser\n      phaser_buffer[ipp & 1023] = sub_sample;\n      sub_sample += phaser_buffer[(ipp - iphase + 1024) & 1023];\n      ipp = (ipp + 1) & 1023;\n\n      // final accumulation and envelope application\n      sample += sub_sample * env_vol;\n    }\n\n    // Accumulate samples appropriately for sample rate\n    sample_sum += sample;\n    if (++num_summed >= summands) {\n      num_summed = 0;\n      sample = sample_sum / summands;\n      sample_sum = 0;\n    } else {\n      continue;\n    }\n\n    sample = sample / 8 * masterVolume;\n    sample *= gain;\n\n    buffer[buffer_i++] = sample;\n\n    if (ps.sample_rate < SoundEffect.MIN_SAMPLE_RATE) {\n      buffer[buffer_i++] = sample;\n      buffer[buffer_i++] = sample;\n      buffer[buffer_i++] = sample;\n    }\n  }\n\n  if (summands > 0) {\n    sample = sample_sum / summands;\n\n    sample = sample / 8 * masterVolume;\n    sample *= gain;\n\n    buffer[buffer_i++] = sample;\n\n    if (ps.sample_rate < SoundEffect.MIN_SAMPLE_RATE) {\n      buffer[buffer_i++] = sample;\n      buffer[buffer_i++] = sample;\n      buffer[buffer_i++] = sample;\n    }\n  }\n\n  return sound;\n};\n\n// if (typeof exports != 'undefined') {\n//   // For node.js\n//   var RIFFWAVE = require('./riffwave').RIFFWAVE;\n//   exports.Params = Params;\n//   exports.generate = generate;\n// }\n\nvar sfxCache = {};\nvar cachedSeeds = [];\nvar CACHE_MAX = 50;\n\nfunction cacheSeed(seed){\n  if (seed in sfxCache) {\n    return sfxCache[seed];\n  }\n\n  var params = generateFromSeed(seed);\n  params.sound_vol = SOUND_VOL;\n  params.sample_rate = SAMPLE_RATE;\n  params.bit_depth = BIT_DEPTH;\n\n  var sound = SoundEffect.generate(params);\n  sfxCache[seed] = sound;\n  cachedSeeds.push(seed);\n\n  while (cachedSeeds.length>CACHE_MAX) {\n    var toRemove=cachedSeeds[0];\n    cachedSeeds = cachedSeeds.slice(1);\n    delete sfxCache[toRemove];\n  }\n\n  return sound;\n}\n\nfunction playSound(seed) {\n  checkAudioContextExists();\n//   if (unitTesting) return;\n  var sound = cacheSeed(seed);\n  return sound.play();\n}\n\nmodule.exports = {playSound}","import { Optional } from '../util'\n\n/**\n * Seedable random number generator functions.\n * @version 1.0.0\n * @license Public Domain\n *\n * @example\n * var rng = new RNG('Example');\n * rng.random(40, 50);  // =>  42\n * rng.uniform();       // =>  0.7972798995050903\n * rng.normal();        // => -0.6698504543216376\n * rng.exponential();   // =>  1.0547367609131555\n * rng.poisson(4);      // =>  2\n * rng.gamma(4);        // =>  2.781724687386858\n */\n\n/**\n * Get the underlying bytes of this string.\n * @return {Array} An array of bytes\n */\nfunction getBytes(str: string) {\n    let output: number[] = []\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charCodeAt(i)\n        const bytes: number[] = []\n        do {\n            bytes.push(c & 0xFF) // tslint:disable-line:no-bitwise\n            c = c >> 8 // tslint:disable-line:no-bitwise\n        } while (c > 0)\n        output = output.concat(bytes.reverse())\n    }\n    return output\n}\n\nclass RC4 {\n    private s: number[]\n    private i: number\n    private j: number\n\n    /**\n     * @param {String} seed A string to seed the generator.\n     * @constructor\n     */\n    constructor(seed: string) {\n        this.s = new Array(256)\n        this.i = 0\n        this.j = 0\n        for (let i = 0; i < 256; i++) {\n            this.s[i] = i\n        }\n        if (seed) {\n            this.mix(seed)\n        }\n    }\n\n    public _swap(i: number, j: number) {\n        const tmp = this.s[i]\n        this.s[i] = this.s[j]\n        this.s[j] = tmp\n    }\n\n    /**\n     * Mix additional entropy into this generator.\n     * @param {String} seed\n     */\n    public mix(seed: string) {\n        const input = getBytes(seed)\n        let j = 0\n        for (let i = 0; i < this.s.length; i++) {\n            j += this.s[i] + input[i % input.length]\n            j %= 256\n            this._swap(i, j)\n        }\n    }\n\n    /**\n     * @return The next byte of output from the generator.\n     */\n    public next() {\n        this.i = (this.i + 1) % 256\n        this.j = (this.j + this.s[this.i]) % 256\n        this._swap(this.i, this.j)\n        return this.s[(this.s[this.i] + this.s[this.j]) % 256]\n    }\n\n}\n\nclass RNG {\n    private _normal: Optional<number>\n    private readonly _state: RC4\n\n    /**\n     * Create a new random number generator with optional seed. If the\n     * provided seed is a function (i.e. Math.random) it will be used as\n     * the uniform number generator.\n     * @param seed An arbitrary object used to seed the generator.\n     * @constructor\n     */\n    constructor(seed: number) {\n        // this.seed = seed;\n        // if (seed == null) {\n        //     seed = (Math.random() + Date.now()).toString();\n        //     //window.console.log(\"setting random seed \"+seed);\n        //     //print_call_stack();\n\n        // } else if (typeof seed === 'function') {\n        //     // Use it as a uniform number generator\n        //     this.uniform = seed;\n        //     this.nextByte = function() {\n        //         return ~~(this.uniform() * 256);\n        //     };\n        //     seed = null;\n        // } else if (Object.prototype.toString.call(seed) !== '[object String]') {\n        //     seed = JSON.stringify(seed);\n        // } else {\n        //     //window.console.log(\"setting seed \"+seed);\n        //     //print_call_stack();\n        // }\n        this._normal = null\n        this._state = new RC4(JSON.stringify(seed))\n    }\n\n    /**\n     * @return {number} Uniform random number between 0 and 255.\n     */\n    public nextByte() {\n        return this._state.next()\n    }\n\n    /**\n     * @return {number} Uniform random number between 0 and 1.\n     */\n    public uniform() {\n        const BYTES = 7 // 56 bits to make a 53-bit double\n        let output = 0\n        for (let i = 0; i < BYTES; i++) {\n            output *= 256\n            output += this.nextByte()\n        }\n        return output / (Math.pow(2, BYTES * 8) - 1)\n    }\n\n    /**\n     * Produce a random integer within [n, m).\n     * @param {number} [n=0]\n     * @param {number} m\n     *\n     */\n    public random(n: Optional<number>, m: Optional<number>) {\n        if (n == null) {\n            return this.uniform()\n        } else if (m == null) {\n            m = n\n            n = 0\n        }\n        return n + Math.floor(this.uniform() * (m - n))\n    }\n\n    /**\n     * Generates numbers using this.uniform() with the Box-Muller transform.\n     * @return {number} Normally-distributed random number of mean 0, variance 1.\n     */\n    public normal() {\n        if (this._normal !== null) {\n            const n = this._normal\n            this._normal = null\n            return n\n        } else {\n            const x = this.uniform() || Math.pow(2, -53) // can't be exactly 0\n            const y = this.uniform()\n            this._normal = Math.sqrt(-2 * Math.log(x)) * Math.sin(2 * Math.PI * y)\n            return Math.sqrt(-2 * Math.log(x)) * Math.cos(2 * Math.PI * y)\n        }\n    }\n\n    /**\n     * Generates numbers using this.uniform().\n     * @return {number} Number from the exponential distribution, lambda = 1.\n     */\n    public exponential() {\n        return -Math.log(this.uniform() || Math.pow(2, -53))\n    }\n\n    /**\n     * Generates numbers using this.uniform() and Knuth's method.\n     * @param {number} [mean=1]\n     * @return {number} Number from the Poisson distribution.\n     */\n    public poisson(mean: number) {\n        const L = Math.exp(-(mean || 1))\n        let k = 0\n        let p = 1\n        do {\n            k++\n            p *= this.uniform()\n        } while (p > L)\n        return k - 1\n    }\n\n    /**\n     * Generates numbers using this.uniform(), this.normal(),\n     * this.exponential(), and the Marsaglia-Tsang method.\n     * @param {number} a\n     * @return {number} Number from the gamma distribution.\n     */\n    // gamma(a: number) {\n    //     var d = (a < 1 ? 1 + a : a) - 1 / 3;\n    //     var c = 1 / Math.sqrt(9 * d);\n    //     do {\n    //         do {\n    //             var x = this.normal();\n    //             var v = Math.pow(c * x + 1, 3);\n    //         } while (v <= 0);\n    //         var u = this.uniform();\n    //         var x2 = Math.pow(x, 2);\n    //     } while (u >= 1 - 0.0331 * x2 * x2 &&\n    //             Math.log(u) >= 0.5 * x2 + d * (1 - v + Math.log(v)));\n    //     if (a < 1) {\n    //         return d * v * Math.exp(this.exponential() / -a);\n    //     } else {\n    //         return d * v;\n    //     }\n    // };\n\n    // /**\n    //  * Accepts a dice rolling notation string and returns a generator\n    //  * function for that distribution. The parser is quite flexible.\n    //  * @param {string} expr A dice-rolling, expression i.e. '2d6+10'.\n    //  * @param {RNG} rng An optional RNG object.\n    //  * @return {Function}\n    //  */\n    // static roller(expr, rng) {\n    //     var parts = expr.split(/(\\d+)?d(\\d+)([+-]\\d+)?/).slice(1);\n    //     var dice = parseFloat(parts[0]) || 1;\n    //     var sides = parseFloat(parts[1]);\n    //     var mod = parseFloat(parts[2]) || 0;\n    //     rng = rng || new RNG();\n    //     return function() {\n    //         var total = dice + mod;\n    //         for (var i = 0; i < dice; i++) {\n    //             total += rng.random(sides);\n    //         }\n    //         return total;\n    //     };\n    // }\n}\n\nexport { RNG }\n","// tslint:disable:no-bitwise\n/*\n * RIFFWAVE.js v0.02 - Audio encoder for HTML5 <audio> elements.\n * Copyright (C) 2011 Pedro Ladaria <pedro.ladaria at Gmail dot com>\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * version 2 as published by the Free Software Foundation.\n * The full license is available at http://www.gnu.org/licenses/gpl.html\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n *\n * Changelog:\n *\n * 0.01 - First release\n * 0.02 - New faster base64 encoding\n *\n */\n\nconst FastBase64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\nconst FastBase64EncLookup: string[] = []\n\nfunction FastBase64_Init() {\n    for (let i = 0; i < 4096; i++) {\n        FastBase64EncLookup[i] = FastBase64Chars[i >> 6] + FastBase64Chars[i & 0x3F]\n    }\n}\n\nfunction FastBase64_Encode(src: number[]) {\n    let len = src.length\n    let dst = ''\n    let i = 0\n    let n\n    while (len > 2) {\n        n = (src[i] << 16) | (src[i + 1] << 8) | src[i + 2]\n        dst += FastBase64EncLookup[n >> 12] + FastBase64EncLookup[n & 0xFFF]\n        len -= 3\n        i += 3\n    }\n    if (len > 0) {\n        const n1 = (src[i] & 0xFC) >> 2\n        let n2 = (src[i] & 0x03) << 4\n        if (len > 1) n2 |= (src[++i] & 0xF0) >> 4\n        dst += FastBase64Chars[n1]\n        dst += FastBase64Chars[n2]\n        if (len === 2) {\n            let n3 = (src[i++] & 0x0F) << 2\n            n3 |= (src[i] & 0xC0) >> 6\n            dst += FastBase64Chars[n3]\n        }\n        if (len === 1) dst += '='\n        dst += '='\n    }\n    return dst\n} // end Encode\n\nFastBase64_Init()\n\nfunction u32ToArray(i: number) {\n    return [i & 0xFF, (i >> 8) & 0xFF, (i >> 16) & 0xFF, (i >> 24) & 0xFF]\n}\n\nfunction u16ToArray(i: number) {\n    return [i & 0xFF, (i >> 8) & 0xFF]\n}\n\nfunction MakeRiff(sampleRate: number, bitsPerSample: number, data: number[]) {\n    let wav = []\n\n    const header = {                         // OFFS SIZE NOTES\n        audioFormat: 1,                     // 20   2    PCM = 1\n        bitsPerSample,                     // 34   2    8 bits = 8, 16 bits = 16, etc...\n        blockAlign: 0,                     // 32   2    NumChannels*BitsPerSample/8\n        byteRate: 0,                     // 28   4    SampleRate*NumChannels*BitsPerSample/8\n        chunkId: [0x52, 0x49, 0x46, 0x46], // 0    4    \"RIFF\" = 0x52494646\n        chunkSize: 0,                     // 4    4    36+SubChunk2Size = 4+(8+SubChunk1Size)+(8+SubChunk2Size)\n        format: [0x57, 0x41, 0x56, 0x45], // 8    4    \"WAVE\" = 0x57415645\n        numChannels: 1,                     // 22   2    Mono = 1, Stereo = 2, etc.\n        sampleRate,                  // 24   4    8000, 44100, etc\n        subChunk1Id: [0x66, 0x6d, 0x74, 0x20], // 12   4    \"fmt \" = 0x666d7420\n        subChunk1Size: 16,                    // 16   4    16 for PCM\n        subChunk2Id: [0x64, 0x61, 0x74, 0x61], // 36   4    \"data\" = 0x64617461\n        subChunk2Size: 0                      // 40   4    data size = NumSamples*NumChannels*BitsPerSample/8\n    }\n\n    header.byteRate = (header.sampleRate * header.numChannels * header.bitsPerSample) >> 3\n    header.blockAlign = (header.numChannels * header.bitsPerSample) >> 3\n    header.subChunk2Size = data.length\n    header.chunkSize = 36 + header.subChunk2Size\n\n    wav = header.chunkId.concat(\n      u32ToArray(header.chunkSize),\n      header.format,\n      header.subChunk1Id,\n      u32ToArray(header.subChunk1Size),\n      u16ToArray(header.audioFormat),\n      u16ToArray(header.numChannels),\n      u32ToArray(header.sampleRate),\n      u32ToArray(header.byteRate),\n      u16ToArray(header.blockAlign),\n      u16ToArray(header.bitsPerSample),\n      header.subChunk2Id,\n      u32ToArray(header.subChunk2Size),\n      data\n    )\n\n    const dataURI = 'data:audio/wav;base64,' + FastBase64_Encode(wav)\n\n    const result = {\n        dat: [],\n        dataURI,\n        header,\n        wav\n    }\n\n    return result\n}\n\nexport { MakeRiff, FastBase64_Encode }\n","import { Cell } from '../engine'\nimport { IColor } from '../models/colors'\nimport { GameData } from '../models/game'\nimport { _flatten, Optional, RULE_DIRECTION } from '../util'\nimport BaseUI from './base'\n\ninterface ITableCell {\n    td: HTMLTableCellElement,\n    label: HTMLSpanElement,\n    pixels: HTMLSpanElement[][]\n}\n\nclass TableUI extends BaseUI {\n    private readonly table: HTMLElement\n    private tableCells: ITableCell[][]\n\n    constructor(table: HTMLElement) {\n        super()\n        this.table = table\n        this.tableCells = []\n        table.classList.add('ps-table')\n        this.markAcceptingInput(false)\n    }\n    public tick() {\n        const ret = super.tick()\n        this.markAcceptingInput(!super.hasAgainThatNeedsToRun())\n        return ret\n    }\n\n    public press(dir: RULE_DIRECTION) {\n        this.markAcceptingInput(false)\n        super.press(dir)\n    }\n\n    public pressUndo() {\n        this.markAcceptingInput(false)\n        super.pressUndo()\n    }\n\n    public pressRestart() {\n        this.markAcceptingInput(false)\n        super.pressRestart()\n    }\n\n    public setLevel(levelNum: number) {\n        // this.markAcceptingInput(false)\n        super.setLevel(levelNum)\n        this.clearScreen()\n\n        if (!this.isCurrentLevelAMessage()) {\n            const levelCells = this.getCurrentLevelCells()\n            // Draw the level\n            // Draw the empty table\n            this.tableCells = []\n            const gameData = this.getGameData()\n            const { width, height } = gameData.metadata.flickscreen || gameData.metadata.zoomscreen || { width: levelCells[0].length, height: levelCells.length }\n            for (let currentY = 0; currentY < height; currentY++) {\n                const tr = document.createElement('tr')\n                const tableRow = []\n                for (let currentX = 0; currentX < width; currentX++) {\n                    const td = document.createElement('td')\n                    const tableCellPixels = []\n                    td.classList.add('ps-cell')\n                    td.setAttribute('tabindex', '0')\n\n                    const cellLabel = document.createElement('span')\n                    cellLabel.classList.add('ps-cell-label')\n                    td.appendChild(cellLabel)\n\n                    const sprite = document.createElement('div')\n                    sprite.classList.add('ps-sprite-whole')\n                    sprite.setAttribute('aria-hidden', 'true')\n\n                    for (let row = 0; row < this.SPRITE_HEIGHT; row++) {\n                        const spriteRow = document.createElement('div')\n                        spriteRow.classList.add('ps-sprite-row')\n                        const pixelRow = []\n\n                        for (let col = 0; col < this.SPRITE_WIDTH; col++) {\n                            const spritePixel = document.createElement('span')\n                            spritePixel.classList.add('ps-sprite-pixel')\n                            spriteRow.appendChild(spritePixel)\n                            pixelRow.push(spritePixel)\n                        }\n                        sprite.appendChild(spriteRow)\n                        tableCellPixels.push(pixelRow)\n                    }\n                    td.appendChild(sprite)\n                    tr.appendChild(td)\n                    tableRow.push({ td, label: cellLabel, pixels: tableCellPixels })\n                }\n                this.table.appendChild(tr)\n                this.tableCells.push(tableRow)\n            }\n\n            for (const row of levelCells) {\n                this.drawCells(row, false)\n            }\n\n            if (this.getGameData().metadata.runRulesOnLevelStart) {\n                this.tick()\n            }\n        }\n        this.markAcceptingInput(true)\n    }\n\n    public willAllLevelsFitOnScreen(gameData: GameData) {\n        return true\n    }\n\n    public _drawPixel(x: number, y: number, fgHex: string, bgHex: Optional<string>, chars: string) {\n        const rowIndex = Math.floor(y / this.SPRITE_HEIGHT)\n        const colIndex = Math.floor(x / this.SPRITE_WIDTH)\n        const pixelY = y % this.SPRITE_HEIGHT\n        const pixelX = x % this.SPRITE_WIDTH\n\n        const pixel = this.tableCells[rowIndex][colIndex].pixels[pixelY][pixelX]\n        if (!pixel) {\n            throw new Error(`BUG: Could not set pixel because table is too small`)\n        }\n        let style = `color: ${fgHex};`\n        if (bgHex) {\n            style += ` background-color: ${bgHex};`\n        }\n        pixel.setAttribute('style', style)\n        // pixel.textContent = chars\n    }\n\n    public clearScreen() {\n        super.clearScreen()\n        // clear all the rows\n        this.table.innerHTML = ''\n        this.tableCells = []\n    }\n\n    protected renderLevelScreen(levelRows: Cell[][], renderScreenDepth: number) {\n        this.drawCells(_flatten(levelRows), false, renderScreenDepth)\n    }\n\n    protected setPixel(x: number, y: number, hex: string, fgHex: Optional<string>, chars: string) {\n        const rowIndex = Math.floor(y / this.SPRITE_HEIGHT)\n        const colIndex = Math.floor(x / this.SPRITE_WIDTH)\n        const pixelY = y % this.SPRITE_HEIGHT\n        const pixelX = x % this.SPRITE_WIDTH\n\n        const pixel = this.tableCells[rowIndex][colIndex].pixels[pixelY][pixelX]\n        if (!pixel) {\n            throw new Error(`BUG: Could not set pixel because table is too small`)\n        }\n        if (!chars || chars.trim().length === 0) {\n            chars = ''\n        }\n\n        if (!this.renderedPixels[y]) {\n            this.renderedPixels[y] = []\n        }\n        const onScreenPixel = this.renderedPixels[y][x]\n        if (!onScreenPixel || onScreenPixel.hex !== hex || onScreenPixel.chars !== chars) {\n            this.renderedPixels[y][x] = { hex, chars }\n\n            pixel.setAttribute('style', `background-color: ${hex}`)\n            // pixel.textContent = chars\n        }\n    }\n\n    protected drawCellsAfterRecentering(cells: Iterable<Cell>, renderScreenDepth: number) {\n        for (const cell of cells) {\n            this._drawCell(cell, renderScreenDepth)\n        }\n    }\n\n    protected checkIfCellCanBeDrawnOnScreen(cellStartX: number, cellStartY: number) {\n        return true\n    }\n\n    protected getMaxSize() {\n        // just pick something big for now\n        return {\n            columns: 1000,\n            rows: 1000\n        }\n    }\n\n    private markAcceptingInput(flag: boolean) {\n        if (flag) {\n            this.table.classList.add('ps-accepting-input')\n        } else {\n            this.table.classList.remove('ps-accepting-input')\n        }\n    }\n\n    private _drawCell(cell: Cell, renderScreenDepth: number = 0) {\n        if (!this.gameData) {\n            throw new Error(`BUG: gameData was not set yet`)\n        }\n        if (!this.hasVisualUi) {\n            throw new Error(`BUG: Should not get to this point`)\n        }\n\n        // TODO: Also eventually filter out the Background ones when Background is an OR Tile\n        const spritesForDebugging = cell.getSprites().filter((s) => !s.isBackground())\n\n        const { isOnScreen, cellStartX, cellStartY } = this.cellPosToXY(cell)\n\n        if (!isOnScreen) {\n            return // no need to render because it is off-screen\n        }\n\n        // Inject the set of sprites for a11y\n        const cellLabel = this.tableCells[cell.rowIndex - this.windowOffsetRowStart][cell.colIndex - this.windowOffsetColStart].label\n        if (!cellLabel) {\n            throw new Error(`BUG: Could not find cell in the table: [${cell.rowIndex} - ${this.windowOffsetRowStart}][${cell.colIndex} - ${this.windowOffsetColStart}]`)\n        }\n        if (spritesForDebugging.length > 0) {\n            cellLabel.textContent = spritesForDebugging.map((s) => s.getName()).join(', ')\n        } else {\n            cellLabel.textContent = '(empty)'\n        }\n\n        const pixels: IColor[][] = this.getPixelsForCell(cell)\n        pixels.forEach((spriteRow, spriteRowIndex) => {\n            spriteRow.forEach((spriteColor: IColor, spriteColIndex) => {\n                if (!this.gameData) {\n                    throw new Error(`BUG: gameData was not set yet`)\n                }\n                const x = cellStartX + spriteColIndex\n                const y = cellStartY + spriteRowIndex\n\n                let color: Optional<IColor>\n\n                if (spriteColor) {\n                    if (!spriteColor.isTransparent()) {\n                        color = spriteColor\n                    } else if (this.gameData.metadata.backgroundColor) {\n                        color = this.gameData.metadata.backgroundColor\n                    } else {\n                        color = null\n                    }\n                }\n\n                if (color) {\n                    const { r, g, b } = color.toRgb()\n                    const hex = color.toHex()\n                    let fgHex = null\n\n                    let chars = ' '\n\n                    // Print a debug number which contains the number of sprites in this cell\n                    // Change the foreground color to be black if the color is light\n                    if (process.env.NODE_ENV === 'development') {\n                        if (r > 192 && g > 192 && b > 192) {\n                            fgHex = '#000000'\n                        } else {\n                            fgHex = '#ffffff'\n                        }\n                        const sprite = spritesForDebugging[spriteRowIndex]\n                        if (sprite) {\n                            let spriteName = sprite.getName()\n                            let wantsToMove\n\n                            switch (cell.getWantsToMove(sprite)) {\n                                case RULE_DIRECTION.STATIONARY:\n                                    wantsToMove = ''\n                                    break\n                                case RULE_DIRECTION.UP:\n                                    wantsToMove = '^'\n                                    break\n                                case RULE_DIRECTION.DOWN:\n                                    wantsToMove = 'v'\n                                    break\n                                case RULE_DIRECTION.LEFT:\n                                    wantsToMove = '<'\n                                    break\n                                case RULE_DIRECTION.RIGHT:\n                                    wantsToMove = '>'\n                                    break\n                                case RULE_DIRECTION.ACTION:\n                                    wantsToMove = 'X'\n                                    break\n                                default:\n                                    throw new Error(`BUG: Invalid wantsToMove \"${cell.getWantsToMove(sprite)}\"`)\n                            }\n                            spriteName = `${wantsToMove}${spriteName}`\n                            if (spriteName.length > 10) {\n                                const beforeEllipsis = spriteName.substring(0, this.SPRITE_WIDTH)\n                                const afterEllipsis = spriteName.substring(spriteName.length - this.SPRITE_WIDTH + 1)\n                                spriteName = `${beforeEllipsis}.${afterEllipsis}`\n                            }\n                            const msg = `${spriteName.substring(spriteColIndex * 2, spriteColIndex * 2 + 2)}`\n                            chars = msg.substring(0, 2)\n                        }\n                        if (spriteRowIndex === this.SPRITE_HEIGHT - 1 && spriteColIndex === this.SPRITE_WIDTH - 1) {\n                            if (spritesForDebugging.length > this.SPRITE_WIDTH * 2 - 1) {\n                                chars = `${spritesForDebugging.length}`\n                            } else {\n                                chars = ` ${spritesForDebugging.length}`\n                            }\n                        }\n                    }\n\n                    this.setPixel(x, y, hex, fgHex, chars)\n\n                }\n            })\n        })\n    }\n\n    isCurrentLevelAMessage() {\n        if (!this.engine) {\n            throw new Error(`BUG: engine has not been set yet`)\n        }\n        return !this.engine.getCurrentLevel().isMap()\n    }\n\n    getCurrentLevelMessage() {\n        if (!this.engine) {\n            throw new Error(`BUG: engine has not been set yet`)\n        }\n        const level = this.engine.getCurrentLevel()\n        if (level.isMap()) {\n            throw new Error(`BUG: current level is not a message level`)\n        }\n        return level.getMessage()\n    }\n}\n\nexport default TableUI\n"],"sourceRoot":""}